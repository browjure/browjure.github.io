shadow$provide.module$node_modules$$luma_DOT_gl$engine$dist$es5$transform$transform_shader_utils=function(global,require,module,exports){function getVaryingType(line,varying){return(line=(0,_shadertools.getQualifierDetails)(line,["varying","out"]))?line.name===varying?line.type:null:null}function processAttributeDefinition(line,textureMap){var samplerTextureMap={};var attributeData=(0,_shadertools.getQualifierDetails)(line,["attribute","in"]);if(!attributeData)return null;var type=attributeData.type;
if((attributeData=attributeData.name)&&textureMap[attributeData]){line="// ".concat(line," \x3d\x3e Replaced by Transform with a sampler");textureMap="".concat(SAMPLER_UNIFORM_PREFIX).concat(attributeData);var sizeName="".concat(SIZE_UNIFORM_PREFIX).concat(attributeData),uniformDeclerations="  uniform sampler2D ".concat(textureMap,";\n  uniform vec2 ").concat(sizeName,";"),channels=(0,_shadertools.typeToChannelSuffix)(type);type="  ".concat(type," ").concat(attributeData," \x3d transform_getInput(").concat(textureMap,
", ").concat(sizeName,").").concat(channels,";\n");samplerTextureMap[textureMap]=attributeData;return{updatedLine:line,inject:{"vs:#decl":uniformDeclerations,"vs:#main-start":type},samplerTextureMap}}return null}Object.defineProperty(exports,"__esModule",{value:!0});exports.updateForTextures=function(_ref){var vs=_ref.vs,sourceTextureMap=_ref.sourceTextureMap,targetTextureVarying=_ref.targetTextureVarying;_ref=_ref.targetTexture;var sourceCount=Object.keys(sourceTextureMap).length,targetTextureType=
null,samplerTextureMap={},finalInject={};if(0<sourceCount||targetTextureVarying){vs=vs.split("\n");var updateVsLines=vs.slice();vs.forEach(function(line,index,lines){if(0<sourceCount&&(lines=processAttributeDefinition(line,sourceTextureMap))){var inject=lines.inject;updateVsLines[index]=lines.updatedLine;finalInject=(0,_shadertools.combineInjects)([finalInject,inject]);Object.assign(samplerTextureMap,lines.samplerTextureMap);sourceCount--}targetTextureVarying&&!targetTextureType&&(targetTextureType=
getVaryingType(line,targetTextureVarying))});targetTextureVarying&&((0,_webgl.assert)(_ref),vs="".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying),_ref="uniform vec2 ".concat(vs,";\n"),vs="     vec2 ".concat(VS_POS_VARIABLE," \x3d transform_getPos(").concat(vs,");\n     gl_Position \x3d vec4(").concat(VS_POS_VARIABLE,", 0, 1.);\n"),_ref={"vs:#decl":_ref,"vs:#main-start":vs},finalInject=(0,_shadertools.combineInjects)([finalInject,_ref]));vs=updateVsLines.join("\n")}return{vs,targetTextureType,
inject:finalInject,samplerTextureMap}};exports.getSizeUniforms=function(_ref2){var sourceTextureMap=_ref2.sourceTextureMap,targetTextureVarying=_ref2.targetTextureVarying,targetTexture=_ref2.targetTexture;_ref2={};if(targetTextureVarying){var width=targetTexture.width;targetTexture=targetTexture.height;_ref2["".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying)]=[width,targetTexture]}for(var textureName in sourceTextureMap)targetTextureVarying=sourceTextureMap[textureName],width=targetTextureVarying.width,
targetTexture=targetTextureVarying.height,_ref2["".concat(SIZE_UNIFORM_PREFIX).concat(textureName)]=[width,targetTexture];return _ref2};exports.getVaryingType=getVaryingType;exports.processAttributeDefinition=processAttributeDefinition;var _webgl=require("module$node_modules$$luma_DOT_gl$webgl$dist$es5$index"),_shadertools=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$index"),SAMPLER_UNIFORM_PREFIX="transform_uSampler_",SIZE_UNIFORM_PREFIX="transform_uSize_",VS_POS_VARIABLE="transform_position"}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$engine$dist$es5$transform$transform_shader_utils.js.map
