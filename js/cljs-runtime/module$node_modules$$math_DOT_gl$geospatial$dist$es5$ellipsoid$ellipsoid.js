shadow$provide.module$node_modules$$math_DOT_gl$geospatial$dist$es5$ellipsoid$ellipsoid=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _slicedToArray2=module(require("module$node_modules$$babel$runtime$helpers$slicedToArray")),_classCallCheck2=module(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),
_createClass2=module(require("module$node_modules$$babel$runtime$helpers$createClass")),_core=require("module$node_modules$$math_DOT_gl$core$dist$es5$index"),vec3=global(require("module$node_modules$gl_matrix$cjs$vec3")),_constants=require("module$node_modules$$math_DOT_gl$geospatial$dist$es5$constants"),_typeUtils=require("module$node_modules$$math_DOT_gl$geospatial$dist$es5$type_utils"),_scaleToGeodeticSurface2=module(require("module$node_modules$$math_DOT_gl$geospatial$dist$es5$ellipsoid$helpers$scale_to_geodetic_surface")),
_ellipsoidTransform=module(require("module$node_modules$$math_DOT_gl$geospatial$dist$es5$ellipsoid$helpers$ellipsoid_transform")),scratchVector=new _core.Vector3,scratchNormal=new _core.Vector3,scratchK=new _core.Vector3,scratchPosition=new _core.Vector3,scratchHeight=new _core.Vector3,scratchCartesian=new _core.Vector3,wgs84;require=function(){function Ellipsoid(){var x=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,y=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,z=2<arguments.length&&
void 0!==arguments[2]?arguments[2]:0;(0,_classCallCheck2["default"])(this,Ellipsoid);(0,_core.assert)(0<=x);(0,_core.assert)(0<=y);(0,_core.assert)(0<=z);this.radii=new _core.Vector3(x,y,z);this.radiiSquared=new _core.Vector3(x*x,y*y,z*z);this.radiiToTheFourth=new _core.Vector3(x*x*x*x,y*y*y*y,z*z*z*z);this.oneOverRadii=new _core.Vector3(0===x?0:1/x,0===y?0:1/y,0===z?0:1/z);this.oneOverRadiiSquared=new _core.Vector3(0===x?0:1/(x*x),0===y?0:1/(y*y),0===z?0:1/(z*z));this.minimumRadius=Math.min(x,y,
z);this.maximumRadius=Math.max(x,y,z);this.centerToleranceSquared=_core._MathUtils.EPSILON1;0!==this.radiiSquared.z&&(this.squaredXOverSquaredZ=this.radiiSquared.x/this.radiiSquared.z);Object.freeze(this)}(0,_createClass2["default"])(Ellipsoid,null,[{key:"WGS84",get:function(){return wgs84=wgs84||new Ellipsoid(_constants.WGS84_RADIUS_X,_constants.WGS84_RADIUS_Y,_constants.WGS84_RADIUS_Z)}}]);(0,_createClass2["default"])(Ellipsoid,[{key:"equals",value:function(right){return this===right||!(!right||
!this.radii.equals(right.radii))}},{key:"toString",value:function(){return this.radii.toString()}},{key:"cartographicToCartesian",value:function(cartographic){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0],height=(0,_slicedToArray2["default"])(cartographic,3)[2];this.geodeticSurfaceNormalCartographic(cartographic,scratchNormal);scratchK.copy(this.radiiSquared).scale(scratchNormal);var gamma=Math.sqrt(scratchNormal.dot(scratchK));scratchK.scale(1/gamma);scratchNormal.scale(height);
scratchK.add(scratchNormal);return scratchK.to(result)}},{key:"cartesianToCartographic",value:function(cartesian){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0];scratchCartesian.from(cartesian);var point=this.scaleToGeodeticSurface(scratchCartesian,scratchPosition);if(point){var normal=this.geodeticSurfaceNormal(point,scratchNormal);scratchHeight.copy(scratchCartesian).subtract(point);point=Math.atan2(normal.y,normal.x);normal=Math.asin(normal.z);var height=Math.sign(vec3.dot(scratchHeight,
scratchCartesian))*vec3.length(scratchHeight);return(0,_typeUtils.toCartographicFromRadians)([point,normal,height],result)}}},{key:"eastNorthUpToFixedFrame",value:function(origin){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:new _core.Matrix4;return(0,_ellipsoidTransform["default"])(this,"east","north","up",origin,result)}},{key:"localFrameToFixedFrame",value:function(firstAxis,secondAxis,thirdAxis,origin){var result=4<arguments.length&&void 0!==arguments[4]?arguments[4]:new _core.Matrix4;
return(0,_ellipsoidTransform["default"])(this,firstAxis,secondAxis,thirdAxis,origin,result)}},{key:"geocentricSurfaceNormal",value:function(cartesian){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0];return scratchVector.from(cartesian).normalize().to(result)}},{key:"geodeticSurfaceNormalCartographic",value:function(cartographic){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0],cartographicVectorRadians=(0,_typeUtils.fromCartographicToRadians)(cartographic),
longitude=cartographicVectorRadians[0];cartographicVectorRadians=cartographicVectorRadians[1];var cosLatitude=Math.cos(cartographicVectorRadians);scratchVector.set(cosLatitude*Math.cos(longitude),cosLatitude*Math.sin(longitude),Math.sin(cartographicVectorRadians)).normalize();return scratchVector.to(result)}},{key:"geodeticSurfaceNormal",value:function(cartesian){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0];return scratchVector.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result)}},
{key:"scaleToGeodeticSurface",value:function(cartesian,result){return(0,_scaleToGeodeticSurface2["default"])(cartesian,this,result)}},{key:"scaleToGeocentricSurface",value:function(cartesian){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0];scratchPosition.from(cartesian);var positionX=scratchPosition.x,positionY=scratchPosition.y,positionZ=scratchPosition.z,oneOverRadiiSquared=this.oneOverRadiiSquared;return scratchPosition.multiplyScalar(1/Math.sqrt(positionX*positionX*
oneOverRadiiSquared.x+positionY*positionY*oneOverRadiiSquared.y+positionZ*positionZ*oneOverRadiiSquared.z)).to(result)}},{key:"transformPositionToScaledSpace",value:function(position){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0];return scratchPosition.from(position).scale(this.oneOverRadii).to(result)}},{key:"transformPositionFromScaledSpace",value:function(position){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0];return scratchPosition.from(position).scale(this.radii).to(result)}},
{key:"getSurfaceNormalIntersectionWithZAxis",value:function(position){var buffer=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,result=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[0,0,0];(0,_core.assert)((0,_core.equals)(this.radii.x,this.radii.y,_core._MathUtils.EPSILON15));(0,_core.assert)(0<this.radii.z);scratchPosition.from(position);var z=scratchPosition.z*(1-this.squaredXOverSquaredZ);if(!(Math.abs(z)>=this.radii.z-buffer))return scratchPosition.set(0,0,z).to(result)}}]);
return Ellipsoid}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$math_DOT_gl$geospatial$dist$es5$ellipsoid$ellipsoid.js.map
