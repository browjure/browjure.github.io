{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$webgl$dist$es5$webgl_utils$typed_array_utils.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@luma_DOT_gl/webgl/dist/es5/webgl-utils/typed-array-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$webgl$dist$es5$webgl_utils$typed_array_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGLTypeFromTypedArray = getGLTypeFromTypedArray;\nexports.getTypedArrayFromGLType = getTypedArrayFromGLType;\nexports.flipRows = flipRows;\nexports.scalePixels = scalePixels;\nvar ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\n\nfunction getGLTypeFromTypedArray(arrayOrType) {\n  var type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n\n  switch (type) {\n    case Float32Array:\n      return 5126;\n\n    case Uint16Array:\n      return 5123;\n\n    case Uint32Array:\n      return 5125;\n\n    case Uint8Array:\n      return 5121;\n\n    case Uint8ClampedArray:\n      return 5121;\n\n    case Int8Array:\n      return 5120;\n\n    case Int16Array:\n      return 5122;\n\n    case Int32Array:\n      return 5124;\n\n    default:\n      throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\n\nfunction getTypedArrayFromGLType(glType) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$clamped = _ref.clamped,\n      clamped = _ref$clamped === void 0 ? true : _ref$clamped;\n\n  switch (glType) {\n    case 5126:\n      return Float32Array;\n\n    case 5123:\n    case 33635:\n    case 32819:\n    case 32820:\n      return Uint16Array;\n\n    case 5125:\n      return Uint32Array;\n\n    case 5121:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n\n    case 5120:\n      return Int8Array;\n\n    case 5122:\n      return Int16Array;\n\n    case 5124:\n      return Int32Array;\n\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n\nfunction flipRows(_ref2) {\n  var data = _ref2.data,\n      width = _ref2.width,\n      height = _ref2.height,\n      _ref2$bytesPerPixel = _ref2.bytesPerPixel,\n      bytesPerPixel = _ref2$bytesPerPixel === void 0 ? 4 : _ref2$bytesPerPixel,\n      temp = _ref2.temp;\n  var bytesPerRow = width * bytesPerPixel;\n  temp = temp || new Uint8Array(bytesPerRow);\n\n  for (var y = 0; y < height / 2; ++y) {\n    var topOffset = y * bytesPerRow;\n    var bottomOffset = (height - y - 1) * bytesPerRow;\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    data.set(temp, bottomOffset);\n  }\n}\n\nfunction scalePixels(_ref3) {\n  var data = _ref3.data,\n      width = _ref3.width,\n      height = _ref3.height;\n  var newWidth = Math.round(width / 2);\n  var newHeight = Math.round(height / 2);\n  var newData = new Uint8Array(newWidth * newHeight * 4);\n\n  for (var y = 0; y < newHeight; y++) {\n    for (var x = 0; x < newWidth; x++) {\n      for (var c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n\n  return {\n    data: newData,\n    width: newWidth,\n    height: newHeight\n  };\n}\n//# sourceMappingURL=typed-array-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","getGLTypeFromTypedArray","arrayOrType","ArrayBuffer","isView","type","constructor","Float32Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray","Int8Array","Int16Array","Int32Array","Error","ERR_TYPE_DEDUCTION","getTypedArrayFromGLType","glType","_ref$clamped","_ref","arguments","length","undefined","clamped","flipRows","_ref2","data","height","_ref2$bytesPerPixel","bytesPerPixel","temp","bytesPerRow","width","y","topOffset","bottomOffset","set","subarray","copyWithin","scalePixels","_ref3","newWidth","Math","round","newHeight","newData","x","c"]
}
