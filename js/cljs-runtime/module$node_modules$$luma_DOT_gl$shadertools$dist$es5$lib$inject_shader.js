shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$inject_shader=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=function(source,type,inject){var injectStandardStubs=3<arguments.length&&void 0!==arguments[3]?arguments[3]:!1,isVertex=type===_constants.VERTEX_SHADER,_loop=function(key){var fragmentData=inject[key];fragmentData.sort(function(a,
b){return a.order-b.order});fragments.length=fragmentData.length;for(var i=0,len=fragmentData.length;i<len;++i)fragments[i]=fragmentData[i].injection;var fragmentString="".concat(fragments.join("\n"),"\n");switch(key){case "vs:#decl":isVertex&&(source=source.replace(DECLARATION_INJECT_MARKER,fragmentString));break;case "vs:#main-start":isVertex&&(source=source.replace(REGEX_START_OF_MAIN,function(match){return match+fragmentString}));break;case "vs:#main-end":isVertex&&(source=source.replace(REGEX_END_OF_MAIN,
function(match){return fragmentString+match}));break;case "fs:#decl":isVertex||(source=source.replace(DECLARATION_INJECT_MARKER,fragmentString));break;case "fs:#main-start":isVertex||(source=source.replace(REGEX_START_OF_MAIN,function(match){return match+fragmentString}));break;case "fs:#main-end":isVertex||(source=source.replace(REGEX_END_OF_MAIN,function(match){return fragmentString+match}));break;default:source=source.replace(key,function(match){return match+fragmentString})}},key$jscomp$0;for(key$jscomp$0 in inject)_loop(key$jscomp$0);
source=source.replace(DECLARATION_INJECT_MARKER,"");injectStandardStubs&&(source=source.replace(/\}\s*$/,function(match){return match+MODULE_INJECTORS[type]}));return source};exports.combineInjects=function(injects){var result={};(0,_utils.assert)(Array.isArray(injects)&&1<injects.length);injects.forEach(function(inject){for(var key in inject)result[key]=result[key]?"".concat(result[key],"\n").concat(inject[key]):inject[key]});return result};exports.DECLARATION_INJECT_MARKER=void 0;global=global(require("module$node_modules$$babel$runtime$helpers$defineProperty"));
module=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$module_injectors");var _constants=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$constants"),_utils=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$utils$index"),_MODULE_INJECTORS,MODULE_INJECTORS=(_MODULE_INJECTORS={},(0,global["default"])(_MODULE_INJECTORS,_constants.VERTEX_SHADER,module.MODULE_INJECTORS_VS),(0,global["default"])(_MODULE_INJECTORS,_constants.FRAGMENT_SHADER,module.MODULE_INJECTORS_FS),
_MODULE_INJECTORS),DECLARATION_INJECT_MARKER="__LUMA_INJECT_DECLARATIONS__";exports.DECLARATION_INJECT_MARKER=DECLARATION_INJECT_MARKER;var REGEX_START_OF_MAIN=/void\s+main\s*\([^)]*\)\s*\{\n?/,REGEX_END_OF_MAIN=/}\n?[^{}]*$/,fragments=[]}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$inject_shader.js.map
