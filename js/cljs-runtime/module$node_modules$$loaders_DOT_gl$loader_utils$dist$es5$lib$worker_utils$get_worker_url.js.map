{
"version":3,
"file":"module$node_modules$$loaders_DOT_gl$loader_utils$dist$es5$lib$worker_utils$get_worker_url.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,yFAAf,CAA8G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlJC,MAAAA,CAAyBH,OAAA,CAAQ,kEAAR,CAE7BI,OAAA,CAAOC,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAA,CAAQK,YAAR,CAMAA,QAAqB,CAACC,YAAD,CAAe,CAElC,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAgD,QAAhD,GAAwB,MAAOD,aAA/B,CAA0D,eAA1D,CAEA,IAAIA,YAAA,CAAaE,UAAb,CAAwB,MAAxB,CAAJ,EAAuCF,YAAA,CAAaG,QAAb,CAAsB,GAAtB,CAAvC,CAAmE,CAGjE,IAFIC,YAEJ,CAFgBJ,YAAA,CAAaK,KAAb,CAAmB,eAAnB,CAAA,CAAoC,CAApC,CAEhB;AAAiB,CAACD,YAAA,CAAUF,UAAV,CAAqB,MAArB,CAAlB,CACE,MAAOE,aAGTJ,aAAA,CAiBKM,0BAAA,CAA2BA,MAA3B,CAjBsBF,YAiBtB,CAA6C,oDAA7C,CAxB4D,CAUnE,IAAIG,UAAYC,cAAA,CAAeC,GAAf,CAAmBT,YAAnB,CAEXO,UAAL,GACMG,SAIJ,CAJW,IAAIC,IAAJ,CAAS,CAACX,YAAD,CAAT,CAAyB,CAClCY,KAAM,wBAD4B,CAAzB,CAIX,CADAL,SACA,CADYM,GAAA,CAAIC,eAAJ,CAAoBJ,SAApB,CACZ,CAAAF,cAAA,CAAeO,GAAf,CAAmBf,YAAnB,CAAiCO,SAAjC,CALF,CAQA,OAAOA,UAxB2B,CAJpC,KAAIN,QAAUN,MAAA,CAAuBH,OAAA,CAAQ,gFAAR,CAAvB,CAAd;AAEIgB,eAAiB,IAAIQ,GAZ6H;",
"sources":["node_modules/@loaders_DOT_gl/loader-utils/dist/es5/lib/worker-utils/get-worker-url.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$loaders_DOT_gl$loader_utils$dist$es5$lib$worker_utils$get_worker_url\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWorkerURL = getWorkerURL;\n\nvar _assert = _interopRequireDefault(require(\"../env-utils/assert\"));\n\nvar workerURLCache = new Map();\n\nfunction getWorkerURL(workerSource) {\n  var workerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Worker';\n  (0, _assert[\"default\"])(typeof workerSource === 'string', 'worker source');\n\n  if (workerSource.startsWith('url(') && workerSource.endsWith(')')) {\n    var workerUrl = workerSource.match(/^url\\((.*)\\)$/)[1];\n\n    if (workerUrl && !workerUrl.startsWith('http')) {\n      return workerUrl;\n    }\n\n    workerSource = buildScript(workerUrl);\n  }\n\n  var workerURL = workerURLCache.get(workerSource);\n\n  if (!workerURL) {\n    var blob = new Blob([workerSource], {\n      type: 'application/javascript'\n    });\n    workerURL = URL.createObjectURL(blob);\n    workerURLCache.set(workerSource, workerURL);\n  }\n\n  return workerURL;\n}\n\nfunction buildScript(workerUrl) {\n  return \"try {\\n  importScripts('\".concat(workerUrl, \"');\\n} catch (error) {\\n  console.error(error);\\n}\");\n}\n//# sourceMappingURL=get-worker-url.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","getWorkerURL","workerSource","_assert","startsWith","endsWith","workerUrl","match","concat","workerURL","workerURLCache","get","blob","Blob","type","URL","createObjectURL","set","Map"]
}
