{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_blur_filters$tiltshift.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,0FAAf,CAA+G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvJC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQI,SAAR,CAAoB,IAAK,EAErBC,OAAAA,CAAUP,OAAA,CAAQ,4EAAR,CAsCdE,QAAA,CAAQI,SAAR,CAjBgBA,CACdE,KAAM,WADQF,CAEdG,SApBaA,CACbC,WAAY,CACVL,MAAO,EADG,CAEVM,IAAK,CAFK,CAGVC,IAAK,EAHK,CADCH,CAMbI,eAAgB,CACdR,MAAO,GADO,CAEdM,IAAK,CAFS,CAGdC,IAAK,GAHS,CANHH,CAWbK,MAAO,CAAC,CAAD,CAAI,CAAJ,CAXML,CAYbM,IAAK,CAAC,CAAD,CAAI,CAAJ,CAZQN,CAabO,OAAQ,CACNX,MAAO,CAAA,CADD,CAEN,UAAW,CAAA,CAFL,CAbKI,CAkBCH,CAGdW,GAtBOA,4oCAmBOX;AAIdY,aAAc,CAACX,MAAD,CAASY,MAAT,CAJAb,CAKdc,OAAQ,CAAC,CACPC,QAAS,CAAA,CADF,CAEPZ,SAAU,CACRO,OAAQ,CAAA,CADA,CAFH,CAAD,CAKL,CACDK,QAAS,CAAA,CADR,CAEDZ,SAAU,CACRO,OAAQ,CAAA,CADA,CAFT,CALK,CALMV,CA7BuI;",
"sources":["node_modules/@luma_DOT_gl/shadertools/dist/es5/modules/image-blur-filters/tiltshift.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_blur_filters$tiltshift\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tiltShift = void 0;\n\nvar _random = require(\"../utils/random\");\n\nvar fs = \"uniform float blurRadius;\\nuniform float gradientRadius;\\nuniform vec2 start;\\nuniform vec2 end;\\nuniform bool invert;\\n\\nvec2 tiltShift_getDelta(vec2 texSize) {\\n  vec2 vector = normalize((end - start) * texSize);\\n  return invert ? vec2(-vector.y, vector.x) : vector;\\n}\\n\\nvec4 tiltShift_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\\n  vec4 color = vec4(0.0);\\n  float total = 0.0;\\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\n\\n  vec2 normal = normalize(vec2((start.y - end.y) * texSize.y, (end.x - start.x) * texSize.x));\\n  float radius = smoothstep(0.0, 1.0,\\n    abs(dot(texCoord * texSize - start * texSize, normal)) / gradientRadius) * blurRadius;\\n\\n  for (float t = -30.0; t <= 30.0; t++) {\\n    float percent = (t + offset - 0.5) / 30.0;\\n    float weight = 1.0 - abs(percent);\\n    vec4 sample = texture2D(texture, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);\\n    sample.rgb *= sample.a;\\n\\n    color += sample * weight;\\n    total += weight;\\n  }\\n\\n  color = color / total;\\n  color.rgb /= color.a + 0.00001;\\n\\n  return color;\\n}\\n\";\nvar uniforms = {\n  blurRadius: {\n    value: 15,\n    min: 0,\n    max: 50\n  },\n  gradientRadius: {\n    value: 200,\n    min: 0,\n    max: 400\n  },\n  start: [0, 0],\n  end: [1, 1],\n  invert: {\n    value: false,\n    \"private\": true\n  }\n};\nvar tiltShift = {\n  name: 'tiltShift',\n  uniforms: uniforms,\n  fs: fs,\n  dependencies: [_random.random],\n  passes: [{\n    sampler: true,\n    uniforms: {\n      invert: false\n    }\n  }, {\n    sampler: true,\n    uniforms: {\n      invert: true\n    }\n  }]\n};\nexports.tiltShift = tiltShift;\n//# sourceMappingURL=tiltshift.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","tiltShift","_random","name","uniforms","blurRadius","min","max","gradientRadius","start","end","invert","fs","dependencies","random","passes","sampler"]
}
