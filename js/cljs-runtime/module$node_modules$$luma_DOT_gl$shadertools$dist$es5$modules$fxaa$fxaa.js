shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$fxaa$fxaa=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.fxaa=void 0;exports.fxaa={name:"fxaa",uniforms:{},fs:"\n#define FXAA_QUALITY_PRESET 29\n\n#if (FXAA_QUALITY_PRESET \x3d\x3d 10)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 3.0\n    #define FXAA_QUALITY_P2 12.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 11)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 3.0\n    #define FXAA_QUALITY_P3 12.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 12)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 4.0\n    #define FXAA_QUALITY_P4 12.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 13)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 4.0\n    #define FXAA_QUALITY_P5 12.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 14)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 4.0\n    #define FXAA_QUALITY_P6 12.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 15)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 12.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 20)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 2.0\n    #define FXAA_QUALITY_P2 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 21)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 22)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 23)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 24)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 3.0\n    #define FXAA_QUALITY_P6 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 25)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 26)\n    #define FXAA_QUALITY_PS 9\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 4.0\n    #define FXAA_QUALITY_P8 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 27)\n    #define FXAA_QUALITY_PS 10\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 4.0\n    #define FXAA_QUALITY_P9 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 28)\n    #define FXAA_QUALITY_PS 11\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 4.0\n    #define FXAA_QUALITY_P10 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 29)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n#if (FXAA_QUALITY_PRESET \x3d\x3d 39)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.0\n    #define FXAA_QUALITY_P2 1.0\n    #define FXAA_QUALITY_P3 1.0\n    #define FXAA_QUALITY_P4 1.0\n    #define FXAA_QUALITY_P5 1.5\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n\n#define FxaaBool bool\n#define FxaaFloat float\n#define FxaaFloat2 vec2\n#define FxaaFloat3 vec3\n#define FxaaFloat4 vec4\n#define FxaaHalf float\n#define FxaaHalf2 vec2\n#define FxaaHalf3 vec3\n#define FxaaHalf4 vec4\n#define FxaaInt2 vec2\n#define FxaaTex sampler2D\n\n#define FxaaSat(x) clamp(x, 0.0, 1.0)\n#define FxaaTexTop(t, p) texture2D(t, p)\n#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\n\nFxaaFloat FxaaLuma_(FxaaFloat4 rgba) { return dot(rgba.rgb, vec3(0.2126, 0.7152, 0.0722)); }\n\nFxaaFloat4 FxaaPixelShader_(\n\n\n    FxaaFloat2 pos,\n\n\n\n\n    FxaaTex tex,\n\n\n\n\n    FxaaFloat2 fxaaQualityRcpFrame,\n\n\n\n\n\n\n\n\n\n\n    FxaaFloat fxaaQualitySubpix,\n\n\n\n\n\n\n\n\n\n    FxaaFloat fxaaQualityEdgeThreshold,\n\n\n\n\n\n\n\n\n\n\n\n\n\n    FxaaFloat fxaaQualityEdgeThresholdMin\n) {\n    FxaaFloat2 posM;\n    posM.x \x3d pos.x;\n    posM.y \x3d pos.y;\n    FxaaFloat4 rgbyM \x3d FxaaTexTop(tex, posM);\n    #define lumaM rgbyM.y\n    FxaaFloat lumaS \x3d FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaE \x3d FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaN \x3d FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaW \x3d FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n    FxaaFloat maxSM \x3d max(lumaS, lumaM);\n    FxaaFloat minSM \x3d min(lumaS, lumaM);\n    FxaaFloat maxESM \x3d max(lumaE, maxSM);\n    FxaaFloat minESM \x3d min(lumaE, minSM);\n    FxaaFloat maxWN \x3d max(lumaN, lumaW);\n    FxaaFloat minWN \x3d min(lumaN, lumaW);\n    FxaaFloat rangeMax \x3d max(maxWN, maxESM);\n    FxaaFloat rangeMin \x3d min(minWN, minESM);\n    FxaaFloat rangeMaxScaled \x3d rangeMax * fxaaQualityEdgeThreshold;\n    FxaaFloat range \x3d rangeMax - rangeMin;\n    FxaaFloat rangeMaxClamped \x3d max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n    FxaaBool earlyExit \x3d range \x3c rangeMaxClamped;\n    if(earlyExit)\n        return rgbyM;\n    FxaaFloat lumaNW \x3d FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaSE \x3d FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaNE \x3d FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaSW \x3d FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaNS \x3d lumaN + lumaS;\n    FxaaFloat lumaWE \x3d lumaW + lumaE;\n    FxaaFloat subpixRcpRange \x3d 1.0/range;\n    FxaaFloat subpixNSWE \x3d lumaNS + lumaWE;\n    FxaaFloat edgeHorz1 \x3d (-2.0 * lumaM) + lumaNS;\n    FxaaFloat edgeVert1 \x3d (-2.0 * lumaM) + lumaWE;\n    FxaaFloat lumaNESE \x3d lumaNE + lumaSE;\n    FxaaFloat lumaNWNE \x3d lumaNW + lumaNE;\n    FxaaFloat edgeHorz2 \x3d (-2.0 * lumaE) + lumaNESE;\n    FxaaFloat edgeVert2 \x3d (-2.0 * lumaN) + lumaNWNE;\n    FxaaFloat lumaNWSW \x3d lumaNW + lumaSW;\n    FxaaFloat lumaSWSE \x3d lumaSW + lumaSE;\n    FxaaFloat edgeHorz4 \x3d (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n    FxaaFloat edgeVert4 \x3d (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n    FxaaFloat edgeHorz3 \x3d (-2.0 * lumaW) + lumaNWSW;\n    FxaaFloat edgeVert3 \x3d (-2.0 * lumaS) + lumaSWSE;\n    FxaaFloat edgeHorz \x3d abs(edgeHorz3) + edgeHorz4;\n    FxaaFloat edgeVert \x3d abs(edgeVert3) + edgeVert4;\n    FxaaFloat subpixNWSWNESE \x3d lumaNWSW + lumaNESE;\n    FxaaFloat lengthSign \x3d fxaaQualityRcpFrame.x;\n    FxaaBool horzSpan \x3d edgeHorz \x3e\x3d edgeVert;\n    FxaaFloat subpixA \x3d subpixNSWE * 2.0 + subpixNWSWNESE;\n    if(!horzSpan) lumaN \x3d lumaW;\n    if(!horzSpan) lumaS \x3d lumaE;\n    if(horzSpan) lengthSign \x3d fxaaQualityRcpFrame.y;\n    FxaaFloat subpixB \x3d (subpixA * (1.0/12.0)) - lumaM;\n    FxaaFloat gradientN \x3d lumaN - lumaM;\n    FxaaFloat gradientS \x3d lumaS - lumaM;\n    FxaaFloat lumaNN \x3d lumaN + lumaM;\n    FxaaFloat lumaSS \x3d lumaS + lumaM;\n    FxaaBool pairN \x3d abs(gradientN) \x3e\x3d abs(gradientS);\n    FxaaFloat gradient \x3d max(abs(gradientN), abs(gradientS));\n    if(pairN) lengthSign \x3d -lengthSign;\n    FxaaFloat subpixC \x3d FxaaSat(abs(subpixB) * subpixRcpRange);\n    FxaaFloat2 posB;\n    posB.x \x3d posM.x;\n    posB.y \x3d posM.y;\n    FxaaFloat2 offNP;\n    offNP.x \x3d (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n    offNP.y \x3d ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n    if(!horzSpan) posB.x +\x3d lengthSign * 0.5;\n    if( horzSpan) posB.y +\x3d lengthSign * 0.5;\n    FxaaFloat2 posN;\n    posN.x \x3d posB.x - offNP.x * FXAA_QUALITY_P0;\n    posN.y \x3d posB.y - offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat2 posP;\n    posP.x \x3d posB.x + offNP.x * FXAA_QUALITY_P0;\n    posP.y \x3d posB.y + offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat subpixD \x3d ((-2.0)*subpixC) + 3.0;\n    FxaaFloat lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN));\n    FxaaFloat subpixE \x3d subpixC * subpixC;\n    FxaaFloat lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP));\n    if(!pairN) lumaNN \x3d lumaSS;\n    FxaaFloat gradientScaled \x3d gradient * 1.0/4.0;\n    FxaaFloat lumaMM \x3d lumaM - lumaNN * 0.5;\n    FxaaFloat subpixF \x3d subpixD * subpixE;\n    FxaaBool lumaMLTZero \x3d lumaMM \x3c 0.0;\n    lumaEndN -\x3d lumaNN * 0.5;\n    lumaEndP -\x3d lumaNN * 0.5;\n    FxaaBool doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n    FxaaBool doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n    if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P1;\n    if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P1;\n    FxaaBool doneNP \x3d (!doneN) || (!doneP);\n    if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P1;\n    if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P1;\n    if(doneNP) {\n        if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n        doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n        doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n        if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P2;\n        if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P2;\n        doneNP \x3d (!doneN) || (!doneP);\n        if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P2;\n        if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P2;\n        #if (FXAA_QUALITY_PS \x3e 3)\n        if(doneNP) {\n            if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n            doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n            doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n            if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P3;\n            if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P3;\n            doneNP \x3d (!doneN) || (!doneP);\n            if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P3;\n            if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P3;\n            #if (FXAA_QUALITY_PS \x3e 4)\n            if(doneNP) {\n                if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n                doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n                doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n                if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P4;\n                if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P4;\n                doneNP \x3d (!doneN) || (!doneP);\n                if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P4;\n                if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P4;\n                #if (FXAA_QUALITY_PS \x3e 5)\n                if(doneNP) {\n                    if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n                    doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n                    doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n                    if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P5;\n                    if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P5;\n                    doneNP \x3d (!doneN) || (!doneP);\n                    if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P5;\n                    if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P5;\n                    #if (FXAA_QUALITY_PS \x3e 6)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n                        doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n                        doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n                        if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P6;\n                        if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P6;\n                        doneNP \x3d (!doneN) || (!doneP);\n                        if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P6;\n                        if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P6;\n                        #if (FXAA_QUALITY_PS \x3e 7)\n                        if(doneNP) {\n                            if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n                            if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n                            if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n                            if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n                            doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n                            doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n                            if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P7;\n                            if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P7;\n                            doneNP \x3d (!doneN) || (!doneP);\n                            if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P7;\n                            if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P7;\n    #if (FXAA_QUALITY_PS \x3e 8)\n    if(doneNP) {\n        if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n        doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n        doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n        if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P8;\n        if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P8;\n        doneNP \x3d (!doneN) || (!doneP);\n        if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P8;\n        if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P8;\n        #if (FXAA_QUALITY_PS \x3e 9)\n        if(doneNP) {\n            if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n            doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n            doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n            if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P9;\n            if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P9;\n            doneNP \x3d (!doneN) || (!doneP);\n            if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P9;\n            if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P9;\n            #if (FXAA_QUALITY_PS \x3e 10)\n            if(doneNP) {\n                if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n                doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n                doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n                if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P10;\n                if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P10;\n                doneNP \x3d (!doneN) || (!doneP);\n                if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P10;\n                if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P10;\n                #if (FXAA_QUALITY_PS \x3e 11)\n                if(doneNP) {\n                    if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n                    doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n                    doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n                    if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P11;\n                    if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P11;\n                    doneNP \x3d (!doneN) || (!doneP);\n                    if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P11;\n                    if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P11;\n                    #if (FXAA_QUALITY_PS \x3e 12)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN \x3d FxaaLuma_(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP \x3d FxaaLuma_(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN \x3d lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP \x3d lumaEndP - lumaNN * 0.5;\n                        doneN \x3d abs(lumaEndN) \x3e\x3d gradientScaled;\n                        doneP \x3d abs(lumaEndP) \x3e\x3d gradientScaled;\n                        if(!doneN) posN.x -\x3d offNP.x * FXAA_QUALITY_P12;\n                        if(!doneN) posN.y -\x3d offNP.y * FXAA_QUALITY_P12;\n                        doneNP \x3d (!doneN) || (!doneP);\n                        if(!doneP) posP.x +\x3d offNP.x * FXAA_QUALITY_P12;\n                        if(!doneP) posP.y +\x3d offNP.y * FXAA_QUALITY_P12;\n                    }\n                    #endif\n                }\n                #endif\n            }\n            #endif\n        }\n        #endif\n    }\n    #endif\n                        }\n                        #endif\n                    }\n                    #endif\n                }\n                #endif\n            }\n            #endif\n        }\n        #endif\n    }\n    FxaaFloat dstN \x3d posM.x - posN.x;\n    FxaaFloat dstP \x3d posP.x - posM.x;\n    if(!horzSpan) dstN \x3d posM.y - posN.y;\n    if(!horzSpan) dstP \x3d posP.y - posM.y;\n    FxaaBool goodSpanN \x3d (lumaEndN \x3c 0.0) !\x3d lumaMLTZero;\n    FxaaFloat spanLength \x3d (dstP + dstN);\n    FxaaBool goodSpanP \x3d (lumaEndP \x3c 0.0) !\x3d lumaMLTZero;\n    FxaaFloat spanLengthRcp \x3d 1.0/spanLength;\n    FxaaBool directionN \x3d dstN \x3c dstP;\n    FxaaFloat dst \x3d min(dstN, dstP);\n    FxaaBool goodSpan \x3d directionN ? goodSpanN : goodSpanP;\n    FxaaFloat subpixG \x3d subpixF * subpixF;\n    FxaaFloat pixelOffset \x3d (dst * (-spanLengthRcp)) + 0.5;\n    FxaaFloat subpixH \x3d subpixG * fxaaQualitySubpix;\n    FxaaFloat pixelOffsetGood \x3d goodSpan ? pixelOffset : 0.0;\n    FxaaFloat pixelOffsetSubpix \x3d max(pixelOffsetGood, subpixH);\n    if(!horzSpan) posM.x +\x3d pixelOffsetSubpix * lengthSign;\n    if( horzSpan) posM.y +\x3d pixelOffsetSubpix * lengthSign;\n    return FxaaTexTop(tex, posM);\n}\n\nvec4 fxaa_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n    const float fxaa_QualitySubpix \x3d 0.5;\n    const float fxaa_QualityEdgeThreshold \x3d 0.125;\n    const float fxaa_QualityEdgeThresholdMin \x3d 0.0833;\n\n    return FxaaPixelShader_(\n        texCoord,\n        texture,\n        vec2(1.0) / texSize,\n        fxaa_QualitySubpix,\n        fxaa_QualityEdgeThreshold,\n        fxaa_QualityEdgeThresholdMin\n    );\n}\n",
passes:[{sampler:!0}]}}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$fxaa$fxaa.js.map
