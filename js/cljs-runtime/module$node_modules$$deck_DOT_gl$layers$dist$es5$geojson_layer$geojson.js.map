{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$layers$dist$es5$geojson_layer$geojson.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/layers/dist/es5/geojson-layer/geojson.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$layers$dist$es5$geojson_layer$geojson\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGeojsonFeatures = getGeojsonFeatures;\nexports.separateGeojsonFeatures = separateGeojsonFeatures;\nexports.validateGeometry = validateGeometry;\n\nvar _core = require(\"@deck.gl/core\");\n\nfunction getGeojsonFeatures(geojson) {\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  _core.log.assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      return [geojson];\n\n    case 'FeatureCollection':\n      _core.log.assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n\n      return geojson.features;\n\n    default:\n      return [{\n        geometry: geojson\n      }];\n  }\n}\n\nfunction separateGeojsonFeatures(features, wrapFeature) {\n  var dataRange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var separated = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n  var _dataRange$startRow = dataRange.startRow,\n      startRow = _dataRange$startRow === void 0 ? 0 : _dataRange$startRow,\n      _dataRange$endRow = dataRange.endRow,\n      endRow = _dataRange$endRow === void 0 ? features.length : _dataRange$endRow;\n\n  for (var featureIndex = startRow; featureIndex < endRow; featureIndex++) {\n    var feature = features[featureIndex];\n\n    _core.log.assert(feature && feature.geometry, 'GeoJSON does not have geometry');\n\n    var geometry = feature.geometry;\n\n    if (geometry.type === 'GeometryCollection') {\n      _core.log.assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n\n      var geometries = geometry.geometries;\n\n      for (var i = 0; i < geometries.length; i++) {\n        var subGeometry = geometries[i];\n        separateGeometry(subGeometry, separated, wrapFeature, feature, featureIndex);\n      }\n    } else {\n      separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(geometry, separated, wrapFeature, sourceFeature, sourceFeatureIndex) {\n  var type = geometry.type,\n      coordinates = geometry.coordinates;\n  var pointFeatures = separated.pointFeatures,\n      lineFeatures = separated.lineFeatures,\n      polygonFeatures = separated.polygonFeatures,\n      polygonOutlineFeatures = separated.polygonOutlineFeatures;\n\n  if (!validateGeometry(type, coordinates)) {\n    _core.log.warn(\"\".concat(type, \" coordinates are malformed\"))();\n\n    return;\n  }\n\n  switch (type) {\n    case 'Point':\n      pointFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      break;\n\n    case 'MultiPoint':\n      coordinates.forEach(function (point) {\n        pointFeatures.push(wrapFeature({\n          geometry: {\n            type: 'Point',\n            coordinates: point\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'LineString':\n      lineFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      break;\n\n    case 'MultiLineString':\n      coordinates.forEach(function (path) {\n        lineFeatures.push(wrapFeature({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'Polygon':\n      polygonFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      coordinates.forEach(function (path) {\n        polygonOutlineFeatures.push(wrapFeature({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'MultiPolygon':\n      coordinates.forEach(function (polygon) {\n        polygonFeatures.push(wrapFeature({\n          geometry: {\n            type: 'Polygon',\n            coordinates: polygon\n          }\n        }, sourceFeature, sourceFeatureIndex));\n        polygon.forEach(function (path) {\n          polygonOutlineFeatures.push(wrapFeature({\n            geometry: {\n              type: 'LineString',\n              coordinates: path\n            }\n          }, sourceFeature, sourceFeatureIndex));\n        });\n      });\n      break;\n\n    default:\n  }\n}\n\nvar COORDINATE_NEST_LEVEL = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\n\nfunction validateGeometry(type, coordinates) {\n  var nestLevel = COORDINATE_NEST_LEVEL[type];\n\n  _core.log.assert(nestLevel, \"Unknown GeoJSON type \".concat(type));\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  return coordinates && Number.isFinite(coordinates[0]);\n}\n//# sourceMappingURL=geojson.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","separateGeometry","geometry","separated","wrapFeature","sourceFeature","sourceFeatureIndex","type","coordinates","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","validateGeometry","push","forEach","point","path","polygon","_core","log","warn","concat","nestLevel","COORDINATE_NEST_LEVEL","assert","Number","isFinite","Object","defineProperty","value","getGeojsonFeatures","geojson","Array","isArray","features","separateGeojsonFeatures","dataRange","arguments","length","undefined","_dataRange$startRow","startRow","_dataRange$endRow","endRow","featureIndex","feature","geometries","i","subGeometry","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"]
}
