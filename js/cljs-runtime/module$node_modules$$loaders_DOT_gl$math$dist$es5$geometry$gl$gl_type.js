shadow$provide.module$node_modules$$loaders_DOT_gl$math$dist$es5$geometry$gl$gl_type=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass"));global=global(require("module$node_modules$$babel$runtime$helpers$defineProperty"));
var _constants=require("module$node_modules$$loaders_DOT_gl$math$dist$es5$geometry$constants"),_GL_TYPE_TO_ARRAY_TYP,GL_TYPE_TO_ARRAY_TYPE=(_GL_TYPE_TO_ARRAY_TYP={},(0,global["default"])(_GL_TYPE_TO_ARRAY_TYP,_constants.GL_TYPE.DOUBLE,Float64Array),(0,global["default"])(_GL_TYPE_TO_ARRAY_TYP,_constants.GL_TYPE.FLOAT,Float32Array),(0,global["default"])(_GL_TYPE_TO_ARRAY_TYP,_constants.GL_TYPE.UNSIGNED_SHORT,Uint16Array),(0,global["default"])(_GL_TYPE_TO_ARRAY_TYP,_constants.GL_TYPE.UNSIGNED_INT,Uint32Array),
(0,global["default"])(_GL_TYPE_TO_ARRAY_TYP,_constants.GL_TYPE.UNSIGNED_BYTE,Uint8Array),(0,global["default"])(_GL_TYPE_TO_ARRAY_TYP,_constants.GL_TYPE.BYTE,Int8Array),(0,global["default"])(_GL_TYPE_TO_ARRAY_TYP,_constants.GL_TYPE.SHORT,Int16Array),(0,global["default"])(_GL_TYPE_TO_ARRAY_TYP,_constants.GL_TYPE.INT,Int32Array),_GL_TYPE_TO_ARRAY_TYP),NAME_TO_GL_TYPE={DOUBLE:_constants.GL_TYPE.DOUBLE,FLOAT:_constants.GL_TYPE.FLOAT,UNSIGNED_SHORT:_constants.GL_TYPE.UNSIGNED_SHORT,UNSIGNED_INT:_constants.GL_TYPE.UNSIGNED_INT,
UNSIGNED_BYTE:_constants.GL_TYPE.UNSIGNED_BYTE,BYTE:_constants.GL_TYPE.BYTE,SHORT:_constants.GL_TYPE.SHORT,INT:_constants.GL_TYPE.INT};require=function(){function GLType(){(0,_classCallCheck2["default"])(this,GLType)}(0,_createClass2["default"])(GLType,null,[{key:"fromTypedArray",value:function(arrayOrType){arrayOrType=ArrayBuffer.isView(arrayOrType)?arrayOrType.constructor:arrayOrType;for(var glType in GL_TYPE_TO_ARRAY_TYPE)if(GL_TYPE_TO_ARRAY_TYPE[glType]===arrayOrType)return glType;throw Error("Failed to convert GL type");
}},{key:"fromName",value:function(name){name=NAME_TO_GL_TYPE[name];if(!name)throw Error("Failed to convert GL type");return name}},{key:"getArrayType",value:function(glType){switch(glType){case _constants.GL_TYPE.UNSIGNED_SHORT_5_6_5:case _constants.GL_TYPE.UNSIGNED_SHORT_4_4_4_4:case _constants.GL_TYPE.UNSIGNED_SHORT_5_5_5_1:return Uint16Array;default:glType=GL_TYPE_TO_ARRAY_TYPE[glType];if(!glType)throw Error("Failed to convert GL type");return glType}}},{key:"getByteSize",value:function(glType){return GLType.getArrayType(glType).BYTES_PER_ELEMENT}},
{key:"validate",value:function(glType){return!!GLType.getArrayType(glType)}},{key:"createTypedArray",value:function(glType,buffer){var byteOffset=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,length=3<arguments.length?arguments[3]:void 0;void 0===length&&(length=(buffer.byteLength-byteOffset)/GLType.getByteSize(glType));return new (GLType.getArrayType(glType))(buffer,byteOffset,length)}}]);return GLType}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$loaders_DOT_gl$math$dist$es5$geometry$gl$gl_type.js.map
