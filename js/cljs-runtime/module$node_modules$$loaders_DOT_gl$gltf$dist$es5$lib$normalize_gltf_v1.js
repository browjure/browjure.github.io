shadow$provide.module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$normalize_gltf_v1=function(global,require,module,exports){function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e;
},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;}}}}function _unsupportedIterableToArray(o,
minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");
module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=function(gltf){var options=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return(new GLTFV1Normalizer).normalize(gltf,options)};var _classCallCheck2=module(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=module(require("module$node_modules$$babel$runtime$helpers$createClass")),KHR_binary_glTF=global(require("module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$extensions$KHR_binary_gltf")),
GLTF_ARRAYS={accessors:"accessor",animations:"animation",buffers:"buffer",bufferViews:"bufferView",images:"image",materials:"material",meshes:"mesh",nodes:"node",samplers:"sampler",scenes:"scene",skins:"skin",textures:"texture"},GLTF_KEYS={accessor:"accessors",animations:"animation",buffer:"buffers",bufferView:"bufferViews",image:"images",material:"materials",mesh:"meshes",node:"nodes",sampler:"samplers",scene:"scenes",skin:"skins",texture:"textures"},GLTFV1Normalizer=function(){function GLTFV1Normalizer(gltf){(0,
_classCallCheck2["default"])(this,GLTFV1Normalizer);this.idToIndexMap={animations:{},accessors:{},buffers:{},bufferViews:{},images:{},materials:{},meshes:{},nodes:{},samplers:{},scenes:{},skins:{},textures:{}}}(0,_createClass2["default"])(GLTFV1Normalizer,[{key:"normalize",value:function(gltf,options){var json=this.json=gltf.json;switch(json.asset&&json.asset.version){case "2.0":return;case void 0:case "1.0":break;default:console.warn("glTF: Unknown version ".concat(json.asset.version));return}if(!options.normalize)throw Error("glTF v1 is not supported.");
console.warn("Converting glTF v1 to glTF v2 format. This is experimental and may fail.");this._addAsset(json);this._convertTopLevelObjectsToArrays(json);KHR_binary_glTF.decode(gltf,options);this._convertObjectIdsToArrayIndices(json);this._updateObjects(json)}},{key:"_addAsset",value:function(json){json.asset=json.asset||{};json.asset.version="2.0";json.asset.generator=json.asset.generator||"Normalized to glTF 2.0 by loaders.gl"}},{key:"_convertTopLevelObjectsToArrays",value:function(json){for(var arrayName in GLTF_ARRAYS)this._convertTopLevelObjectToArray(json,
arrayName)}},{key:"_convertTopLevelObjectToArray",value:function(json,mapName){var objectMap=json[mapName];if(objectMap&&!Array.isArray(objectMap)){json[mapName]=[];for(var id in objectMap){var object=objectMap[id];object.id=object.id||id;var index=json[mapName].length;json[mapName].push(object);this.idToIndexMap[mapName][id]=index}}}},{key:"_convertObjectIdsToArrayIndices",value:function(json){for(var arrayName in GLTF_ARRAYS)this._convertIdsToIndices(json,arrayName);"scene"in json&&(json.scene=
this._convertIdToIndex(json.scene,"scene"));arrayName=_createForOfIteratorHelper(json.textures);var _step;try{for(arrayName.s();!(_step=arrayName.n()).done;)this._convertTextureIds(_step.value)}catch(err){arrayName.e(err)}finally{arrayName.f()}_step=_createForOfIteratorHelper(json.meshes);var _step2;try{for(_step.s();!(_step2=_step.n()).done;)this._convertMeshIds(_step2.value)}catch(err){_step.e(err)}finally{_step.f()}_step2=_createForOfIteratorHelper(json.nodes);var _step3;try{for(_step2.s();!(_step3=
_step2.n()).done;)this._convertNodeIds(_step3.value)}catch(err){_step2.e(err)}finally{_step2.f()}json=_createForOfIteratorHelper(json.scenes);var _step4;try{for(json.s();!(_step4=json.n()).done;)this._convertSceneIds(_step4.value)}catch(err){json.e(err)}finally{json.f()}}},{key:"_convertTextureIds",value:function(texture){texture.source&&(texture.source=this._convertIdToIndex(texture.source,"image"))}},{key:"_convertMeshIds",value:function(mesh){mesh=_createForOfIteratorHelper(mesh.primitives);var _step5;
try{for(mesh.s();!(_step5=mesh.n()).done;){var primitive=_step5.value,attributes=primitive.attributes,indices=primitive.indices,material=primitive.material,attributeName;for(attributeName in attributes)attributes[attributeName]=this._convertIdToIndex(attributes[attributeName],"accessor");indices&&(primitive.indices=this._convertIdToIndex(indices,"accessor"));material&&(primitive.material=this._convertIdToIndex(material,"material"))}}catch(err){mesh.e(err)}finally{mesh.f()}}},{key:"_convertNodeIds",
value:function(node){var _this=this;node.children&&(node.children=node.children.map(function(child){return _this._convertIdToIndex(child,"node")}))}},{key:"_convertSceneIds",value:function(scene){var _this2=this;scene.nodes&&(scene.nodes=scene.nodes.map(function(node){return _this2._convertIdToIndex(node,"node")}))}},{key:"_convertIdsToIndices",value:function(json,topLevelArrayName){json=_createForOfIteratorHelper(json[topLevelArrayName]);var _step6;try{for(json.s();!(_step6=json.n()).done;){var object=
_step6.value,key;for(key in object){var index=this._convertIdToIndex(object[key],key);object[key]=index}}}catch(err){json.e(err)}finally{json.f()}}},{key:"_convertIdToIndex",value:function(id,key){var arrayName=GLTF_KEYS[key];if(arrayName in this.idToIndexMap){arrayName=this.idToIndexMap[arrayName][id];if(!Number.isFinite(arrayName))throw Error("gltf v1: failed to resolve ".concat(key," with id ").concat(id));return arrayName}return id}},{key:"_updateObjects",value:function(json){json=_createForOfIteratorHelper(this.json.buffers);
var _step7;try{for(json.s();!(_step7=json.n()).done;)delete _step7.value.type}catch(err){json.e(err)}finally{json.f()}}}]);return GLTFV1Normalizer}()}
//# sourceMappingURL=module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$normalize_gltf_v1.js.map
