shadow$provide.module$node_modules$$luma_DOT_gl$experimental$dist$es5$gltf$gltf_animator=function(global,require,module,exports){function accessorToJsArray(accessor){if(!accessor._animation){var components=ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type],_accessor$bufferView$=accessor.bufferView.data;_accessor$bufferView$=new ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType](_accessor$bufferView$.buffer,_accessor$bufferView$.byteOffset+(accessor.byteOffset||0),components*accessor.count);if(1===
components)accessor._animation=Array.from(_accessor$bufferView$);else{for(var slicedArray=[],i=0;i<_accessor$bufferView$.length;i+=components)slicedArray.push(Array.from(_accessor$bufferView$.slice(i,i+components)));accessor._animation=slicedArray}}return accessor._animation}function linearInterpolate(target,path,start,stop,ratio){if("rotation"===path)for(quaternion.slerp({start,target:stop,ratio}),start=0;start<quaternion.length;start++)target[path][start]=quaternion[start];else for(var _i=0;_i<
start.length;_i++)target[path][_i]=ratio*stop[_i]+(1-ratio)*start[_i]}function cubicsplineInterpolate(target,path,_ref){var p0=_ref.p0,outTangent0=_ref.outTangent0,inTangent1=_ref.inTangent1,p1=_ref.p1,tDiff=_ref.tDiff;_ref=_ref.ratio;for(var i=0;i<target[path].length;i++)target[path][i]=(2*Math.pow(_ref,3)-3*Math.pow(_ref,2)+1)*p0[i]+(Math.pow(_ref,3)-2*Math.pow(_ref,2)+_ref)*outTangent0[i]*tDiff+(-2*Math.pow(_ref,3)+3*Math.pow(_ref,2))*p1[i]+(Math.pow(_ref,3)-Math.pow(_ref,2))*inTangent1[i]*tDiff}
function stepInterpolate(target,path,value){for(var i=0;i<value.length;i++)target[path][i]=value[i]}function interpolate(time,_ref2,target,path){var input=_ref2.input,interpolation=_ref2.interpolation;_ref2=_ref2.output;var animationTime=time%input[input.length-1];time=input.findIndex(function(t){return t>=animationTime});var previousIndex=Math.max(0,time-1);if(!Array.isArray(target[path]))switch(path){case "translation":target[path]=[0,0,0];break;case "rotation":target[path]=[0,0,0,1];break;case "scale":target[path]=
[1,1,1];break;default:_webgl.log.warn("Bad animation path ".concat(path))()}(0,_webgl.assert)(target[path].length===_ref2[previousIndex].length);var previousTime=input[previousIndex];input=input[time];switch(interpolation){case "STEP":stepInterpolate(target,path,_ref2[previousIndex]);break;case "LINEAR":input>previousTime&&linearInterpolate(target,path,_ref2[previousIndex],_ref2[time],(animationTime-previousTime)/(input-previousTime));break;case "CUBICSPLINE":input>previousTime&&cubicsplineInterpolate(target,
path,{p0:_ref2[3*previousIndex+1],outTangent0:_ref2[3*previousIndex+2],inTangent1:_ref2[3*time],p1:_ref2[3*time+1],tDiff:input-previousTime,ratio:(animationTime-previousTime)/(input-previousTime)});break;default:_webgl.log.warn("Interpolation ".concat(interpolation," not supported"))()}}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=exports.ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY=exports.ATTRIBUTE_TYPE_TO_COMPONENTS=
void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_webgl=require("module$node_modules$$luma_DOT_gl$webgl$dist$es5$index");require=require("module$node_modules$$math_DOT_gl$core$dist$es5$index");var ATTRIBUTE_TYPE_TO_COMPONENTS={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16};exports.ATTRIBUTE_TYPE_TO_COMPONENTS=ATTRIBUTE_TYPE_TO_COMPONENTS;var ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY=
{5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};exports.ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY=ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY;var helperMatrix=new require.Matrix4,quaternion=new require.Quaternion,GLTFAnimation=function(){function GLTFAnimation(props){(0,_classCallCheck2["default"])(this,GLTFAnimation);this.startTime=0;this.playing=!0;this.speed=1;this.channels=[];Object.assign(this,props)}(0,_createClass2["default"])(GLTFAnimation,[{key:"animate",
value:function(timeMs){if(this.playing){var time=(timeMs/1E3-this.startTime)*this.speed;this.channels.forEach(function(_ref3){var target=_ref3.target;interpolate(time,_ref3.sampler,target,_ref3.path);_ref3=target._node;_ref3.matrix.identity();target.translation&&_ref3.matrix.translate(target.translation);if(target.rotation){var rotationMatrix=helperMatrix.fromQuaternion(target.rotation);_ref3.matrix.multiplyRight(rotationMatrix)}target.scale&&_ref3.matrix.scale(target.scale)})}}}]);return GLTFAnimation}();
require=function(){function GLTFAnimator(gltf){(0,_classCallCheck2["default"])(this,GLTFAnimator);this.animations=gltf.animations.map(function(animation,index){index=animation.name||"Animation-".concat(index);var samplers=animation.samplers.map(function(_ref4){var _ref4$interpolation=_ref4.interpolation;_ref4$interpolation=void 0===_ref4$interpolation?"LINEAR":_ref4$interpolation;var output=_ref4.output;return{input:accessorToJsArray(gltf.accessors[_ref4.input]),interpolation:_ref4$interpolation,
output:accessorToJsArray(gltf.accessors[output])}});animation=animation.channels.map(function(_ref5){var target=_ref5.target;return{sampler:samplers[_ref5.sampler],target:gltf.nodes[target.node],path:target.path}});return new GLTFAnimation({name:index,channels:animation})})}(0,_createClass2["default"])(GLTFAnimator,[{key:"animate",value:function(time){this.setTime(time)}},{key:"setTime",value:function(time){this.animations.forEach(function(animation){return animation.animate(time)})}},{key:"getAnimations",
value:function(){return this.animations}}]);return GLTFAnimator}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$experimental$dist$es5$gltf$gltf_animator.js.map
