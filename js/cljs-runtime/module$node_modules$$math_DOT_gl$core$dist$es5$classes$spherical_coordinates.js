shadow$provide.module$node_modules$$math_DOT_gl$core$dist$es5$classes$spherical_coordinates=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _slicedToArray2=module(require("module$node_modules$$babel$runtime$helpers$slicedToArray")),_classCallCheck2=module(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),
_createClass2=module(require("module$node_modules$$babel$runtime$helpers$createClass")),_common=require("module$node_modules$$math_DOT_gl$core$dist$es5$lib$common"),_vector=module(require("module$node_modules$$math_DOT_gl$core$dist$es5$classes$vector3")),vec3=global(require("module$node_modules$gl_matrix$cjs$vec3"));require=function(){function SphericalCoordinates(){var _ref=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},_ref$phi=_ref.phi;_ref$phi=void 0===_ref$phi?0:_ref$phi;var _ref$theta=
_ref.theta;_ref$theta=void 0===_ref$theta?0:_ref$theta;var _ref$radius=_ref.radius;_ref$radius=void 0===_ref$radius?1:_ref$radius;var _ref$bearing=_ref.bearing;_ref$bearing=void 0===_ref$bearing?void 0:_ref$bearing;var _ref$pitch=_ref.pitch;_ref$pitch=void 0===_ref$pitch?void 0:_ref$pitch;var _ref$altitude=_ref.altitude;_ref$altitude=void 0===_ref$altitude?void 0:_ref$altitude;_ref=_ref.radiusScale;_ref=void 0===_ref?6371E3:_ref;(0,_classCallCheck2["default"])(this,SphericalCoordinates);this.phi=
_ref$phi;this.theta=_ref$theta;this.radius=_ref$radius||_ref$altitude||1;this.radiusScale=_ref||1;void 0!==_ref$bearing&&(this.bearing=_ref$bearing);void 0!==_ref$pitch&&(this.pitch=_ref$pitch);this.check()}(0,_createClass2["default"])(SphericalCoordinates,[{key:"toString",value:function(){return this.formatString(_common.config)}},{key:"formatString",value:function(_ref2){_ref2=_ref2.printTypes;var f=_common.formatValue;return"".concat((void 0===_ref2?0:_ref2)?"Spherical":"","[rho:").concat(f(this.radius),
",theta:").concat(f(this.theta),",phi:").concat(f(this.phi),"]")}},{key:"equals",value:function(other){return(0,_common.equals)(this.radius,other.radius)&&(0,_common.equals)(this.theta,other.theta)&&(0,_common.equals)(this.phi,other.phi)}},{key:"exactEquals",value:function(other){return this.radius===other.radius&&this.theta===other.theta&&this.phi===other.phi}},{key:"set",value:function(radius,phi,theta){this.radius=radius;this.phi=phi;this.theta=theta;return this.check()}},{key:"clone",value:function(){return(new SphericalCoordinates).copy(this)}},
{key:"copy",value:function(other){this.radius=other.radius;this.phi=other.phi;this.theta=other.theta;return this.check()}},{key:"fromLngLatZ",value:function(_ref3){_ref3=(0,_slicedToArray2["default"])(_ref3,3);var lng=_ref3[0],lat=_ref3[1];this.radius=1+_ref3[2]/this.radiusScale;this.phi=(0,_common.radians)(lat);this.theta=(0,_common.radians)(lng)}},{key:"fromVector3",value:function(v){this.radius=vec3.length(v);0<this.radius&&(this.theta=Math.atan2(v[0],v[1]),this.phi=Math.acos((0,_common.clamp)(v[2]/
this.radius,-1,1)));return this.check()}},{key:"toVector3",value:function(){return(new _vector["default"](0,0,this.radius)).rotateX({radians:this.theta}).rotateZ({radians:this.phi})}},{key:"makeSafe",value:function(){this.phi=Math.max(1E-6,Math.min(Math.PI-1E-6,this.phi));return this}},{key:"check",value:function(){if(!(Number.isFinite(this.phi)&&Number.isFinite(this.theta)&&0<this.radius))throw Error("SphericalCoordinates: some fields set to invalid numbers");return this}},{key:"bearing",get:function(){return 180-
(0,_common.degrees)(this.phi)},set:function(v){this.phi=Math.PI-(0,_common.radians)(v)}},{key:"pitch",get:function(){return(0,_common.degrees)(this.theta)},set:function(v){this.theta=(0,_common.radians)(v)}},{key:"longitude",get:function(){return(0,_common.degrees)(this.phi)}},{key:"latitude",get:function(){return(0,_common.degrees)(this.theta)}},{key:"lng",get:function(){return(0,_common.degrees)(this.phi)}},{key:"lat",get:function(){return(0,_common.degrees)(this.theta)}},{key:"z",get:function(){return(this.radius-
1)*this.radiusScale}}]);return SphericalCoordinates}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$math_DOT_gl$core$dist$es5$classes$spherical_coordinates.js.map
