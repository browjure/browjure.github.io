shadow$provide.module$node_modules$$math_DOT_gl$culling$dist$es5$lib$oriented_bounding_box=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),_classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=
global(require("module$node_modules$$babel$runtime$helpers$createClass")),_core=require("module$node_modules$$math_DOT_gl$core$dist$es5$index"),_boundingSphere=global(require("module$node_modules$$math_DOT_gl$culling$dist$es5$lib$bounding_sphere")),_constants=require("module$node_modules$$math_DOT_gl$culling$dist$es5$constants"),scratchVector=new _core.Vector3,scratchOffset=new _core.Vector3,scratchVectorU=new _core.Vector3,scratchVectorV=new _core.Vector3,scratchVectorW=new _core.Vector3,scratchCorner=
new _core.Vector3,scratchToCenter=new _core.Vector3,fromOrientedBoundingBoxScratchU=new _core.Vector3,fromOrientedBoundingBoxScratchV=new _core.Vector3,fromOrientedBoundingBoxScratchW=new _core.Vector3;require=function(){function OrientedBoundingBox(){var center=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[0,0,0],halfAxes=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0,0,0,0,0,0,0];(0,_classCallCheck2["default"])(this,OrientedBoundingBox);this.center=(new _core.Vector3).from(center);
this.halfAxes=new _core.Matrix3(halfAxes)}(0,_createClass2["default"])(OrientedBoundingBox,[{key:"fromCenterHalfSizeQuaternion",value:function(center,halfSize,quaternion){quaternion=new _core.Quaternion(quaternion);quaternion=(new _core.Matrix3).fromQuaternion(quaternion);quaternion[0]*=halfSize[0];quaternion[1]*=halfSize[0];quaternion[2]*=halfSize[0];quaternion[3]*=halfSize[1];quaternion[4]*=halfSize[1];quaternion[5]*=halfSize[1];quaternion[6]*=halfSize[2];quaternion[7]*=halfSize[2];quaternion[8]*=
halfSize[2];this.center=(new _core.Vector3).from(center);this.halfAxes=quaternion;return this}},{key:"clone",value:function(){return new OrientedBoundingBox(this.center,this.halfAxes)}},{key:"equals",value:function(right){return this===right||!!right&&this.center.equals(right.center)&&this.halfAxes.equals(right.halfAxes)}},{key:"getBoundingSphere",value:function(){var result=0<arguments.length&&void 0!==arguments[0]?arguments[0]:new _boundingSphere["default"],halfAxes=this.halfAxes,u=halfAxes.getColumn(0,
fromOrientedBoundingBoxScratchU),v=halfAxes.getColumn(1,fromOrientedBoundingBoxScratchV);halfAxes=halfAxes.getColumn(2,fromOrientedBoundingBoxScratchW);u=scratchVector.copy(u).add(v).add(halfAxes);result.center.copy(this.center);result.radius=u.magnitude();return result}},{key:"intersectPlane",value:function(plane){var normal=plane.normal,halfAxes=this.halfAxes,normalX=normal.x,normalY=normal.y,normalZ=normal.z;halfAxes=Math.abs(normalX*halfAxes[0]+normalY*halfAxes[1]+normalZ*halfAxes[2])+Math.abs(normalX*
halfAxes[3]+normalY*halfAxes[4]+normalZ*halfAxes[5])+Math.abs(normalX*halfAxes[6]+normalY*halfAxes[7]+normalZ*halfAxes[8]);plane=normal.dot(this.center)+plane.distance;return plane<=-halfAxes?_constants.INTERSECTION.OUTSIDE:plane>=halfAxes?_constants.INTERSECTION.INSIDE:_constants.INTERSECTION.INTERSECTING}},{key:"distanceTo",value:function(point){return Math.sqrt(this.distanceSquaredTo(point))}},{key:"distanceSquaredTo",value:function(point){point=scratchOffset.from(point).subtract(this.center);
var halfAxes=this.halfAxes,u=halfAxes.getColumn(0,scratchVectorU),v=halfAxes.getColumn(1,scratchVectorV);halfAxes=halfAxes.getColumn(2,scratchVectorW);var uHalf=u.magnitude(),vHalf=v.magnitude(),wHalf=halfAxes.magnitude();u.normalize();v.normalize();halfAxes.normalize();var distanceSquared=0;u=Math.abs(point.dot(u))-uHalf;0<u&&(distanceSquared+=u*u);u=Math.abs(point.dot(v))-vHalf;0<u&&(distanceSquared+=u*u);u=Math.abs(point.dot(halfAxes))-wHalf;0<u&&(distanceSquared+=u*u);return distanceSquared}},
{key:"computePlaneDistances",value:function(position,direction){var result=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[-0,-0],minDist=Number.POSITIVE_INFINITY,maxDist=Number.NEGATIVE_INFINITY,center=this.center,halfAxes=this.halfAxes,u=halfAxes.getColumn(0,scratchVectorU),v=halfAxes.getColumn(1,scratchVectorV);halfAxes=halfAxes.getColumn(2,scratchVectorW);var corner=scratchCorner.copy(u).add(v).add(halfAxes).add(center),toCenter=scratchToCenter.copy(corner).subtract(position),mag=direction.dot(toCenter);
minDist=Math.min(mag,minDist);maxDist=Math.max(mag,maxDist);corner.copy(center).add(u).add(v).subtract(halfAxes);toCenter.copy(corner).subtract(position);mag=direction.dot(toCenter);minDist=Math.min(mag,minDist);maxDist=Math.max(mag,maxDist);corner.copy(center).add(u).subtract(v).add(halfAxes);toCenter.copy(corner).subtract(position);mag=direction.dot(toCenter);minDist=Math.min(mag,minDist);maxDist=Math.max(mag,maxDist);corner.copy(center).add(u).subtract(v).subtract(halfAxes);toCenter.copy(corner).subtract(position);
mag=direction.dot(toCenter);minDist=Math.min(mag,minDist);maxDist=Math.max(mag,maxDist);center.copy(corner).subtract(u).add(v).add(halfAxes);toCenter.copy(corner).subtract(position);mag=direction.dot(toCenter);minDist=Math.min(mag,minDist);maxDist=Math.max(mag,maxDist);center.copy(corner).subtract(u).add(v).subtract(halfAxes);toCenter.copy(corner).subtract(position);mag=direction.dot(toCenter);minDist=Math.min(mag,minDist);maxDist=Math.max(mag,maxDist);center.copy(corner).subtract(u).subtract(v).add(halfAxes);
toCenter.copy(corner).subtract(position);mag=direction.dot(toCenter);minDist=Math.min(mag,minDist);maxDist=Math.max(mag,maxDist);center.copy(corner).subtract(u).subtract(v).subtract(halfAxes);toCenter.copy(corner).subtract(position);mag=direction.dot(toCenter);minDist=Math.min(mag,minDist);maxDist=Math.max(mag,maxDist);result[0]=minDist;result[1]=maxDist;return result}},{key:"getTransform",value:function(){}},{key:"halfSize",get:function(){var xAxis=this.halfAxes.getColumn(0),yAxis=this.halfAxes.getColumn(1),
zAxis=this.halfAxes.getColumn(2);return[(new _core.Vector3(xAxis)).len(),(new _core.Vector3(yAxis)).len(),(new _core.Vector3(zAxis)).len()]}},{key:"quaternion",get:function(){var xAxis=this.halfAxes.getColumn(0),yAxis=this.halfAxes.getColumn(1),zAxis=this.halfAxes.getColumn(2);xAxis=(new _core.Vector3(xAxis)).normalize();yAxis=(new _core.Vector3(yAxis)).normalize();zAxis=(new _core.Vector3(zAxis)).normalize();return(new _core.Quaternion).fromMatrix3(new _core.Matrix3([].concat((0,_toConsumableArray2["default"])(xAxis),
(0,_toConsumableArray2["default"])(yAxis),(0,_toConsumableArray2["default"])(zAxis))))}}]);return OrientedBoundingBox}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$math_DOT_gl$culling$dist$es5$lib$oriented_bounding_box.js.map
