shadow$provide.module$node_modules$$math_DOT_gl$culling$dist$es5$lib$bounding_sphere=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=module(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=module(require("module$node_modules$$babel$runtime$helpers$createClass")),
_core=require("module$node_modules$$math_DOT_gl$core$dist$es5$index"),mat4=global(require("module$node_modules$gl_matrix$cjs$mat4")),_constants=require("module$node_modules$$math_DOT_gl$culling$dist$es5$constants"),scratchVector=new _core.Vector3,scratchVector2=new _core.Vector3;require=function(){function BoundingSphere(){var center=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[0,0,0],radius=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;(0,_classCallCheck2["default"])(this,BoundingSphere);
this.radius=-0;this.center=new _core.Vector3;this.fromCenterRadius(center,radius)}(0,_createClass2["default"])(BoundingSphere,[{key:"fromCenterRadius",value:function(center,radius){this.center.from(center);this.radius=radius;return this}},{key:"fromCornerPoints",value:function(corner,oppositeCorner){oppositeCorner=scratchVector.from(oppositeCorner);this.center=(new _core.Vector3).from(corner).add(oppositeCorner).scale(.5);this.radius=this.center.distance(oppositeCorner);return this}},{key:"equals",
value:function(right){return this===right||!!right&&this.center.equals(right.center)&&this.radius===right.radius}},{key:"clone",value:function(){return new BoundingSphere(this.center,this.radius)}},{key:"union",value:function(boundingSphere){var leftCenter=this.center,leftRadius=this.radius,rightRadius=boundingSphere.radius,toRightCenter=scratchVector.copy(boundingSphere.center).subtract(leftCenter),centerSeparation=toRightCenter.magnitude();if(leftRadius>=centerSeparation+rightRadius)return this.clone();
if(rightRadius>=centerSeparation+leftRadius)return boundingSphere.clone();boundingSphere=.5*(leftRadius+centerSeparation+rightRadius);scratchVector2.copy(toRightCenter).scale((-leftRadius+boundingSphere)/centerSeparation).add(leftCenter);this.center.copy(scratchVector2);this.radius=boundingSphere;return this}},{key:"expand",value:function(point){point=scratchVector.from(point);point=point.subtract(this.center).magnitude();point>this.radius&&(this.radius=point);return this}},{key:"intersectPlane",
value:function(plane){var radius=this.radius;plane=plane.normal.dot(this.center)+plane.distance;return plane<-radius?_constants.INTERSECTION.OUTSIDE:plane<radius?_constants.INTERSECTION.INTERSECTING:_constants.INTERSECTION.INSIDE}},{key:"transform",value:function(_transform){this.center.transform(_transform);_transform=mat4.getScaling(scratchVector,_transform);this.radius*=Math.max(_transform[0],Math.max(_transform[1],_transform[2]));return this}},{key:"distanceSquaredTo",value:function(point){point=
scratchVector.from(point);return point.subtract(this.center).lengthSquared()-this.radius*this.radius}},{key:"distanceTo",value:function(point){return Math.sqrt(this.distanceSquaredTo(point))}}]);return BoundingSphere}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$math_DOT_gl$culling$dist$es5$lib$bounding_sphere.js.map
