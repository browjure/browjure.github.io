{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_layer_vertex_glsl.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAe,4GAAf,CAAiI,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzKC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQ,SAAR,CAAA,CAAqB,IAAK,EAE1BA,QAAA,CAAQ,SAAR,CAAA,CADeI,m6DAP0J;",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/screen-grid-layer/screen-grid-layer-vertex.glsl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_layer_vertex_glsl\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _default = \"#define SHADER_NAME screen-grid-layer-vertex-shader\\n#define RANGE_COUNT 6\\n\\nattribute vec3 positions;\\nattribute vec3 instancePositions;\\nattribute vec4 instanceCounts;\\nattribute vec3 instancePickingColors;\\n\\nuniform float opacity;\\nuniform vec3 cellScale;\\nuniform vec4 minColor;\\nuniform vec4 maxColor;\\nuniform vec4 colorRange[RANGE_COUNT];\\nuniform vec2 colorDomain;\\nuniform bool shouldUseMinMax;\\nuniform sampler2D maxTexture;\\n\\nvarying vec4 vColor;\\nvarying float vSampleCount;\\n\\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\\n  vec4 outColor = vec4(0., 0., 0., 0.);\\n  if (value >= domain.x && value <= domain.y) {\\n    float domainRange = domain.y - domain.x;\\n    if (domainRange <= 0.) {\\n      outColor = colorRange[0];\\n    } else {\\n      float rangeCount = float(RANGE_COUNT);\\n      float rangeStep = domainRange / rangeCount;\\n      float idx = floor((value - domain.x) / rangeStep);\\n      idx = clamp(idx, 0., rangeCount - 1.);\\n      int intIdx = int(idx);\\n      outColor = colorRange[intIdx];\\n    }\\n  }\\n  outColor = outColor / 255.;\\n  return outColor;\\n}\\n\\nvoid main(void) {\\n  vSampleCount = instanceCounts.a;\\n\\n  float weight = instanceCounts.r;\\n  float maxWeight = texture2D(maxTexture, vec2(0.5)).r;\\n\\n  float step = weight / maxWeight;\\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\\n\\n  vec2 domain = colorDomain;\\n  float domainMaxValid = float(colorDomain.y != 0.);\\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\\n\\n  float rangeMinMax = float(shouldUseMinMax);\\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\\n  vColor = vec4(color.rgb, color.a * opacity);\\n  picking_setPickingColor(instancePickingColors);\\n\\n  gl_Position = vec4(instancePositions + positions * cellScale, 1.);\\n}\\n\";\nexports[\"default\"] = _default;\n//# sourceMappingURL=screen-grid-layer-vertex.glsl.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","_default"]
}
