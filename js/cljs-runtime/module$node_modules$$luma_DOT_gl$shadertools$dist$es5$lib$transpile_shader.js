shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$transpile_shader=function(global,require,module,exports){function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e;
},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;}}}}function _unsupportedIterableToArray(o,
minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function convertShader(source,
replacements){replacements=_createForOfIteratorHelper(replacements);var _step;try{for(replacements.s();!(_step=replacements.n()).done;){var _step$value=(0,_slicedToArray2["default"])(_step.value,2);source=source.replace(_step$value[0],_step$value[1])}}catch(err){replacements.e(err)}finally{replacements.f()}return source}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=function(source,targetGLSLVersion,
isVertex){switch(targetGLSLVersion){case 300:return convertShader(source,isVertex?ES300_VERTEX_REPLACEMENTS:ES300_FRAGMENT_REPLACEMENTS);case 100:if(isVertex)source=convertShader(source,ES100_VERTEX_REPLACEMENTS);else if(source=convertShader(source,ES100_FRAGMENT_REPLACEMENTS),targetGLSLVersion=source.match(FS_OUTPUT_REGEX))targetGLSLVersion=targetGLSLVersion[1],source=source.replace(FS_OUTPUT_REGEX,"").replace(new RegExp("\\b".concat(targetGLSLVersion,"\\b"),"g"),"gl_FragColor");return source;default:throw Error("unknown GLSL version ".concat(targetGLSLVersion));
}};var _slicedToArray2=global(require("module$node_modules$$babel$runtime$helpers$slicedToArray"));require=[[/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/,"#version 300 es\n"],[/\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g,"textureLod("],[/\btexture(2D|2DProj|Cube)(EXT)?\(/g,"texture("]];var ES300_VERTEX_REPLACEMENTS=[].concat(require,[[/^[ \t]*attribute[ \t]+(.+;)/gm,"in $1"],[/^[ \t]*varying[ \t]+(.+;)/gm,"out $1"]]),ES300_FRAGMENT_REPLACEMENTS=[].concat(require,[[/^[ \t]*varying[ \t]+(.+;)/gm,"in $1"]]);
require=[[/^#version[ \t]+300[ \t]+es/,"#version 100"],[/\btexture(2D|2DProj|Cube)Lod\(/g,"texture$1LodEXT("],[/\btexture\(/g,"texture2D("],[/\btextureLod\(/g,"texture2DLodEXT("]];var ES100_VERTEX_REPLACEMENTS=[].concat(require,[[/^[ \t]*in[ \t]+(.+;)/gm,"attribute $1"],[/^[ \t]*out[ \t]+(.+;)/gm,"varying $1"]]),ES100_FRAGMENT_REPLACEMENTS=[].concat(require,[[/^[ \t]*in[ \t]+/gm,"varying "]]),FS_OUTPUT_REGEX=/^[ \t]*out[ \t]+vec4[ \t]+(\w+)[ \t]*;\s+/m}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$transpile_shader.js.map
