{"version":3,"sources":["org/browjure/material_ui/base.cljs"],"mappings":"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","names":["org.browjure.material-ui.base/handler","lib-event","js/console.log","org.browjure.material-ui.base/make-component","material-component-fn","js/module$node_modules$react$index.createElement","sci.core.eval_string","cljs.core.pr_str","clojure.walk/postwalk","form","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vector?","cljs.core._EQ_","cljs.core/first","cljs.core/second","js/document","org.browjure.material-ui.core/key->class","org.browjure.state/set-path-value","org.browjure.state/use-combined-sub","org.browjure.state/use-path-sub","helix.core/$","G__70926","props__60332__auto__","maybe-ref__60333__auto__","vec__70927","helix.core/extract-cljs-props","cljs.core.nth","goog/DEBUG","G__70938","goog.object/set","org.browjure.material-ui.base/material-root","props","map__70930","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","use-path-sub","org.browjure.state/window-resolve","dep-values","cljs.core.map","p__70931","vec__70932","dep-name","dep-path","cljs.core.into","class-key","theme","js/module$node_modules$$material_ui$core$styles$createMuiTheme.default","cljs.core/clj->js","js/module$node_modules$$material_ui$core$esm$styles$index.ThemeProvider","helix.core/get-react","obj70937","helix.impl.props/merge-obj","helix.impl.props._props","G__70941","vec__70942","G__70957","org.browjure.material-ui.base/material-ui-component","map__70945","p__70946","vec__70947","compiled-props","p__70950","vec__70951","k","v","cognitect.transit/tagged-value?","org.browjure.state/compile"],"sourcesContent":["(ns org.browjure.material-ui.base\n  (:require\n   [org.browjure.state :refer [compile set-path-value\n                               use-path-sub\n                               use-combined-sub\n                               window-resolve]]\n   [sci.core :as sci]\n   [org.browjure.material-ui.core :refer [key->class]]\n   [cognitect.transit :as transit]\n   [helix.core :refer [$ defnc <>]]\n   [react :as react]\n   [react-dom :refer [render]]\n   [\"@material-ui/core/styles\" :refer [ThemeProvider]]\n   [\"@material-ui/core/styles/createMuiTheme\" :default create-mui-theme]\n   ))\n\n(defn handler [lib-event]\n  (js/console.log \"material base app handler event: \" lib-event))\n\n\n(defn make-component [material-component-fn]\n  #(react/createElement\n    (sci/eval-string\n     (pr-str (clojure.walk/postwalk (fn [form]\n                                      (if (and (vector? form) (= (first form) :style)) [(first form) `(~'clj->js ~(second form))] form))\n                                    material-component-fn))\n     {:bindings {'js/console.log js/console.log\n                 'js/document    js/document\n                 'key->class     key->class\n                 'set-path-value set-path-value\n                 'use-combined-sub use-combined-sub\n                 'use-path-sub     use-path-sub\n                 '$ $}\n      :classes {:allow :all}})))\n\n(defnc material-root [props]\n  (let [use-path-sub (window-resolve 'org.browjure.state/use-path-sub)\n        dep-values (->> (:dataset/dependencies props)\n                        (map (fn [[dep-name dep-path]]\n                               [dep-name (use-path-sub dep-path)]))\n                        (into {}))\n        {:material-ui/keys []\n         :keys [class-key]} props\n        theme (create-mui-theme\n               (clj->js {:typography {:useNextVariants true}}))]\n    ($ ThemeProvider\n       {:theme theme\n        :key   \"deck\"\n        :children (:children props)}\n       )))\n\n(defnc material-ui-component [props]\n  (let [use-path-sub (window-resolve 'org.browjure.state/use-path-sub)\n        dep-values (->> (:dataset/dependencies props)\n                        (map (fn [[dep-name dep-path]]\n                               [dep-name (use-path-sub dep-path)]))\n                        (into {}))\n        compiled-props (->> props\n                            (map (fn [[k v]] [k (if (transit/tagged-value? v)\n                                                  (compile (aget v \"rep\"))\n                                                  (clj->js v))]))\n                            (into {}))\n        {:material-ui/keys []\n         :keys [class-key]} props]\n    ($ (get key->class class-key) {& compiled-props})))\n"]}