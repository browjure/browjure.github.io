{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$webgl$dist$es5$webgl_utils$texture_utils.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,yEAAf,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAAA,CAAyBH,OAAA,CAAQ,kEAAR,CAE7BI,OAAA,CAAOC,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAA,CAAQK,gBAAR,CAeAA,QAAyB,CAACC,UAAD,CAAaC,SAAb,CAAwB,CAC/C,CAAC,CAAA,CAAGC,MAAH,CAAUC,MAAX,EAAmBH,UAAnB,WAAyCI,WAAA,CAAW,SAAX,CAAzC,EAAkEJ,UAAlE,WAAwFK,aAAA,CAAa,SAAb,CAAxF,EAAmHL,UAAnH,WAAyIM,WAAA,CAAW,SAAX,CAAzI,CACA,KAAIC,YAAcP,UAAdO,CAAyBC,WAA7B;AACIC,GAAKT,UAALS,CAAgBA,EAQhBC,WAAAA,CAAiBd,MAAA,CAAOe,MAAP,CAAc,CACjCC,MARUZ,UAQVY,CARqBA,KAOY,CAEjCC,OARWb,UAQXa,CARsBA,MAMW,CAGjCC,OARWd,UAQXc,CARsBA,MAKW,CAIjCC,KARSf,UAQTe,CARoBA,IAIa,CAKjCC,WARehB,UAQfgB,CAR0BA,UAGO,CAMjCC,OARWjB,UAQXiB,CARsBA,MAEW,CAOjCC,QARYlB,UAQZkB,CARuBA,OACU,CAAd,CAQlBjB,SARkB,CASrB,OAAO,KAAIM,WAAJ,CAAgBE,EAAhB,CAAoBC,UAApB,CApBwC,CAdjDhB,QAAA,CAAQyB,aAAR,CAqCAA,QAAsB,CAACC,OAAD,CAAUC,IAAV,CAAgB,CAAA,IAEhCT,MAAQQ,OAARR,CAAgBA,KAFgB,CAGhCC,OAASO,OAATP,CAAiBA,MAQrB,OANkBS,KAAIC,YAAA,CAAa,SAAb,CAAJD,CAJTF,OAISE,CAJDb,EAICa,CAAgC1B,MAAA,CAAOe,MAAP,CAAc,EAAd,CAAkBU,IAAlB,CAAwB,CACxEG,GAAIC,kBAAA,CAAmBA,MAAnB,CAFGL,OAEH,CAFWI,EAEX,CADoE,CAEjEZ,KAFiE,CAGhEC,MAHgE,CAIxEa,YAAa,CAAC,CAAA;AAAGC,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,EAAjC,CAAqC,KAArC,CAA4CP,OAA5C,CAJ2D,CAAxB,CAAhCE,CALkB,CAnCtC,KAAIK,iBAAmBhC,MAAA,CAAuBH,OAAA,CAAQ,2DAAR,CAAvB,CAAvB,CAEIY,WAAaT,MAAA,CAAuBH,OAAA,CAAQ,oEAAR,CAAvB,CAFjB,CAIIa,aAAeV,MAAA,CAAuBH,OAAA,CAAQ,sEAAR,CAAvB,CAJnB,CAMIc,WAAaX,MAAA,CAAuBH,OAAA,CAAQ,oEAAR,CAAvB,CANjB,CAQI+B,aAAe5B,MAAA,CAAuBH,OAAA,CAAQ,qEAAR,CAAvB,CARnB;AAUIU,OAASV,OAAA,CAAQ,6DAAR,CArByH;",
"sources":["node_modules/@luma_DOT_gl/webgl/dist/es5/webgl-utils/texture-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$webgl$dist$es5$webgl_utils$texture_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneTextureFrom = cloneTextureFrom;\nexports.toFramebuffer = toFramebuffer;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _texture2d = _interopRequireDefault(require(\"../classes/texture-2d\"));\n\nvar _textureCube = _interopRequireDefault(require(\"../classes/texture-cube\"));\n\nvar _texture3d = _interopRequireDefault(require(\"../classes/texture-3d\"));\n\nvar _framebuffer = _interopRequireDefault(require(\"../classes/framebuffer\"));\n\nvar _utils = require(\"../utils\");\n\nfunction cloneTextureFrom(refTexture, overrides) {\n  (0, _utils.assert)(refTexture instanceof _texture2d[\"default\"] || refTexture instanceof _textureCube[\"default\"] || refTexture instanceof _texture3d[\"default\"]);\n  var TextureType = refTexture.constructor;\n  var gl = refTexture.gl,\n      width = refTexture.width,\n      height = refTexture.height,\n      format = refTexture.format,\n      type = refTexture.type,\n      dataFormat = refTexture.dataFormat,\n      border = refTexture.border,\n      mipmaps = refTexture.mipmaps;\n  var textureOptions = Object.assign({\n    width: width,\n    height: height,\n    format: format,\n    type: type,\n    dataFormat: dataFormat,\n    border: border,\n    mipmaps: mipmaps\n  }, overrides);\n  return new TextureType(gl, textureOptions);\n}\n\nfunction toFramebuffer(texture, opts) {\n  var gl = texture.gl,\n      width = texture.width,\n      height = texture.height,\n      id = texture.id;\n  var framebuffer = new _framebuffer[\"default\"](gl, Object.assign({}, opts, {\n    id: \"framebuffer-for-\".concat(id),\n    width: width,\n    height: height,\n    attachments: (0, _defineProperty2[\"default\"])({}, 36064, texture)\n  }));\n  return framebuffer;\n}\n//# sourceMappingURL=texture-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","cloneTextureFrom","refTexture","overrides","_utils","assert","_texture2d","_textureCube","_texture3d","TextureType","constructor","gl","textureOptions","assign","width","height","format","type","dataFormat","border","mipmaps","toFramebuffer","texture","opts","framebuffer","_framebuffer","id","concat","attachments","_defineProperty2"]
}
