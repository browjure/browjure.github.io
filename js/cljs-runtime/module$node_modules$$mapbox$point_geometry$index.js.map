{
"version":3,
"file":"module$node_modules$$mapbox$point_geometry$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@mapbox/point-geometry/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mapbox$point_geometry$index\"] = function(global,require,module,exports) {\n'use strict';\n\nmodule.exports = Point;\n\n/**\n * A standalone point geometry with useful accessor, comparison, and\n * modification methods.\n *\n * @class Point\n * @param {Number} x the x-coordinate. this could be longitude or screen\n * pixels, or any other sort of unit.\n * @param {Number} y the y-coordinate. this could be latitude or screen\n * pixels, or any other sort of unit.\n * @example\n * var point = new Point(-77, 38);\n */\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype = {\n\n    /**\n     * Clone this point, returning a new point that can be modified\n     * without affecting the old one.\n     * @return {Point} the clone\n     */\n    clone: function() { return new Point(this.x, this.y); },\n\n    /**\n     * Add this point's x & y coordinates to another point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    add:     function(p) { return this.clone()._add(p); },\n\n    /**\n     * Subtract this point's x & y coordinates to from point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    sub:     function(p) { return this.clone()._sub(p); },\n\n    /**\n     * Multiply this point's x & y coordinates by point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    multByPoint:    function(p) { return this.clone()._multByPoint(p); },\n\n    /**\n     * Divide this point's x & y coordinates by point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    divByPoint:     function(p) { return this.clone()._divByPoint(p); },\n\n    /**\n     * Multiply this point's x & y coordinates by a factor,\n     * yielding a new point.\n     * @param {Point} k factor\n     * @return {Point} output point\n     */\n    mult:    function(k) { return this.clone()._mult(k); },\n\n    /**\n     * Divide this point's x & y coordinates by a factor,\n     * yielding a new point.\n     * @param {Point} k factor\n     * @return {Point} output point\n     */\n    div:     function(k) { return this.clone()._div(k); },\n\n    /**\n     * Rotate this point around the 0, 0 origin by an angle a,\n     * given in radians\n     * @param {Number} a angle to rotate around, in radians\n     * @return {Point} output point\n     */\n    rotate:  function(a) { return this.clone()._rotate(a); },\n\n    /**\n     * Rotate this point around p point by an angle a,\n     * given in radians\n     * @param {Number} a angle to rotate around, in radians\n     * @param {Point} p Point to rotate around\n     * @return {Point} output point\n     */\n    rotateAround:  function(a,p) { return this.clone()._rotateAround(a,p); },\n\n    /**\n     * Multiply this point by a 4x1 transformation matrix\n     * @param {Array<Number>} m transformation matrix\n     * @return {Point} output point\n     */\n    matMult: function(m) { return this.clone()._matMult(m); },\n\n    /**\n     * Calculate this point but as a unit vector from 0, 0, meaning\n     * that the distance from the resulting point to the 0, 0\n     * coordinate will be equal to 1 and the angle from the resulting\n     * point to the 0, 0 coordinate will be the same as before.\n     * @return {Point} unit vector point\n     */\n    unit:    function() { return this.clone()._unit(); },\n\n    /**\n     * Compute a perpendicular point, where the new y coordinate\n     * is the old x coordinate and the new x coordinate is the old y\n     * coordinate multiplied by -1\n     * @return {Point} perpendicular point\n     */\n    perp:    function() { return this.clone()._perp(); },\n\n    /**\n     * Return a version of this point with the x & y coordinates\n     * rounded to integers.\n     * @return {Point} rounded point\n     */\n    round:   function() { return this.clone()._round(); },\n\n    /**\n     * Return the magitude of this point: this is the Euclidean\n     * distance from the 0, 0 coordinate to this point's x and y\n     * coordinates.\n     * @return {Number} magnitude\n     */\n    mag: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    /**\n     * Judge whether this point is equal to another point, returning\n     * true or false.\n     * @param {Point} other the other point\n     * @return {boolean} whether the points are equal\n     */\n    equals: function(other) {\n        return this.x === other.x &&\n               this.y === other.y;\n    },\n\n    /**\n     * Calculate the distance from this point to another point\n     * @param {Point} p the other point\n     * @return {Number} distance\n     */\n    dist: function(p) {\n        return Math.sqrt(this.distSqr(p));\n    },\n\n    /**\n     * Calculate the distance from this point to another point,\n     * without the square root step. Useful if you're comparing\n     * relative distances.\n     * @param {Point} p the other point\n     * @return {Number} distance\n     */\n    distSqr: function(p) {\n        var dx = p.x - this.x,\n            dy = p.y - this.y;\n        return dx * dx + dy * dy;\n    },\n\n    /**\n     * Get the angle from the 0, 0 coordinate to this point, in radians\n     * coordinates.\n     * @return {Number} angle\n     */\n    angle: function() {\n        return Math.atan2(this.y, this.x);\n    },\n\n    /**\n     * Get the angle from this point to another point, in radians\n     * @param {Point} b the other point\n     * @return {Number} angle\n     */\n    angleTo: function(b) {\n        return Math.atan2(this.y - b.y, this.x - b.x);\n    },\n\n    /**\n     * Get the angle between this point and another point, in radians\n     * @param {Point} b the other point\n     * @return {Number} angle\n     */\n    angleWith: function(b) {\n        return this.angleWithSep(b.x, b.y);\n    },\n\n    /*\n     * Find the angle of the two vectors, solving the formula for\n     * the cross product a x b = |a||b|sin(\u03b8) for \u03b8.\n     * @param {Number} x the x-coordinate\n     * @param {Number} y the y-coordinate\n     * @return {Number} the angle in radians\n     */\n    angleWithSep: function(x, y) {\n        return Math.atan2(\n            this.x * y - this.y * x,\n            this.x * x + this.y * y);\n    },\n\n    _matMult: function(m) {\n        var x = m[0] * this.x + m[1] * this.y,\n            y = m[2] * this.x + m[3] * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _add: function(p) {\n        this.x += p.x;\n        this.y += p.y;\n        return this;\n    },\n\n    _sub: function(p) {\n        this.x -= p.x;\n        this.y -= p.y;\n        return this;\n    },\n\n    _mult: function(k) {\n        this.x *= k;\n        this.y *= k;\n        return this;\n    },\n\n    _div: function(k) {\n        this.x /= k;\n        this.y /= k;\n        return this;\n    },\n\n    _multByPoint: function(p) {\n        this.x *= p.x;\n        this.y *= p.y;\n        return this;\n    },\n\n    _divByPoint: function(p) {\n        this.x /= p.x;\n        this.y /= p.y;\n        return this;\n    },\n\n    _unit: function() {\n        this._div(this.mag());\n        return this;\n    },\n\n    _perp: function() {\n        var y = this.y;\n        this.y = this.x;\n        this.x = -y;\n        return this;\n    },\n\n    _rotate: function(angle) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = cos * this.x - sin * this.y,\n            y = sin * this.x + cos * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _rotateAround: function(angle, p) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y),\n            y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _round: function() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n};\n\n/**\n * Construct a point from an array if necessary, otherwise if the input\n * is already a Point, or an unknown type, return it unchanged\n * @param {Array<Number>|Point|*} a any kind of input value\n * @return {Point} constructed point, or passed-through value.\n * @example\n * // this\n * var point = Point.convert([0, 1]);\n * // is equivalent to\n * var point = new Point(0, 1);\n */\nPoint.convert = function (a) {\n    if (a instanceof Point) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n    }\n    return a;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Point","x","y","prototype","clone","add","p","_add","sub","_sub","multByPoint","_multByPoint","divByPoint","_divByPoint","mult","k","_mult","div","_div","rotate","a","_rotate","rotateAround","_rotateAround","matMult","m","_matMult","unit","_unit","perp","_perp","round","_round","mag","Math","sqrt","equals","other","dist","distSqr","dx","dy","angle","atan2","angleTo","b","angleWith","angleWithSep","cos","sin","convert","Point.convert","Array","isArray"]
}
