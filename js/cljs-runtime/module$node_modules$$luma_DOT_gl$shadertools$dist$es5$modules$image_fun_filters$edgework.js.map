{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_fun_filters$edgework.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,wFAAf,CAA6G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrJC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQI,QAAR,CAAmB,IAAK,EAEpBC,OAAAA,CAAUP,OAAA,CAAQ,4EAAR,CA+BdE,QAAA,CAAQI,QAAR,CAjBeA,CACbE,KAAM,UADOF,CAEbG,SAbaA,CACbC,OAAQ,CACNL,MAAO,CADD,CAENM,IAAK,CAFC,CAGNC,QAAS,EAHH,CADKH,CAMbI,MAAO,CACLR,MAAO,CAAC,CAAD,CAAI,CAAJ,CADF,CAEL,UAAW,CAAA,CAFN,CANMI,CAWAH,CAGbQ,GAfOA,qrDAYMR;AAIbS,aAAc,CAACR,MAAD,CAASS,MAAT,CAJDV,CAKbW,OAAQ,CAAC,CACPC,QAAS,uBADF,CAEPT,SAAU,CACRI,MAAO,CAAC,CAAD,CAAI,CAAJ,CADC,CAFH,CAAD,CAKL,CACDK,QAAS,uBADR,CAEDT,SAAU,CACRI,MAAO,CAAC,CAAD,CAAI,CAAJ,CADC,CAFT,CALK,CALKP,CAtBsI;",
"sources":["node_modules/@luma_DOT_gl/shadertools/dist/es5/modules/image-fun-filters/edgework.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_fun_filters$edgework\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.edgeWork = void 0;\n\nvar _random = require(\"../utils/random\");\n\nvar fs = \"uniform float radius;\\nuniform vec2 delta;\\n\\nvec4 edgeWork_sampleColor1(sampler2D source, vec2 texSize, vec2 texCoord) {\\n  vec2 relativeDelta = radius * delta / texSize;\\n\\n  vec2 color = vec2(0.0);\\n  vec2 total = vec2(0.0);\\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\n\\n  for (float t = -30.0; t <= 30.0; t++) {\\n    float percent = (t + offset - 0.5) / 30.0;\\n    float weight = 1.0 - abs(percent);\\n    vec3 sampleColor = texture2D(source, texCoord + relativeDelta * percent).rgb;\\n    float average = (sampleColor.r + sampleColor.g + sampleColor.b) / 3.0;\\n    color.x += average * weight;\\n    total.x += weight;\\n    if (abs(t) < 15.0) {\\n      weight = weight * 2.0 - 1.0;\\n      color.y += average * weight;\\n      total.y += weight;\\n    }\\n  }\\n  return vec4(color / total, 0.0, 1.0);\\n}\\n\\nvec4 edgeWork_sampleColor2(sampler2D source, vec2 texSize, vec2 texCoord) {\\n  vec2 relativeDelta = radius * delta / texSize;\\n\\n  vec2 color = vec2(0.0);\\n  vec2 total = vec2(0.0);\\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\n\\n  for (float t = -30.0; t <= 30.0; t++) {\\n    float percent = (t + offset - 0.5) / 30.0;\\n    float weight = 1.0 - abs(percent);\\n    vec2 sampleColor = texture2D(source, texCoord + relativeDelta * percent).xy;\\n    color.x += sampleColor.x * weight;\\n    total.x += weight;\\n    if (abs(t) < 15.0) {\\n      weight = weight * 2.0 - 1.0;\\n      color.y += sampleColor.y * weight;\\n      total.y += weight;\\n    }\\n  }\\n  float c = clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);\\n  return vec4(c, c, c, 1.0);\\n}\\n\";\nvar uniforms = {\n  radius: {\n    value: 2,\n    min: 1,\n    softMax: 50\n  },\n  delta: {\n    value: [1, 0],\n    \"private\": true\n  }\n};\nvar edgeWork = {\n  name: 'edgeWork',\n  uniforms: uniforms,\n  fs: fs,\n  dependencies: [_random.random],\n  passes: [{\n    sampler: 'edgeWork_sampleColor1',\n    uniforms: {\n      delta: [1, 0]\n    }\n  }, {\n    sampler: 'edgeWork_sampleColor2',\n    uniforms: {\n      delta: [0, 1]\n    }\n  }]\n};\nexports.edgeWork = edgeWork;\n//# sourceMappingURL=edgework.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","edgeWork","_random","name","uniforms","radius","min","softMax","delta","fs","dependencies","random","passes","sampler"]
}
