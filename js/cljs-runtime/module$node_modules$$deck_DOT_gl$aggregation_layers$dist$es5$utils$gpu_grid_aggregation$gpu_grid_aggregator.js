shadow$provide.module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator=function(global,require,module,exports){function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,
value:o[i++]}},e:function(_e){throw _e;},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;
}}}}function _unsupportedIterableToArray(o,minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];
return arr2}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2["default"])(target,
key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function deleteResources(resources){resources=Array.isArray(resources)?resources:[resources];resources.forEach(function(obj){for(var name in obj)obj[name]["delete"]()})}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _defineProperty2=global(require("module$node_modules$$babel$runtime$helpers$defineProperty")),_classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_core=require("module$node_modules$$luma_DOT_gl$core$dist$es5$index"),_shadertools=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$index"),
_core2=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_gpuGridAggregatorConstants=require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator_constants"),_aggregationOperationUtils=require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$aggregation_operation_utils"),_aggregateToGridVs=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$aggregate_to_grid_vs_glsl")),
_aggregateToGridFs=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$aggregate_to_grid_fs_glsl")),_aggregateAllVs=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$aggregate_all_vs_glsl")),_aggregateAllFs=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$aggregate_all_fs_glsl")),_transformMeanVs=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$transform_mean_vs_glsl")),
_resourceUtils=require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$resource_utils"),BUFFER_NAMES=["aggregationBuffer","maxMinBuffer","minBuffer","maxBuffer"],ARRAY_BUFFER_MAP={maxData:"maxBuffer",minData:"minBuffer",maxMinData:"maxMinBuffer"},REQUIRED_FEATURES=[_core.FEATURES.WEBGL2,_core.FEATURES.COLOR_ATTACHMENT_RGBA32F,_core.FEATURES.BLEND_EQUATION_MINMAX,_core.FEATURES.FLOAT_BLEND,_core.FEATURES.TEXTURE_FLOAT];require=function(){function GPUGridAggregator(gl){var opts=
1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};(0,_classCallCheck2["default"])(this,GPUGridAggregator);this.id=opts.id||"gpu-grid-aggregator";this.gl=gl;this.state={weightAttributes:{},textures:{},meanTextures:{},buffers:{},framebuffers:{},maxMinFramebuffers:{},minFramebuffers:{},maxFramebuffers:{},equations:{},resources:{},results:{}};(this._hasGPUSupport=(0,_core.isWebGL2)(gl)&&(0,_core.hasFeatures)(this.gl,_core.FEATURES.BLEND_EQUATION_MINMAX,_core.FEATURES.COLOR_ATTACHMENT_RGBA32F,
_core.FEATURES.TEXTURE_FLOAT))&&this._setupModels()}(0,_createClass2["default"])(GPUGridAggregator,null,[{key:"getAggregationData",value:function(_ref){var aggregationData=_ref.aggregationData,maxData=_ref.maxData,minData=_ref.minData,maxMinData=_ref.maxMinData;_ref=_ref.pixelIndex*_gpuGridAggregatorConstants.PIXEL_SIZE;var results={};aggregationData&&(results.cellCount=aggregationData[_ref+3],results.cellWeight=aggregationData[_ref]);maxMinData?(results.maxCellWieght=maxMinData[0],results.minCellWeight=
maxMinData[3]):(maxData&&(results.maxCellWieght=maxData[0],results.totalCount=maxData[3]),minData&&(results.minCellWeight=minData[0],results.totalCount=maxData[3]));return results}},{key:"getCellData",value:function(_ref2){var countsData=_ref2.countsData;_ref2=_ref2.size;_ref2=void 0===_ref2?1:_ref2;for(var numCells=countsData.length/4,cellWeights=new Float32Array(numCells*_ref2),cellCounts=new Uint32Array(numCells),i=0;i<numCells;i++){for(var sizeIndex=0;sizeIndex<_ref2;sizeIndex++)cellWeights[i*
_ref2+sizeIndex]=countsData[4*i+sizeIndex];cellCounts[i]=countsData[4*i+3]}return{cellCounts,cellWeights}}},{key:"isSupported",value:function(gl){return(0,_core.hasFeatures)(gl,REQUIRED_FEATURES)}}]);(0,_createClass2["default"])(GPUGridAggregator,[{key:"delete",value:function(){var gridAggregationModel=this.gridAggregationModel,allAggregationModel=this.allAggregationModel,meanTransform=this.meanTransform,_this$state=this.state,textures=_this$state.textures,framebuffers=_this$state.framebuffers,maxMinFramebuffers=
_this$state.maxMinFramebuffers,minFramebuffers=_this$state.minFramebuffers,maxFramebuffers=_this$state.maxFramebuffers,meanTextures=_this$state.meanTextures;_this$state=_this$state.resources;gridAggregationModel&&gridAggregationModel["delete"]();allAggregationModel&&allAggregationModel["delete"]();meanTransform&&meanTransform["delete"]();deleteResources([framebuffers,textures,maxMinFramebuffers,minFramebuffers,maxFramebuffers,meanTextures,_this$state])}},{key:"run",value:function(){var opts=0<arguments.length&&
void 0!==arguments[0]?arguments[0]:{};this.setState({results:{}});opts=this._normalizeAggregationParams(opts);this._hasGPUSupport||_core2.log.log(1,"GPUGridAggregator: not supported")();return this._runAggregation(opts)}},{key:"getData",value:function(weightId){var data={},results=this.state.results;results[weightId].aggregationData||(results[weightId].aggregationData=results[weightId].aggregationBuffer.getData());data.aggregationData=results[weightId].aggregationData;for(var arrayName in ARRAY_BUFFER_MAP){var bufferName=
ARRAY_BUFFER_MAP[arrayName];if(results[weightId][arrayName]||results[weightId][bufferName])results[weightId][arrayName]=results[weightId][arrayName]||results[weightId][bufferName].getData(),data[arrayName]=results[weightId][arrayName]}return data}},{key:"updateShaders",value:function(){this.setState({shaderOptions:0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},modelDirty:!0})}},{key:"_normalizeAggregationParams",value:function(opts){opts=Object.assign({},_gpuGridAggregatorConstants.DEFAULT_RUN_PARAMS,
opts);var weights=opts.weights;if(weights){var result={},id;for(id in weights)result[id]=Object.assign({},_gpuGridAggregatorConstants.DEFAULT_WEIGHT_PARAMS,weights[id]);opts.weights=result}return opts}},{key:"setState",value:function(updateObject){Object.assign(this.state,updateObject)}},{key:"_getAggregateData",value:function(opts){var results={},_this$state2=this.state,textures=_this$state2.textures,framebuffers=_this$state2.framebuffers,maxMinFramebuffers=_this$state2.maxMinFramebuffers,minFramebuffers=
_this$state2.minFramebuffers,maxFramebuffers=_this$state2.maxFramebuffers;_this$state2=_this$state2.resources;opts=opts.weights;for(var id in opts){results[id]={};var _weights$id=opts[id],needMin=_weights$id.needMin,needMax=_weights$id.needMax;_weights$id=_weights$id.combineMaxMin;results[id].aggregationTexture=textures[id];results[id].aggregationBuffer=(0,_core.readPixelsToBuffer)(framebuffers[id],{target:opts[id].aggregationBuffer,sourceType:5126});needMin&&needMax&&_weights$id?(results[id].maxMinBuffer=
(0,_core.readPixelsToBuffer)(maxMinFramebuffers[id],{target:opts[id].maxMinBuffer,sourceType:5126}),results[id].maxMinTexture=_this$state2["".concat(id,"-maxMinTexture")]):(needMin&&(results[id].minBuffer=(0,_core.readPixelsToBuffer)(minFramebuffers[id],{target:opts[id].minBuffer,sourceType:5126}),results[id].minTexture=_this$state2["".concat(id,"-minTexture")]),needMax&&(results[id].maxBuffer=(0,_core.readPixelsToBuffer)(maxFramebuffers[id],{target:opts[id].maxBuffer,sourceType:5126}),results[id].maxTexture=
_this$state2["".concat(id,"-maxTexture")]))}this._trackGPUResultBuffers(results,opts);return results}},{key:"_renderAggregateData",value:function(opts){var attributes=opts.attributes,moduleSettings=opts.moduleSettings,weights=opts.weights,_this$state3=this.state,maxMinFramebuffers=_this$state3.maxMinFramebuffers,minFramebuffers=_this$state3.minFramebuffers;_this$state3=_this$state3.maxFramebuffers;var gridSize=[opts.numCol,opts.numRow],parameters={blend:!0,depthTest:!1,blendFunc:[1,1]};opts={cellSize:opts.cellSize,
gridSize,projectPoints:opts.projectPoints,translation:opts.translation,scaling:opts.scaling};for(var id in weights){var _weights$id2=weights[id],needMin=_weights$id2.needMin;_weights$id2=_weights$id2.needMax;var combineMaxMin=needMin&&_weights$id2&&weights[id].combineMaxMin;this._renderToWeightsTexture({id,parameters,moduleSettings,uniforms:opts,gridSize,attributes,weights});combineMaxMin?this._renderToMaxMinTexture({id,parameters:Object.assign({},parameters,{blendEquation:_gpuGridAggregatorConstants.MAX_MIN_BLEND_EQUATION}),
gridSize,minOrMaxFb:maxMinFramebuffers[id],clearParams:{clearColor:[0,0,0,_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT]},combineMaxMin}):(needMin&&this._renderToMaxMinTexture({id,parameters:Object.assign({},parameters,{blendEquation:_gpuGridAggregatorConstants.MIN_BLEND_EQUATION}),gridSize,minOrMaxFb:minFramebuffers[id],clearParams:{clearColor:[_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT,_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT,_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT,0]},combineMaxMin}),
_weights$id2&&this._renderToMaxMinTexture({id,parameters:Object.assign({},parameters,{blendEquation:_gpuGridAggregatorConstants.MAX_BLEND_EQUATION}),gridSize,minOrMaxFb:_this$state3[id],clearParams:{clearColor:[0,0,0,0]},combineMaxMin}))}}},{key:"_renderToMaxMinTexture",value:function(opts){var id=opts.id,parameters=opts.parameters,gridSize=opts.gridSize,minOrMaxFb=opts.minOrMaxFb,combineMaxMin=opts.combineMaxMin;opts=opts.clearParams;opts=void 0===opts?{}:opts;var framebuffers=this.state.framebuffers,
gl=this.gl,allAggregationModel=this.allAggregationModel;(0,_core.withParameters)(gl,_objectSpread(_objectSpread({},opts),{},{framebuffer:minOrMaxFb,viewport:[0,0,gridSize[0],gridSize[1]]}),function(){gl.clear(16384);allAggregationModel.draw({parameters,uniforms:{uSampler:framebuffers[id].texture,gridSize,combineMaxMin}})})}},{key:"_renderToWeightsTexture",value:function(opts){var id=opts.id,parameters=opts.parameters,moduleSettings=opts.moduleSettings,uniforms=opts.uniforms,gridSize=opts.gridSize,
_this$state4=this.state,framebuffers=_this$state4.framebuffers,equations=_this$state4.equations,weightAttributes=_this$state4.weightAttributes,gl=this.gl,gridAggregationModel=this.gridAggregationModel;opts=opts.weights[id].operation;_this$state4=opts===_aggregationOperationUtils.AGGREGATION_OPERATION.MIN?[_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT,_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT,_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT,0]:[0,0,0,0];(0,_core.withParameters)(gl,{framebuffer:framebuffers[id],
viewport:[0,0,gridSize[0],gridSize[1]],clearColor:_this$state4},function(){gl.clear(16384);var attributes={weights:weightAttributes[id]};gridAggregationModel.draw({parameters:Object.assign({},parameters,{blendEquation:equations[id]}),moduleSettings,uniforms,attributes})});opts===_aggregationOperationUtils.AGGREGATION_OPERATION.MEAN&&(opts=this.state,gridSize=opts.textures,opts={_sourceTextures:{aggregationValues:opts.meanTextures[id]},_targetTexture:gridSize[id],elementCount:gridSize[id].width*gridSize[id].height},
this.meanTransform?this.meanTransform.update(opts):this.meanTransform=new _core.Transform(gl,Object.assign({},{vs:_transformMeanVs["default"],_targetTextureVarying:"meanValues"},opts)),this.meanTransform.run({parameters:{blend:!1,depthTest:!1}}),framebuffers[id].attach((0,_defineProperty2["default"])({},36064,gridSize[id])))}},{key:"_runAggregation",value:function(opts){this._updateModels(opts);this._setupFramebuffers(opts);this._renderAggregateData(opts);opts=this._getAggregateData(opts);this.setState({results:opts});
return opts}},{key:"_setupFramebuffers",value:function(opts){var _this$state6=this.state,textures=_this$state6.textures,framebuffers=_this$state6.framebuffers,maxMinFramebuffers=_this$state6.maxMinFramebuffers,minFramebuffers=_this$state6.minFramebuffers,maxFramebuffers=_this$state6.maxFramebuffers,meanTextures=_this$state6.meanTextures;_this$state6=_this$state6.equations;var weights=opts.weights,numCol=opts.numCol;opts=opts.numRow;var framebufferSize={width:numCol,height:opts},id;for(id in weights){var _weights$id3=
weights[id],needMin=_weights$id3.needMin,needMax=_weights$id3.needMax,combineMaxMin=_weights$id3.combineMaxMin;_weights$id3=_weights$id3.operation;textures[id]=weights[id].aggregationTexture||textures[id]||(0,_resourceUtils.getFloatTexture)(this.gl,{id:"".concat(id,"-texture"),width:numCol,height:opts});textures[id].resize(framebufferSize);var texture=textures[id];_weights$id3===_aggregationOperationUtils.AGGREGATION_OPERATION.MEAN&&(meanTextures[id]=meanTextures[id]||(0,_resourceUtils.getFloatTexture)(this.gl,
{id:"".concat(id,"-mean-texture"),width:numCol,height:opts}),meanTextures[id].resize(framebufferSize),texture=meanTextures[id]);framebuffers[id]?framebuffers[id].attach((0,_defineProperty2["default"])({},36064,texture)):framebuffers[id]=(0,_resourceUtils.getFramebuffer)(this.gl,{id:"".concat(id,"-fb"),width:numCol,height:opts,texture});framebuffers[id].resize(framebufferSize);_this$state6[id]=_gpuGridAggregatorConstants.EQUATION_MAP[_weights$id3]||_gpuGridAggregatorConstants.EQUATION_MAP.SUM;if(needMin||
needMax)needMin&&needMax&&combineMaxMin?maxMinFramebuffers[id]||(texture=weights[id].maxMinTexture||this._getMinMaxTexture("".concat(id,"-maxMinTexture")),maxMinFramebuffers[id]=(0,_resourceUtils.getFramebuffer)(this.gl,{id:"".concat(id,"-maxMinFb"),texture})):(needMin&&!minFramebuffers[id]&&(texture=weights[id].minTexture||this._getMinMaxTexture("".concat(id,"-minTexture")),minFramebuffers[id]=(0,_resourceUtils.getFramebuffer)(this.gl,{id:"".concat(id,"-minFb"),texture})),needMax&&!maxFramebuffers[id]&&
(texture=weights[id].maxTexture||this._getMinMaxTexture("".concat(id,"-maxTexture")),maxFramebuffers[id]=(0,_resourceUtils.getFramebuffer)(this.gl,{id:"".concat(id,"-maxFb"),texture})))}}},{key:"_getMinMaxTexture",value:function(name){var resources=this.state.resources;resources[name]||(resources[name]=(0,_resourceUtils.getFloatTexture)(this.gl,{id:"resourceName"}));return resources[name]}},{key:"_setupModels",value:function(){var _ref3=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},_ref3$numCol=
_ref3.numCol;_ref3$numCol=void 0===_ref3$numCol?0:_ref3$numCol;_ref3=_ref3.numRow;_ref3=void 0===_ref3?0:_ref3;var gl=this.gl,shaderOptions=this.state.shaderOptions;if(this.gridAggregationModel)this.gridAggregationModel["delete"]();shaderOptions=(0,_core2._mergeShaders)({vs:_aggregateToGridVs["default"],fs:_aggregateToGridFs["default"],modules:[_shadertools.fp64arithmetic,_core2.project32]},shaderOptions);this.gridAggregationModel=new _core.Model(gl,_objectSpread({id:"Gird-Aggregation-Model",vertexCount:1,
drawMode:0},shaderOptions));this.allAggregationModel||(this.allAggregationModel=new _core.Model(gl,{id:"All-Aggregation-Model",vs:_aggregateAllVs["default"],fs:_aggregateAllFs["default"],modules:[_shadertools.fp64arithmetic],vertexCount:1,drawMode:0,isInstanced:!0,instanceCount:_ref3$numCol*_ref3,attributes:{position:[0,0]}}))}},{key:"_setupWeightAttributes",value:function(opts){var weightAttributes=this.state.weightAttributes,weights=opts.weights,id;for(id in weights)weightAttributes[id]=opts.attributes[id]}},
{key:"_trackGPUResultBuffers",value:function(results,weights){var resources=this.state.resources,id;for(id in results)if(results[id]){var _iterator=_createForOfIteratorHelper(BUFFER_NAMES),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var bufferName=_step.value;if(results[id][bufferName]&&weights[id][bufferName]!==results[id][bufferName]){var name="gpu-result-".concat(id,"-").concat(bufferName);if(resources[name])resources[name]["delete"]();resources[name]=results[id][bufferName]}}}catch(err){_iterator.e(err)}finally{_iterator.f()}}}},
{key:"_updateModels",value:function(opts){var vertexCount=opts.vertexCount,attributes=opts.attributes,numCol=opts.numCol,numRow=opts.numRow;this.state.modelDirty&&(this._setupModels(opts),this.setState({modelDirty:!1}));this._setupWeightAttributes(opts);this.gridAggregationModel.setVertexCount(vertexCount);this.gridAggregationModel.setAttributes(attributes);this.allAggregationModel.setInstanceCount(numCol*numRow)}}]);return GPUGridAggregator}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator.js.map
