shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_blur_filters$triangleblur=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.triangleBlur=void 0;global=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$utils$random");exports.triangleBlur={name:"triangleBlur",uniforms:{radius:{value:20,min:0,softMax:100},delta:{value:[1,0],"private":!0}},fs:"uniform float radius;\nuniform vec2 delta;\n\nvec4 triangleBlur_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec2 adjustedDelta \x3d delta * radius / texSize;\n\n  vec4 color \x3d vec4(0.0);\n  float total \x3d 0.0;\n  float offset \x3d random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t \x3d -30.0; t \x3c\x3d 30.0; t++) {\n    float percent \x3d (t + offset - 0.5) / 30.0;\n    float weight \x3d 1.0 - abs(percent);\n    vec4 sample \x3d texture2D(texture, texCoord + adjustedDelta * percent);\n    sample.rgb *\x3d sample.a;\n\n    color +\x3d sample * weight;\n    total +\x3d weight;\n  }\n\n  color \x3d color / total;\n  color.rgb /\x3d color.a + 0.00001;\n\n  return color;\n}\n",
dependencies:[global.random],passes:[{sampler:!0,uniforms:{delta:[1,0]}},{sampler:!0,uniforms:{delta:[0,1]}}]}}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_blur_filters$triangleblur.js.map
