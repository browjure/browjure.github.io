shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_fun_filters$ink=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.ink=void 0;exports.ink={name:"ink",uniforms:{strength:{value:.25,min:0,softMax:1}},fs:"uniform float strength;\n\nvec4 ink_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec2 dx \x3d vec2(1.0 / texSize.x, 0.0);\n  vec2 dy \x3d vec2(0.0, 1.0 / texSize.y);\n  vec4 color \x3d texture2D(texture, texCoord);\n  float bigTotal \x3d 0.0;\n  float smallTotal \x3d 0.0;\n  vec3 bigAverage \x3d vec3(0.0);\n  vec3 smallAverage \x3d vec3(0.0);\n  for (float x \x3d -2.0; x \x3c\x3d 2.0; x +\x3d 1.0) {\n    for (float y \x3d -2.0; y \x3c\x3d 2.0; y +\x3d 1.0) {\n      vec3 sample \x3d texture2D(texture, texCoord + dx * x + dy * y).rgb;\n      bigAverage +\x3d sample;\n      bigTotal +\x3d 1.0;\n      if (abs(x) + abs(y) \x3c 2.0) {\n        smallAverage +\x3d sample;\n        smallTotal +\x3d 1.0;\n      }\n    }\n  }\n  vec3 edge \x3d max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);\n  float power \x3d strength * strength * strength * strength * strength;\n  return vec4(color.rgb - dot(edge, edge) * power * 100000.0, color.a);\n}\n",
passes:[{sampler:!0}]}}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_fun_filters$ink.js.map
