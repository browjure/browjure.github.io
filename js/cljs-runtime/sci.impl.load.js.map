{"version":3,"sources":["sci/impl/load.cljc"],"mappings":"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","names":["sci.impl.load/handle-refer-all","the-current-ns","the-loaded-ns","include-sym?","rename-sym","only","referred","cljs.core/set","cljs.core.reduce","p__64611","vec__64614","cljs.core.nth","ns","k","v","and__4115__auto__","cljs.core/Symbol","cljs.core/not","cljs.core/contains?","cljs.core.assoc","p__64638","map__64639","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","as","cljs.core.get","refer","rename","exclude","use","sci.impl.load/handle-require-libspec-env","ctx","env","current-ns","lib-name","_parsed-libspec","cljs.core.get_in","cljs.core/assoc-in","sym","or__4126__auto__","cljs.core/identity","excludes","cljs.core/constantly","sci.impl.utils/kw-identical?","cljs.core/sequential?","temp__5751__auto__","vec__64692","_k","cljs.core/find","js/Error","temp__5753__auto__","on-loaded","G__64709","cljs.core/meta","G__64715","sci.impl.load/handle-require-libspec","lib","opts","map__64725","reload","cljs.core/deref","env*","cnn","sci.impl.vars/current-ns-name","namespaces","uberscript","reload*","loading","cljs.core/nat-int?","sci.impl.utils.throw_error_with_location","lib-emphasized","cljs.core.conj","cljs.core.replace","clojure.string.join","cljs.core/reset!","load-fn","map__64753","file","source","G__64751","cljs.core.update","e64770","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.vars/current-ns","sci.impl.vars/current-file","fexpr__64784","sci.impl.utils/eval-string*","e","cljs.core.swap_BANG_","cljs.core/update","cljs.core/dissoc","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.load/load-lib","seq64802","G__64803","cljs.core/first","cljs.core/next","G__64804","G__64805","self__4723__auto__","prefix","options","cljs.core/name","cljs.core.symbol","sci.impl.load/prependss","x","coll","cljs.core/cons","cljs.core.concat","sci.impl.load/libspec?","cljs.core/vector?","cljs.core/second","cljs.core/Keyword","sci.impl.load/load-libs","kw","args","args*","flags","cljs.core.filter","cljs.core/keyword?","cljs.core.interleave","cljs.core.repeat","cljs.core/complement","supported","unsupported","cljs.core/seq","cljs.core.remove","cljs.core/str","cljs.core.interpose","seq__64864","chunk__64865","count__64866","i__64867","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","arg","vec__64932","seq__64933","first__64934","vec__64952","seq__64953","first__64954","seq__64936","chunk__64937","count__64938","i__64939","seq__64956","chunk__64957","count__64958","i__64959","sci.impl.load/eval-require","seq64987","G__64988","cljs.core/vreset!","sci.impl.utils/eval-require-state","sci.impl.load/eval-use","seq65009","G__65010","sci.impl.utils/eval-use-state","sci.impl.load/eval-refer-clojure","exprs","ns-sym","vec__65018","G__65029","cljs.core.update_in","cljs.core.fnil","cljs.core/into","other-ns","other-vars","cljs.core/select-keys","cljs.core/merge","cljs.core/nnext","sci.impl.load/eval-refer*","filters","fs","public-keys","cljs.core/symbol?","cljs.core/keys","to-do","cljs.core._EQ_","_","sci.impl.load/eval-refer","seq65087","G__65088","G__65089","sci.impl.utils/eval-refer-state"],"sourcesContent":["(ns sci.impl.load\n  (:require\n   [sci.impl.utils :as utils :refer [throw-error-with-location\n                                     kw-identical?]]\n   [sci.impl.vars :as vars]\n   [clojure.string :as str]))\n\n(defn handle-refer-all [the-current-ns the-loaded-ns include-sym? rename-sym only]\n  (let [referred (:refers the-current-ns)\n        only (when only (set only))\n        referred (reduce (fn [ns [k v]]\n                           (if (and (symbol? k) (include-sym? k)\n                                    (or (not only)\n                                        (contains? only k)))\n                             (assoc ns (rename-sym k) v)\n                             ns))\n                         referred\n                         the-loaded-ns)]\n    (assoc the-current-ns :refers referred)))\n\n(defn handle-require-libspec-env\n  [ctx env current-ns the-loaded-ns lib-name\n   {:keys [:as :refer :rename :exclude :only :use] :as _parsed-libspec}]\n  (let [the-current-ns (get-in env [:namespaces current-ns]) ;; = ns-data?\n        the-current-ns (if as (assoc-in the-current-ns [:aliases as] lib-name)\n                           the-current-ns)\n        rename-sym (if rename (fn [sym] (or (rename sym) sym))\n                       identity)\n        include-sym? (if exclude\n                       (let [excludes (set exclude)]\n                         (fn [sym]\n                           (not (contains? excludes sym))))\n                       (constantly true))\n        the-current-ns\n        (cond refer\n              (cond (or (kw-identical? :all refer)\n                        use)\n                    (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym nil)\n                    (sequential? refer)\n                    (let [referred (:refers the-current-ns)\n                          referred (reduce (fn [ns sym]\n                                             (if (include-sym? sym)\n                                               (assoc ns (rename-sym sym)\n                                                      (if-let [[_k v] (find the-loaded-ns sym)]\n                                                        v\n                                                        (when-not (:uberscript ctx)\n                                                          (throw (new #?(:clj Exception :cljs js/Error)\n                                                                      (str sym \" does not exist\"))))))\n                                               ns))\n                                           referred\n                                           refer)]\n                      (assoc the-current-ns :refers referred))\n                    :else (throw (new #?(:clj Exception :cljs js/Error)\n                                      (str \":refer value must be a sequential collection of symbols\"))))\n              use (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym only)\n              :else the-current-ns)\n        env (assoc-in env [:namespaces current-ns] the-current-ns)]\n    (when-let [on-loaded (some-> the-loaded-ns :obj meta :sci.impl/required-fn)]\n      (on-loaded {}))\n    env))\n\n(defn handle-require-libspec\n  [ctx lib opts]\n  (let [{:keys [:reload]} opts\n        env* (:env ctx)\n        env @env* ;; NOTE: loading namespaces is not (yet) thread-safe\n        cnn (vars/current-ns-name)\n        namespaces (get env :namespaces)\n        uberscript (:uberscript ctx)\n        reload* (or reload uberscript)]\n    (if-let [the-loaded-ns (when-not reload* (get namespaces lib))]\n      (let [loading (:loading ctx)]\n        (if (and loading\n                 (nat-int? #?(:clj (.indexOf ^clojure.lang.PersistentVector loading lib)\n                              :cljs (.indexOf loading lib))))\n          (throw-error-with-location\n           (let [lib-emphasized (str \"[ \" lib \" ]\")\n                 loading (conj loading lib)\n                 loading (replace {lib lib-emphasized} loading)]\n             (str \"Cyclic load dependency: \" (str/join \"->\" loading)))\n           lib)\n          (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n      (if-let [load-fn (:load-fn env)]\n        (if-let [{:keys [:file :source]} (load-fn {:namespace lib\n                                                   :reload reload})]\n          (do\n            (let [ctx (-> ctx\n                          (assoc :bindings {})\n                          (update :loading (fn [loading]\n                                             (if (nil? loading)\n                                               [lib]\n                                               (conj loading lib)\n                                               #_(if (pos? #?(:clj (.indexOf ^java.lang.PersistentVector loading lib)\n                                                            :cljs (.indexOf loading lib)))\n                                                 (throw-error-with-location \"Circular\" loading)\n                                                 (conj loading lib))))))]\n              (try (vars/with-bindings\n                     {vars/current-ns @vars/current-ns\n                      vars/current-file file}\n                     (@utils/eval-string* ctx source))\n                   (catch #?(:clj Exception :cljs js/Error) e\n                     (swap! env* update :namespaces dissoc lib)\n                     (throw e))))\n            (swap! env* (fn [env]\n                          (let [namespaces (get env :namespaces)\n                                the-loaded-ns (get namespaces lib)]\n                            (handle-require-libspec-env ctx env cnn\n                                                        the-loaded-ns\n                                                        lib opts)))))\n          (or (when reload*\n                (when-let [the-loaded-ns (get namespaces lib)]\n                  (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n              (throw (new #?(:clj Exception :cljs js/Error)\n                          (str \"Could not find namespace: \" lib \".\")))))\n        (throw (new #?(:clj Exception :cljs js/Error)\n\n                    (str \"Could not find namespace \" lib \".\")))))))\n\n(defn load-lib [ctx prefix lib & options]\n  (when (and prefix (pos? (.indexOf (name lib) #?(:clj (int \\.)\n                                                  :cljs \\.))))\n    (throw-error-with-location (str \"Found lib name '\" (name lib) \"' containing period with prefix '\"\n                                    prefix \"'.  lib names inside prefix lists must not contain periods\")\n                               lib))\n  (let [lib (if prefix (symbol (str prefix \\. lib)) lib)\n        opts (apply hash-map options)]\n    (handle-require-libspec ctx lib opts)))\n\n(defn- prependss\n  \"Prepends a symbol or a seq to coll\"\n  [x coll]\n  (if (symbol? x)\n    (cons x coll)\n    (concat x coll)))\n\n(defn- libspec?\n  \"Returns true if x is a libspec\"\n  [x]\n  (or (symbol? x)\n      (and (vector? x)\n           (or\n            (nil? (second x))\n            (keyword? (second x))))))\n\n(defn- load-libs\n  \"Loads libs, evaling libspecs, prefix lists, and flags for\n  forwarding to load-lib\"\n  [ctx kw args]\n  (let [args* (cons kw args)\n        flags (filter keyword? args*)\n        opts (interleave flags (repeat true))\n        args* (filter (complement keyword?) args*)]\n    ;; check for unsupported options\n    (let [supported #{:as :reload :reload-all :require :use :verbose :refer}\n          unsupported (seq (remove supported flags))]\n      (when unsupported\n        (throw-error-with-location (apply str \"Unsupported option(s) supplied: \"\n                                          (interpose \\, unsupported))\n                                   ;; best effort location\n                                   args)))\n    ;; check a load target was specified\n    (when-not (seq args*)\n      (throw-error-with-location \"Nothing specified to load\"\n                                 args))\n    (doseq [arg args*]\n      (if (libspec? arg)\n        (apply load-lib ctx nil (prependss arg opts))\n        (let [[prefix & args*] arg]\n          (when (nil? prefix)\n            (throw-error-with-location \"prefix cannot be nil\"\n                                       args))\n          (doseq [arg args*]\n            (apply load-lib ctx prefix (prependss arg opts))))))))\n\n(defn eval-require\n  [ctx & args]\n  (load-libs ctx :require args))\n\n(vreset! utils/eval-require-state eval-require)\n\n(defn eval-use\n  [ctx & args]\n  (load-libs ctx :use args))\n\n(vreset! utils/eval-use-state eval-use)\n\n(defn eval-refer-clojure [ctx exprs]\n  (let [ns-sym 'clojure.core]\n    (loop [exprs exprs]\n      (when exprs\n        (let [[k v] exprs]\n          (case k\n            :exclude\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (vars/current-ns-name)]\n                       (update-in env [:namespaces cnn :refer ns-sym :exclude]\n                                  (fnil into #{}) v))))\n            :only\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (vars/current-ns-name)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           other-vars (select-keys other-ns v)]\n                       ;; TODO: this is wrong, don't merge these vars into the current namespace\n                       (update-in env [:namespaces cnn]\n                                  merge other-vars)))))\n          (recur (nnext exprs)))))))\n\n(defn eval-refer* [env ns-sym filters]\n  env\n  (let [cnn (vars/current-ns-name)\n        namespaces (:namespaces env)\n        ns (or (get namespaces ns-sym)\n               (throw (new #?(:clj Exception :cljs js/Error)\n                           (str \"No namespace: \" ns-sym))))\n        fs (apply hash-map filters)\n        public-keys (filter symbol? (keys ns))\n        rename (or (:rename fs) {})\n        exclude (set (:exclude fs))\n        to-do (if (= :all (:refer fs))\n                public-keys\n                (or (:refer fs) (:only fs) public-keys))\n        _ (when (and to-do (not (sequential? to-do)))\n            (throw (new #?(:clj Exception :cljs js/Error)\n                        \":only/:refer value must be a sequential collection of symbols\")))\n        the-current-ns (get namespaces cnn)\n        referred (:refers the-current-ns)\n        referred (reduce (fn [referred sym]\n                           (if-not (exclude sym)\n                             (let [v (get ns sym)]\n                               (when-not v\n                                 (throw (new #?(:clj java.lang.IllegalAccessError\n                                                :cljs js/Error)\n                                             ;; TODO: handle private vars\n                                             (if false ;; (get (ns-interns ns) sym)\n                                               (str sym \" is not public\")\n                                               (str sym \" does not exist\")))))\n                               (assoc referred (or (rename sym) sym) v ))\n                             referred))\n                         referred\n                         to-do)\n        the-current-ns (assoc the-current-ns :refers referred)\n        namespaces (assoc namespaces cnn the-current-ns)\n        env (assoc env :namespaces namespaces)]\n    env))\n\n(defn eval-refer\n  \"The function equivalent of :refer is handled differently than what we\n  did before (this is more like what Clojure itself does.) For\n  referring clojure.core we still use the old code.\"\n  [ctx ns-sym & filters]\n  (if (= 'clojure.core ns-sym)\n    (eval-refer-clojure ctx filters)\n    (swap! (:env ctx) eval-refer* ns-sym filters))\n  nil)\n\n(vreset! utils/eval-refer-state eval-refer)\n"]}