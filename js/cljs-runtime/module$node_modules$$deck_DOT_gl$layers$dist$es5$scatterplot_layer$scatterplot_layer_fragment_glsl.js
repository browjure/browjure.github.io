shadow$provide.module$node_modules$$deck_DOT_gl$layers$dist$es5$scatterplot_layer$scatterplot_layer_fragment_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;exports["default"]="#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv \x3d unitPosition;\n\n  float distToCenter \x3d length(unitPosition) * outerRadiusPixels;\n  float inCircle \x3d smoothedge(distToCenter, outerRadiusPixels);\n\n  if (inCircle \x3d\x3d 0.0) {\n    discard;\n  }\n\n  if (stroked \x3e 0.5) {\n    float isLine \x3d smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter);\n    if (filled) {\n      gl_FragColor \x3d mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine \x3d\x3d 0.0) {\n        discard;\n      }\n      gl_FragColor \x3d vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor \x3d vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *\x3d inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n"}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$layers$dist$es5$scatterplot_layer$scatterplot_layer_fragment_glsl.js.map
