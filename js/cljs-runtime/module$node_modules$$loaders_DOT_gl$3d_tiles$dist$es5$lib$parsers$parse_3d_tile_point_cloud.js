shadow$provide.module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$parsers$parse_3d_tile_point_cloud=function(global,require,module,exports){function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<
arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2["default"])(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function _parsePointCloud3DTile(){_parsePointCloud3DTile=(0,_asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(tile$jscomp$1,
arrayBuffer,byteOffset,options,context){var JSCompiler_object_inline_featureTable_5511,JSCompiler_object_inline_batchTable_5512,featureTable,batchTable$jscomp$0;return _regenerator["default"].wrap(function(_context){for(;;)switch(_context.prev=_context.next){case 0:byteOffset=(0,_parse3dTileHeader.parse3DTileHeaderSync)(tile$jscomp$1,arrayBuffer,byteOffset);byteOffset=(0,_parse3dTileTables.parse3DTileTablesHeaderSync)(tile$jscomp$1,arrayBuffer,byteOffset);byteOffset=(0,_parse3dTileTables.parse3DTileTablesSync)(tile$jscomp$1,
arrayBuffer,byteOffset,options);var tile=tile$jscomp$1;tile.attributes={positions:null,colors:null,normals:null,batchIds:null};tile.isQuantized=!1;tile.isTranslucent=!1;tile.isRGB565=!1;tile.isOctEncoded16P=!1;var tile$jscomp$0=tile$jscomp$1;tile=new _tile3dFeatureTable["default"](tile$jscomp$0.featureTableJson,tile$jscomp$0.featureTableBinary);var pointsLength=tile.getGlobalProperty("POINTS_LENGTH");if(!Number.isFinite(pointsLength))throw Error("POINTS_LENGTH must be defined");tile.featuresLength=
pointsLength;tile$jscomp$0.featuresLength=pointsLength;tile$jscomp$0.pointsLength=pointsLength;tile$jscomp$0.pointCount=pointsLength;tile$jscomp$0.rtcCenter=tile.getGlobalProperty("RTC_CENTER",_math.GL.FLOAT,3);pointsLength=tile;var batchTable=null;if(!tile$jscomp$0.batchIds&&pointsLength.hasProperty("BATCH_ID")&&(tile$jscomp$0.batchIds=pointsLength.getPropertyArray("BATCH_ID",_math.GL.UNSIGNED_SHORT,1),tile$jscomp$0.batchIds)){pointsLength=pointsLength.getGlobalProperty("BATCH_LENGTH");if(!pointsLength)throw Error("Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.");
batchTable=new _tile3dBatchTable["default"](tile$jscomp$0.batchTableJson,tile$jscomp$0.batchTableBinary,pointsLength)}tile$jscomp$0=batchTable;JSCompiler_object_inline_featureTable_5511=tile;JSCompiler_object_inline_batchTable_5512=tile$jscomp$0;featureTable=JSCompiler_object_inline_featureTable_5511;batchTable$jscomp$0=JSCompiler_object_inline_batchTable_5512;_context.next=7;return parseDraco(tile$jscomp$1,featureTable,batchTable$jscomp$0,options,context);case 7:tile=tile$jscomp$1;tile$jscomp$0=
featureTable;pointsLength=options;if(!tile.attributes.positions)if(tile$jscomp$0.hasProperty("POSITION"))tile.attributes.positions=tile$jscomp$0.getPropertyArray("POSITION",_math.GL.FLOAT,3);else if(tile$jscomp$0.hasProperty("POSITION_QUANTIZED")){batchTable=tile$jscomp$0.getPropertyArray("POSITION_QUANTIZED",_math.GL.UNSIGNED_SHORT,3);tile.isQuantized=!0;tile.quantizedRange=65535;tile.quantizedVolumeScale=tile$jscomp$0.getGlobalProperty("QUANTIZED_VOLUME_SCALE",_math.GL.FLOAT,3);if(!tile.quantizedVolumeScale)throw Error("QUANTIZED_VOLUME_SCALE must be defined for quantized positions.");
tile.quantizedVolumeOffset=tile$jscomp$0.getGlobalProperty("QUANTIZED_VOLUME_OFFSET",_math.GL.FLOAT,3);if(!tile.quantizedVolumeOffset)throw Error("QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.");tile.attributes.positions=(0,_normalize3dTilePositions.normalize3DTilePositionAttribute)(tile,batchTable,pointsLength)}if(!tile.attributes.positions)throw Error("Either POSITION or POSITION_QUANTIZED must be defined.");tile=tile$jscomp$1;tile$jscomp$0=featureTable;pointsLength=batchTable$jscomp$0;
tile.attributes.colors||(batchTable=null,tile$jscomp$0.hasProperty("RGBA")?(batchTable=tile$jscomp$0.getPropertyArray("RGBA",_math.GL.UNSIGNED_BYTE,4),tile.isTranslucent=!0):tile$jscomp$0.hasProperty("RGB")?batchTable=tile$jscomp$0.getPropertyArray("RGB",_math.GL.UNSIGNED_BYTE,3):tile$jscomp$0.hasProperty("RGB565")&&(batchTable=tile$jscomp$0.getPropertyArray("RGB565",_math.GL.UNSIGNED_SHORT,1),tile.isRGB565=!0),tile.attributes.colors=(0,_normalize3dTileColors.normalize3DTileColorAttribute)(tile,batchTable,
pointsLength));tile$jscomp$0.hasProperty("CONSTANT_RGBA")&&(tile.constantRGBA=tile$jscomp$0.getGlobalProperty("CONSTANT_RGBA",_math.GL.UNSIGNED_BYTE,4));tile=tile$jscomp$1;tile$jscomp$0=featureTable;tile.attributes.normals||(pointsLength=null,tile$jscomp$0.hasProperty("NORMAL")?pointsLength=tile$jscomp$0.getPropertyArray("NORMAL",_math.GL.FLOAT,3):tile$jscomp$0.hasProperty("NORMAL_OCT16P")&&(pointsLength=tile$jscomp$0.getPropertyArray("NORMAL_OCT16P",_math.GL.UNSIGNED_BYTE,2),tile.isOctEncoded16P=
!0),tile.attributes.normals=(0,_normalize3dTileNormals.normalize3DTileNormalAttribute)(tile,pointsLength));return _context.abrupt("return",byteOffset);case 11:case "end":return _context.stop()}},_callee)}));return _parsePointCloud3DTile.apply(this,arguments)}function parseDraco(_x6,_x7,_x8,_x9,_x10){return _parseDraco.apply(this,arguments)}function _parseDraco(){_parseDraco=(0,_asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(tile,featureTable,batchTable,options,context){var dracoBuffer,
dracoFeatureTableProperties,dracoBatchTableProperties,batchTableDraco,featureTableDraco,dracoByteOffset,dracoByteLength,dracoData;return _regenerator["default"].wrap(function(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:if(batchTableDraco=tile.batchTableJson&&tile.batchTableJson.extensions&&tile.batchTableJson.extensions["3DTILES_draco_point_compression"])dracoBatchTableProperties=batchTableDraco.properties;featureTableDraco=featureTable.getExtension("3DTILES_draco_point_compression");
if(!featureTableDraco){_context2.next=15;break}dracoFeatureTableProperties=featureTableDraco.properties;dracoByteOffset=featureTableDraco.byteOffset;dracoByteLength=featureTableDraco.byteLength;if(dracoFeatureTableProperties&&Number.isFinite(dracoByteOffset)&&dracoByteLength){_context2.next=9;break}throw Error("Draco properties, byteOffset, and byteLength must be defined");case 9:dracoBuffer=tile.featureTableBinary.slice(dracoByteOffset,dracoByteOffset+dracoByteLength),tile.hasPositions=Number.isFinite(dracoFeatureTableProperties.POSITION),
tile.hasColors=Number.isFinite(dracoFeatureTableProperties.RGB)||Number.isFinite(dracoFeatureTableProperties.RGBA),tile.hasNormals=Number.isFinite(dracoFeatureTableProperties.NORMAL),tile.hasBatchIds=Number.isFinite(dracoFeatureTableProperties.BATCH_ID),tile.isTranslucent=Number.isFinite(dracoFeatureTableProperties.RGBA);case 15:if(dracoBuffer){_context2.next=17;break}return _context2.abrupt("return",!0);case 17:return dracoData={buffer:dracoBuffer,properties:_objectSpread(_objectSpread({},dracoFeatureTableProperties),
dracoBatchTableProperties),featureTableProperties:dracoFeatureTableProperties,batchTableProperties:dracoBatchTableProperties,dequantizeInShader:!1},_context2.next=20,loadDraco(tile,dracoData,options,context);case 20:return _context2.abrupt("return",_context2.sent);case 21:case "end":return _context2.stop()}},_callee2)}));return _parseDraco.apply(this,arguments)}function loadDraco(_x11,_x12,_x13,_x14){return _loadDraco.apply(this,arguments)}function _loadDraco(){_loadDraco=(0,_asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(tile,
dracoData,options,context){var parse,data,decodedPositions,decodedColors,decodedNormals,decodedBatchIds,isQuantizedDraco,isOctEncodedDraco,quantization,range,batchTableAttributes,_i,_Object$keys,attributeName;return _regenerator["default"].wrap(function(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:return parse=context.parse,_context3.next=3,parse(dracoData.buffer,_draco.DracoLoader,{draco:{extraAttributes:dracoData.batchTableProperties||{}}});case 3:data=_context3.sent;decodedPositions=
data.attributes.POSITION&&data.attributes.POSITION.value;decodedColors=data.attributes.COLOR_0&&data.attributes.COLOR_0.value;decodedNormals=data.attributes.NORMAL&&data.attributes.NORMAL.value;decodedBatchIds=data.attributes.BATCH_ID&&data.attributes.BATCH_ID.value;isQuantizedDraco=decodedPositions&&data.attributes.POSITION.value.quantization;isOctEncodedDraco=decodedNormals&&data.attributes.NORMAL.value.quantization;isQuantizedDraco&&(quantization=data.POSITION.data.quantization,range=quantization.range,
tile.quantizedVolumeScale=new _core.Vector3(range,range,range),tile.quantizedVolumeOffset=new _core.Vector3(quantization.minValues),tile.quantizedRange=(1<<quantization.quantizationBits)-1,tile.isQuantizedDraco=!0);isOctEncodedDraco&&(tile.octEncodedRange=(1<<data.NORMAL.data.quantization.quantizationBits)-1,tile.isOctEncodedDraco=!0);batchTableAttributes={};if(dracoData.batchTableProperties)for(_i=0,_Object$keys=Object.keys(dracoData.batchTableProperties);_i<_Object$keys.length;_i++)attributeName=
_Object$keys[_i],data.attributes[attributeName]&&data.attributes[attributeName].value&&(batchTableAttributes[attributeName.toLowerCase()]=data.attributes[attributeName].value);tile.attributes=_objectSpread({positions:decodedPositions,colors:(0,_normalize3dTileColors.normalize3DTileColorAttribute)(tile,decodedColors),normals:decodedNormals,batchIds:decodedBatchIds},batchTableAttributes);case 15:case "end":return _context3.stop()}},_callee3)}));return _loadDraco.apply(this,arguments)}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
Object.defineProperty(exports,"__esModule",{value:!0});exports.parsePointCloud3DTile=function(_x,_x2,_x3,_x4,_x5){return _parsePointCloud3DTile.apply(this,arguments)};exports.loadDraco=loadDraco;var _defineProperty2=global(require("module$node_modules$$babel$runtime$helpers$defineProperty")),_regenerator=global(require("module$node_modules$$babel$runtime$regenerator$index")),_asyncToGenerator2=global(require("module$node_modules$$babel$runtime$helpers$asyncToGenerator")),_draco=require("module$node_modules$$loaders_DOT_gl$draco$dist$es5$index"),
_math=require("module$node_modules$$loaders_DOT_gl$math$dist$es5$index"),_core=require("module$node_modules$$math_DOT_gl$core$dist$es5$index"),_tile3dFeatureTable=global(require("module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$classes$tile_3d_feature_table")),_tile3dBatchTable=global(require("module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$classes$tile_3d_batch_table")),_parse3dTileHeader=require("module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$parsers$helpers$parse_3d_tile_header"),
_parse3dTileTables=require("module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$parsers$helpers$parse_3d_tile_tables"),_normalize3dTileColors=require("module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$parsers$helpers$normalize_3d_tile_colors"),_normalize3dTileNormals=require("module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$parsers$helpers$normalize_3d_tile_normals"),_normalize3dTilePositions=require("module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$parsers$helpers$normalize_3d_tile_positions")}
//# sourceMappingURL=module$node_modules$$loaders_DOT_gl$3d_tiles$dist$es5$lib$parsers$parse_3d_tile_point_cloud.js.map
