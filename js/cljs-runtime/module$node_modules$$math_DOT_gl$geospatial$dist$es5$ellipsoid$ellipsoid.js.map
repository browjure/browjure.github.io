{
"version":3,
"file":"module$node_modules$$math_DOT_gl$geospatial$dist$es5$ellipsoid$ellipsoid.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/@math_DOT_gl/geospatial/dist/es5/ellipsoid/ellipsoid.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$math_DOT_gl$geospatial$dist$es5$ellipsoid$ellipsoid\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _core = require(\"@math.gl/core\");\n\nvar vec3 = _interopRequireWildcard(require(\"gl-matrix/vec3\"));\n\nvar _constants = require(\"../constants\");\n\nvar _typeUtils = require(\"../type-utils\");\n\nvar _scaleToGeodeticSurface2 = _interopRequireDefault(require(\"./helpers/scale-to-geodetic-surface\"));\n\nvar _ellipsoidTransform = _interopRequireDefault(require(\"./helpers/ellipsoid-transform\"));\n\nvar scratchVector = new _core.Vector3();\nvar scratchNormal = new _core.Vector3();\nvar scratchK = new _core.Vector3();\nvar scratchPosition = new _core.Vector3();\nvar scratchHeight = new _core.Vector3();\nvar scratchCartesian = new _core.Vector3();\nvar wgs84;\n\nvar Ellipsoid = function () {\n  (0, _createClass2[\"default\"])(Ellipsoid, null, [{\n    key: \"WGS84\",\n    get: function get() {\n      wgs84 = wgs84 || new Ellipsoid(_constants.WGS84_RADIUS_X, _constants.WGS84_RADIUS_Y, _constants.WGS84_RADIUS_Z);\n      return wgs84;\n    }\n  }]);\n\n  function Ellipsoid() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n    (0, _classCallCheck2[\"default\"])(this, Ellipsoid);\n    (0, _core.assert)(x >= 0.0);\n    (0, _core.assert)(y >= 0.0);\n    (0, _core.assert)(z >= 0.0);\n    this.radii = new _core.Vector3(x, y, z);\n    this.radiiSquared = new _core.Vector3(x * x, y * y, z * z);\n    this.radiiToTheFourth = new _core.Vector3(x * x * x * x, y * y * y * y, z * z * z * z);\n    this.oneOverRadii = new _core.Vector3(x === 0.0 ? 0.0 : 1.0 / x, y === 0.0 ? 0.0 : 1.0 / y, z === 0.0 ? 0.0 : 1.0 / z);\n    this.oneOverRadiiSquared = new _core.Vector3(x === 0.0 ? 0.0 : 1.0 / (x * x), y === 0.0 ? 0.0 : 1.0 / (y * y), z === 0.0 ? 0.0 : 1.0 / (z * z));\n    this.minimumRadius = Math.min(x, y, z);\n    this.maximumRadius = Math.max(x, y, z);\n    this.centerToleranceSquared = _core._MathUtils.EPSILON1;\n\n    if (this.radiiSquared.z !== 0) {\n      this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;\n    }\n\n    Object.freeze(this);\n  }\n\n  (0, _createClass2[\"default\"])(Ellipsoid, [{\n    key: \"equals\",\n    value: function equals(right) {\n      return this === right || Boolean(right && this.radii.equals(right.radii));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.radii.toString();\n    }\n  }, {\n    key: \"cartographicToCartesian\",\n    value: function cartographicToCartesian(cartographic) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      var normal = scratchNormal;\n      var k = scratchK;\n\n      var _cartographic = (0, _slicedToArray2[\"default\"])(cartographic, 3),\n          height = _cartographic[2];\n\n      this.geodeticSurfaceNormalCartographic(cartographic, normal);\n      k.copy(this.radiiSquared).scale(normal);\n      var gamma = Math.sqrt(normal.dot(k));\n      k.scale(1 / gamma);\n      normal.scale(height);\n      k.add(normal);\n      return k.to(result);\n    }\n  }, {\n    key: \"cartesianToCartographic\",\n    value: function cartesianToCartographic(cartesian) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      scratchCartesian.from(cartesian);\n      var point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition);\n\n      if (!point) {\n        return undefined;\n      }\n\n      var normal = this.geodeticSurfaceNormal(point, scratchNormal);\n      var h = scratchHeight;\n      h.copy(scratchCartesian).subtract(point);\n      var longitude = Math.atan2(normal.y, normal.x);\n      var latitude = Math.asin(normal.z);\n      var height = Math.sign(vec3.dot(h, scratchCartesian)) * vec3.length(h);\n      return (0, _typeUtils.toCartographicFromRadians)([longitude, latitude, height], result);\n    }\n  }, {\n    key: \"eastNorthUpToFixedFrame\",\n    value: function eastNorthUpToFixedFrame(origin) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _core.Matrix4();\n      return (0, _ellipsoidTransform[\"default\"])(this, 'east', 'north', 'up', origin, result);\n    }\n  }, {\n    key: \"localFrameToFixedFrame\",\n    value: function localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin) {\n      var result = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _core.Matrix4();\n      return (0, _ellipsoidTransform[\"default\"])(this, firstAxis, secondAxis, thirdAxis, origin, result);\n    }\n  }, {\n    key: \"geocentricSurfaceNormal\",\n    value: function geocentricSurfaceNormal(cartesian) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      return scratchVector.from(cartesian).normalize().to(result);\n    }\n  }, {\n    key: \"geodeticSurfaceNormalCartographic\",\n    value: function geodeticSurfaceNormalCartographic(cartographic) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      var cartographicVectorRadians = (0, _typeUtils.fromCartographicToRadians)(cartographic);\n      var longitude = cartographicVectorRadians[0];\n      var latitude = cartographicVectorRadians[1];\n      var cosLatitude = Math.cos(latitude);\n      scratchVector.set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude)).normalize();\n      return scratchVector.to(result);\n    }\n  }, {\n    key: \"geodeticSurfaceNormal\",\n    value: function geodeticSurfaceNormal(cartesian) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      return scratchVector.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result);\n    }\n  }, {\n    key: \"scaleToGeodeticSurface\",\n    value: function scaleToGeodeticSurface(cartesian, result) {\n      return (0, _scaleToGeodeticSurface2[\"default\"])(cartesian, this, result);\n    }\n  }, {\n    key: \"scaleToGeocentricSurface\",\n    value: function scaleToGeocentricSurface(cartesian) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      scratchPosition.from(cartesian);\n      var positionX = scratchPosition.x;\n      var positionY = scratchPosition.y;\n      var positionZ = scratchPosition.z;\n      var oneOverRadiiSquared = this.oneOverRadiiSquared;\n      var beta = 1.0 / Math.sqrt(positionX * positionX * oneOverRadiiSquared.x + positionY * positionY * oneOverRadiiSquared.y + positionZ * positionZ * oneOverRadiiSquared.z);\n      return scratchPosition.multiplyScalar(beta).to(result);\n    }\n  }, {\n    key: \"transformPositionToScaledSpace\",\n    value: function transformPositionToScaledSpace(position) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      return scratchPosition.from(position).scale(this.oneOverRadii).to(result);\n    }\n  }, {\n    key: \"transformPositionFromScaledSpace\",\n    value: function transformPositionFromScaledSpace(position) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      return scratchPosition.from(position).scale(this.radii).to(result);\n    }\n  }, {\n    key: \"getSurfaceNormalIntersectionWithZAxis\",\n    value: function getSurfaceNormalIntersectionWithZAxis(position) {\n      var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n      var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0, 0];\n      (0, _core.assert)((0, _core.equals)(this.radii.x, this.radii.y, _core._MathUtils.EPSILON15));\n      (0, _core.assert)(this.radii.z > 0);\n      scratchPosition.from(position);\n      var z = scratchPosition.z * (1 - this.squaredXOverSquaredZ);\n\n      if (Math.abs(z) >= this.radii.z - buffer) {\n        return undefined;\n      }\n\n      return scratchPosition.set(0.0, 0.0, z).to(result);\n    }\n  }]);\n  return Ellipsoid;\n}();\n\nexports[\"default\"] = Ellipsoid;\n//# sourceMappingURL=ellipsoid.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireWildcard","_interopRequireDefault","Object","defineProperty","value","_slicedToArray2","_classCallCheck2","_createClass2","_core","vec3","_constants","_typeUtils","_scaleToGeodeticSurface2","_ellipsoidTransform","scratchVector","Vector3","scratchNormal","scratchK","scratchPosition","scratchHeight","scratchCartesian","wgs84","Ellipsoid","x","arguments","length","undefined","y","z","assert","radii","radiiSquared","radiiToTheFourth","oneOverRadii","oneOverRadiiSquared","minimumRadius","Math","min","maximumRadius","max","centerToleranceSquared","_MathUtils","EPSILON1","squaredXOverSquaredZ","freeze","key","get","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","equals","right","toString","cartographicToCartesian","cartographic","result","height","_cartographic","geodeticSurfaceNormalCartographic","copy","scale","gamma","sqrt","dot","add","to","cartesianToCartographic","cartesian","from","point","scaleToGeodeticSurface","normal","geodeticSurfaceNormal","subtract","longitude","atan2","latitude","asin","sign","toCartographicFromRadians","eastNorthUpToFixedFrame","origin","Matrix4","localFrameToFixedFrame","firstAxis","secondAxis","thirdAxis","geocentricSurfaceNormal","normalize","cartographicVectorRadians","fromCartographicToRadians","cosLatitude","cos","set","sin","scaleToGeocentricSurface","positionX","positionY","positionZ","multiplyScalar","transformPositionToScaledSpace","position","transformPositionFromScaledSpace","getSurfaceNormalIntersectionWithZAxis","buffer","EPSILON15","abs"]
}
