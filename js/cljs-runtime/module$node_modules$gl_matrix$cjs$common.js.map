{
"version":3,
"file":"module$node_modules$gl_matrix$cjs$common.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,wCAAf,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrGC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQI,kBAAR,CAuBAA,QAA2B,CAACC,IAAD,CAAO,CAChCL,OAAA,CAAQM,UAAR,CAAqBA,UAArB,CAAkCD,IADF,CAtBlCL,QAAA,CAAQO,QAAR,CAiCAA,QAAiB,CAACC,CAAD,CAAI,CACnB,MAAOA,EAAP,CAAWC,MADQ,CAhCrBT,QAAA,CAAQU,MAAR,CA8CAA,QAAe,CAACF,CAAD,CAAIG,CAAJ,CAAO,CACpB,MAAOC,KAAA,CAAKC,GAAL,CAASL,CAAT,CAAaG,CAAb,CAAP,EAA0BG,OAA1B,CAAoCF,IAAA,CAAKG,GAAL,CAAS,CAAT,CAAcH,IAAA,CAAKC,GAAL,CAASL,CAAT,CAAd,CAA2BI,IAAA,CAAKC,GAAL,CAASF,CAAT,CAA3B,CADhB,CA7CtBX,QAAA,CAAQgB,MAAR,CAAiBhB,OAAjB,CAAyBM,UAAzB,CAAsCN,OAAtC,CAA8Cc,OAA9C,CAAwD,IAAK,EAO7D,KAAIA,QAAU,IACdd,QAAA,CAAQc,OAAR,CAAkBA,OAClB,KAAIR,WAAqC,WAAxB,GAAA,MAAOW,aAAP;AAAsCA,YAAtC,CAAqDC,KACtElB,QAAA,CAAQM,UAAR,CAAqBA,UAQrBN,QAAA,CAAQgB,MAAR,CAPaJ,IAOb,CAPkBO,MAalB,KAAIV,OAASG,IAATH,CAAcW,EAAdX,CAAmB,GAyBlBG,KAAL,CAAUS,KAAV,GAAiBT,IAAjB,CAAsBS,KAAtB,CAA8BC,QAAS,EAAG,CAIxC,IAJwC,IACpCC,EAAI,CADgC,CAEpCC,EAAIC,SAAJD,CAAcE,MAElB,CAAOF,CAAA,EAAP,CAAA,CACED,CAAA,EAAKE,SAAA,CAAUD,CAAV,CAAL,CAAoBC,SAAA,CAAUD,CAAV,CAGtB,OAAOZ,KAAA,CAAKe,IAAL,CAAUJ,CAAV,CARiC,CAA1C,CA1DqG;",
"sources":["node_modules/gl-matrix/cjs/common.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$gl_matrix$cjs$common\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setMatrixArrayType = setMatrixArrayType;\nexports.toRadian = toRadian;\nexports.equals = equals;\nexports.RANDOM = exports.ARRAY_TYPE = exports.EPSILON = void 0;\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nexports.EPSILON = EPSILON;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexports.ARRAY_TYPE = ARRAY_TYPE;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexports.RANDOM = RANDOM;\n\nfunction setMatrixArrayType(type) {\n  exports.ARRAY_TYPE = ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","setMatrixArrayType","type","ARRAY_TYPE","toRadian","a","degree","equals","b","Math","abs","EPSILON","max","RANDOM","Float32Array","Array","random","PI","hypot","Math.hypot","y","i","arguments","length","sqrt"]
}
