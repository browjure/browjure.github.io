shadow$provide.module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_cell_layer=function(global,require,module,exports){function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function(){var Super=(0,_getPrototypeOf2["default"])(Derived);if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2["default"])(this).constructor;Super=Reflect.construct(Super,arguments,NewTarget)}else Super=Super.apply(this,arguments);return(0,
_possibleConstructorReturn2["default"])(this,Super)}}function _isNativeReflectConstruct(){if("undefined"===typeof Reflect||!Reflect.construct||Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=
global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_get2=global(require("module$node_modules$$babel$runtime$helpers$get")),_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits")),_possibleConstructorReturn2=global(require("module$node_modules$$babel$runtime$helpers$possibleConstructorReturn")),_getPrototypeOf2=global(require("module$node_modules$$babel$runtime$helpers$getPrototypeOf")),
_core=require("module$node_modules$$luma_DOT_gl$core$dist$es5$index"),_core2=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_colorUtils=require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$color_utils"),_screenGridLayerVertex=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_layer_vertex_glsl")),_screenGridLayerFragment=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_layer_fragment_glsl")),
DEFAULT_MINCOLOR=[0,0,0,0],DEFAULT_MAXCOLOR=[0,255,0,255],COLOR_PROPS=["minColor","maxColor","colorRange","colorDomain"];require={cellSizePixels:{value:100,min:1},cellMarginPixels:{value:2,min:0,max:5},colorDomain:null,colorRange:_colorUtils.defaultColorRange};global=function(_Layer){function ScreenGridCellLayer(){(0,_classCallCheck2["default"])(this,ScreenGridCellLayer);return _super.apply(this,arguments)}(0,_inherits2["default"])(ScreenGridCellLayer,_Layer);var _super=_createSuper(ScreenGridCellLayer);
(0,_createClass2["default"])(ScreenGridCellLayer,[{key:"getShaders",value:function(){return{vs:_screenGridLayerVertex["default"],fs:_screenGridLayerFragment["default"],modules:[_core2.picking]}}},{key:"initializeState",value:function(){var gl=this.context.gl;this.getAttributeManager().addInstanced({instancePositions:{size:3,update:this.calculateInstancePositions},instanceCounts:{size:4,noAlloc:!0}});this.setState({model:this._getModel(gl)})}},{key:"shouldUpdateState",value:function(_ref){return _ref.changeFlags.somethingChanged}},
{key:"updateState",value:function(_ref2){var oldProps=_ref2.oldProps,props=_ref2.props;_ref2=_ref2.changeFlags;(0,_get2["default"])((0,_getPrototypeOf2["default"])(ScreenGridCellLayer.prototype),"updateState",this).call(this,{oldProps,props,changeFlags:_ref2});var attributeManager=this.getAttributeManager();props.numInstances!==oldProps.numInstances?attributeManager.invalidateAll():oldProps.cellSizePixels!==props.cellSizePixels&&attributeManager.invalidate("instancePositions");this._updateUniforms(oldProps,
props,_ref2)}},{key:"draw",value:function(_ref3){_ref3=_ref3.uniforms;var _this$props=this.props,parameters=_this$props.parameters,model=this.state.model;_ref3=Object.assign({minColor:this.props.minColor||DEFAULT_MINCOLOR,maxColor:this.props.maxColor||DEFAULT_MAXCOLOR,maxTexture:_this$props.maxTexture,colorDomain:this.props.colorDomain||[1,0]},_ref3);model.draw({uniforms:_ref3,parameters:Object.assign({depthTest:!1,depthMask:!1},parameters)})}},{key:"calculateInstancePositions",value:function(attribute,
_ref4){_ref4=_ref4.numInstances;var _this$context$viewpor=this.context.viewport,width=_this$context$viewpor.width;_this$context$viewpor=_this$context$viewpor.height;var cellSizePixels=this.props.cellSizePixels,numCol=Math.ceil(width/cellSizePixels),value=attribute.value;attribute=attribute.size;for(var i=0;i<_ref4;i++){var y=Math.floor(i/numCol);value[i*attribute]=i%numCol*cellSizePixels/width*2-1;value[i*attribute+1]=1-y*cellSizePixels/_this$context$viewpor*2;value[i*attribute+2]=0}}},{key:"_getModel",
value:function(gl){return new _core.Model(gl,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new _core.Geometry({drawMode:6,attributes:{positions:new Float32Array([0,0,0,1,0,0,1,1,0,0,1,0])}}),isInstanced:!0}))}},{key:"_shouldUseMinMax",value:function(){var _this$props2=this.props,maxColor=_this$props2.maxColor,colorDomain=_this$props2.colorDomain,colorRange=_this$props2.colorRange;return _this$props2.minColor||maxColor?(_core2.log.deprecated("ScreenGridLayer props: minColor and maxColor",
"colorRange, colorDomain")(),!0):colorDomain||colorRange?!1:!0}},{key:"_updateUniforms",value:function(oldProps,props,changeFlags){var model=this.state.model;COLOR_PROPS.some(function(key){return oldProps[key]!==props[key]})&&model.setUniforms({shouldUseMinMax:this._shouldUseMinMax()});oldProps.colorRange!==props.colorRange&&model.setUniforms({colorRange:(0,_colorUtils.colorRangeToFlatArray)(props.colorRange)});if(oldProps.cellMarginPixels!==props.cellMarginPixels||oldProps.cellSizePixels!==props.cellSizePixels||
changeFlags.viewportChanged){changeFlags=this.context.viewport;var _this$props3=this.props,cellSizePixels=_this$props3.cellSizePixels;_this$props3=_this$props3.cellMarginPixels;_this$props3=cellSizePixels>_this$props3?_this$props3:0;changeFlags=new Float32Array([(cellSizePixels-_this$props3)/changeFlags.width*2,-(cellSizePixels-_this$props3)/changeFlags.height*2,1]);model.setUniforms({cellScale:changeFlags})}}}],[{key:"isSupported",value:function(gl){return(0,_core.hasFeatures)(gl,[_core.FEATURES.TEXTURE_FLOAT])}}]);
return ScreenGridCellLayer}(_core2.Layer);exports["default"]=global;global.layerName="ScreenGridCellLayer";global.defaultProps=require}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_cell_layer.js.map
