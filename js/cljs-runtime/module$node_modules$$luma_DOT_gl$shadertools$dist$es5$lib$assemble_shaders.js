shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$assemble_shaders=function(global,require,module$jscomp$1,exports){function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e;
},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;}}}}function _unsupportedIterableToArray(o,
minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function assembleShader(gl,_ref){var id=
_ref.id,source=_ref.source,type=_ref.type,modules=_ref.modules,_ref$defines=_ref.defines,defines=void 0===_ref$defines?{}:_ref$defines;_ref$defines=_ref.hookFunctions;var hookFunctions=void 0===_ref$defines?[]:_ref$defines;_ref$defines=_ref.inject;_ref$defines=void 0===_ref$defines?{}:_ref$defines;var _ref$transpileToGLSL=_ref.transpileToGLSL100;_ref$transpileToGLSL=void 0===_ref$transpileToGLSL?!1:_ref$transpileToGLSL;var _ref$prologue=_ref.prologue,prologue=void 0===_ref$prologue?!0:_ref$prologue;
_ref=_ref.log;(0,_utils.assert)("string"===typeof source,"shader source must be a string");_ref$prologue=type===_constants.VERTEX_SHADER;var sourceLines=source.split("\n"),glslVersion=100,versionLine="",coreSource=source;0===sourceLines[0].indexOf("#version ")?(glslVersion=300,versionLine=sourceLines[0],coreSource=sourceLines.slice(1).join("\n")):versionLine="#version ".concat(glslVersion);var allDefines={};modules.forEach(function(module){Object.assign(allDefines,module.getDefines())});Object.assign(allDefines,
defines);gl=prologue?"".concat(versionLine,"\n").concat(getShaderName({id,source,type}),"\n").concat("\n#define SHADER_TYPE_".concat(SHADER_TYPE[type].toUpperCase(),"\n"),"\n").concat((0,_platformDefines.getPlatformShaderDefines)(gl),"\n").concat((0,_platformDefines.getVersionDefines)(gl,glslVersion,!_ref$prologue),"\n").concat(getApplicationDefines(allDefines),"\n").concat(_ref$prologue?"":FRAGMENT_SHADER_PROLOGUE,"\n"):"".concat(versionLine,"\n");id=normalizeHookFunctions(hookFunctions);source=
{};defines={};hookFunctions={};for(var key in _ref$defines)prologue="string"===typeof _ref$defines[key]?{injection:_ref$defines[key],order:0}:_ref$defines[key],(sourceLines=key.match(/^(v|f)s:(#)?([\w-]+)$/))?(versionLine=sourceLines[3],sourceLines[2]?"decl"===versionLine?defines[key]=[prologue]:hookFunctions[key]=[prologue]:source[key]=[prologue]):hookFunctions[key]=[prologue];modules=_createForOfIteratorHelper(modules);var _step;try{for(modules.s();!(_step=modules.n()).done;){var module$jscomp$0=
_step.value;_ref&&module$jscomp$0.checkDeprecations(coreSource,_ref);var moduleSource=module$jscomp$0.getModuleSource(type,glslVersion);gl+=moduleSource;var injections=module$jscomp$0.injections[type],_key;for(_key in injections){var _match=_key.match(/^(v|f)s:#([\w-]+)$/);if(_match){var injectionType="decl"===_match[2]?defines:hookFunctions;injectionType[_key]=injectionType[_key]||[];injectionType[_key].push(injections[_key])}else source[_key]=source[_key]||[],source[_key].push(injections[_key])}}}catch(err){modules.e(err)}finally{modules.f()}gl+=
INJECT_SHADER_DECLARATIONS;gl=(0,_injectShader["default"])(gl,type,defines);gl+=getHookFunctions(id[type],source);gl+=coreSource;gl=(0,_injectShader["default"])(gl,type,hookFunctions);return gl=(0,_transpileShader["default"])(gl,_ref$transpileToGLSL?100:glslVersion,_ref$prologue)}function assembleGetUniforms(modules){return function(opts){var uniforms={},_iterator2=_createForOfIteratorHelper(modules),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var moduleUniforms=_step2.value.getUniforms(opts,
uniforms);Object.assign(uniforms,moduleUniforms)}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}return uniforms}}function getShaderName(_ref3){var id=_ref3.id,source=_ref3.source;_ref3=_ref3.type;return id&&"string"===typeof id&&-1===source.indexOf("SHADER_NAME")?"\n#define SHADER_NAME ".concat(id,"_").concat(SHADER_TYPE[_ref3],"\n\n"):""}function getApplicationDefines(){var defines=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},count=0,sourceText="",define;for(define in defines){0===
count&&(sourceText+="\n// APPLICATION DEFINES\n");count++;var value=defines[define];if(value||Number.isFinite(value))sourceText+="#define ".concat(define.toUpperCase()," ").concat(defines[define],"\n")}0===count&&(sourceText+="\n");return sourceText}function getHookFunctions(hookFunctions,hookInjections){var result="",hookName;for(hookName in hookFunctions){var hookFunction=hookFunctions[hookName];result+="void ".concat(hookFunction.signature," {\n");hookFunction.header&&(result+="  ".concat(hookFunction.header));
if(hookInjections[hookName]){var injections=hookInjections[hookName];injections.sort(function(a,b){return a.order-b.order});injections=_createForOfIteratorHelper(injections);var _step3;try{for(injections.s();!(_step3=injections.n()).done;)result+="  ".concat(_step3.value.injection,"\n")}catch(err){injections.e(err)}finally{injections.f()}}hookFunction.footer&&(result+="  ".concat(hookFunction.footer));result+="}\n"}return result}function normalizeHookFunctions(hookFunctions){var result={vs:{},fs:{}};
hookFunctions.forEach(function(hook){if("string"!==typeof hook){var opts=hook;hook=opts.hook}else opts={};hook=hook.trim();var _hook$split=hook.split(":"),_hook$split2=(0,_slicedToArray2["default"])(_hook$split,2);_hook$split=_hook$split2[0];_hook$split2=_hook$split2[1];hook=hook.replace(/\(.+/,"");result[_hook$split][hook]=Object.assign(opts,{signature:_hook$split2})});return result}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");module$jscomp$1=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");
Object.defineProperty(exports,"__esModule",{value:!0});exports.assembleShaders=function(gl,opts){var vs=opts.vs,fs=opts.fs,modules=(0,_resolveModules.resolveModules)(opts.modules||[]);return{gl,vs:assembleShader(gl,Object.assign({},opts,{source:vs,type:_constants.VERTEX_SHADER,modules})),fs:assembleShader(gl,Object.assign({},opts,{source:fs,type:_constants.FRAGMENT_SHADER,modules})),getUniforms:assembleGetUniforms(modules)}};var _slicedToArray2=global(require("module$node_modules$$babel$runtime$helpers$slicedToArray"));
exports=global(require("module$node_modules$$babel$runtime$helpers$defineProperty"));var _constants=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$constants"),_resolveModules=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$resolve_modules"),_platformDefines=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$platform_defines"),_injectShader=module$jscomp$1(require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$inject_shader")),_transpileShader=
global(require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$transpile_shader")),_utils=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$utils$index"),_SHADER_TYPE,INJECT_SHADER_DECLARATIONS="\n\n".concat(_injectShader.DECLARATION_INJECT_MARKER,"\n\n"),SHADER_TYPE=(_SHADER_TYPE={},(0,exports["default"])(_SHADER_TYPE,_constants.VERTEX_SHADER,"vertex"),(0,exports["default"])(_SHADER_TYPE,_constants.FRAGMENT_SHADER,"fragment"),_SHADER_TYPE),FRAGMENT_SHADER_PROLOGUE="precision highp float;\n\n"}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$assemble_shaders.js.map
