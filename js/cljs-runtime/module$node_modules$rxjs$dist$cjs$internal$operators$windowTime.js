shadow$provide.module$node_modules$rxjs$dist$cjs$internal$operators$windowTime=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.windowTime=void 0;var Subject_1=require("module$node_modules$rxjs$dist$cjs$internal$Subject"),async_1=require("module$node_modules$rxjs$dist$cjs$internal$scheduler$async"),Subscription_1=require("module$node_modules$rxjs$dist$cjs$internal$Subscription"),lift_1=require("module$node_modules$rxjs$dist$cjs$internal$util$lift"),
OperatorSubscriber_1=require("module$node_modules$rxjs$dist$cjs$internal$operators$OperatorSubscriber"),arrRemove_1=require("module$node_modules$rxjs$dist$cjs$internal$util$arrRemove"),args_1=require("module$node_modules$rxjs$dist$cjs$internal$util$args");exports.windowTime=function(windowTimeSpan){for(var _a$jscomp$0,_b,otherArgs=[],_i=1;_i<arguments.length;_i++)otherArgs[_i-1]=arguments[_i];var scheduler=null!==(_a$jscomp$0=args_1.popScheduler(otherArgs))&&void 0!==_a$jscomp$0?_a$jscomp$0:async_1.asyncScheduler,
windowCreationInterval=null!==(_b=otherArgs[0])&&void 0!==_b?_b:null,maxWindowSize=otherArgs[1]||Infinity;return lift_1.operate(function(source,subscriber){var windowRecords=[],restartOnClose=!1,closeWindow=function(record){var subs=record.subs;record.window.complete();subs.unsubscribe();arrRemove_1.arrRemove(windowRecords,record);restartOnClose&&startWindow()},startWindow=function(){if(windowRecords){var subs=new Subscription_1.Subscription;subscriber.add(subs);var window_1=new Subject_1.Subject,
record_1={window:window_1,subs,seen:0};windowRecords.push(record_1);subscriber.next(window_1.asObservable());subs.add(scheduler.schedule(function(){return closeWindow(record_1)},windowTimeSpan))}};null!==windowCreationInterval&&0<=windowCreationInterval?subscriber.add(scheduler.schedule(function(){startWindow();!this.closed&&subscriber.add(this.schedule(null,windowCreationInterval))},windowCreationInterval)):restartOnClose=!0;startWindow();var terminate=function(cb){windowRecords.slice().forEach(function(_a){return cb(_a.window)});
cb(subscriber);subscriber.unsubscribe()};source.subscribe(new OperatorSubscriber_1.OperatorSubscriber(subscriber,function(value){windowRecords.slice().forEach(function(record){record.window.next(value);maxWindowSize<=++record.seen&&closeWindow(record)})},function(err){return terminate(function(consumer){return consumer.error(err)})},function(){return terminate(function(consumer){return consumer.complete()})}));return function(){windowRecords=null}})}}
//# sourceMappingURL=module$node_modules$rxjs$dist$cjs$internal$operators$windowTime.js.map
