shadow$provide.module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$gltf_scenegraph=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _typeof2=global(require("module$node_modules$$babel$runtime$helpers$typeof")),_classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),
_images=require("module$node_modules$$loaders_DOT_gl$images$dist$es5$index"),_loaderUtils=require("module$node_modules$$loaders_DOT_gl$loader_utils$dist$es5$index"),_assert=global(require("module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$utils$assert")),_gltfUtils=require("module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$gltf_utils$gltf_utils");require=function(){function GLTFScenegraph(gltf){(0,_classCallCheck2["default"])(this,GLTFScenegraph);if(gltf instanceof GLTFScenegraph)return gltf;
gltf||(gltf={json:{asset:{version:"2.0",generator:"loaders.gl"},buffers:[]},buffers:[]});this.byteLength=0;this.gltf=gltf;(0,_assert["default"])(this.gltf.json)}(0,_createClass2["default"])(GLTFScenegraph,[{key:"getApplicationData",value:function(key){return this.json[key]}},{key:"getExtraData",value:function(key){return(this.json.extras||{})[key]}},{key:"getExtension",value:function(extensionName){var isExtension=this.getUsedExtensions().find(function(name){return name===extensionName}),extensions=
this.json.extensions||{};return isExtension?extensions[extensionName]||!0:null}},{key:"getRequiredExtension",value:function(extensionName){return this.getRequiredExtensions().find(function(name){return name===extensionName})?this.getExtension(extensionName):null}},{key:"getRequiredExtensions",value:function(){return this.json.extensionsRequired||[]}},{key:"getUsedExtensions",value:function(){return this.json.extensionsUsed||[]}},{key:"getObjectExtension",value:function(object,extensionName){return(object.extensions||
{})[extensionName]}},{key:"getScene",value:function(index){return this.getObject("scenes",index)}},{key:"getNode",value:function(index){return this.getObject("nodes",index)}},{key:"getSkin",value:function(index){return this.getObject("skins",index)}},{key:"getMesh",value:function(index){return this.getObject("meshes",index)}},{key:"getMaterial",value:function(index){return this.getObject("materials",index)}},{key:"getAccessor",value:function(index){return this.getObject("accessors",index)}},{key:"getCamera",
value:function(index){return null}},{key:"getTexture",value:function(index){return this.getObject("textures",index)}},{key:"getSampler",value:function(index){return this.getObject("samplers",index)}},{key:"getImage",value:function(index){return this.getObject("images",index)}},{key:"getBufferView",value:function(index){return this.getObject("bufferViews",index)}},{key:"getBuffer",value:function(index){return this.getObject("buffers",index)}},{key:"getObject",value:function(array,index){if("object"===
(0,_typeof2["default"])(index))return index;var object=this.json[array]&&this.json[array][index];if(!object)throw Error("glTF file error: Could not find ".concat(array,"[").concat(index,"]"));return object}},{key:"getTypedArrayForBufferView",value:function(bufferView){bufferView=this.getBufferView(bufferView);var binChunk=this.gltf.buffers[bufferView.buffer];(0,_assert["default"])(binChunk);return new Uint8Array(binChunk.arrayBuffer,(bufferView.byteOffset||0)+binChunk.byteOffset,bufferView.byteLength)}},
{key:"getTypedArrayForAccessor",value:function(accessor){accessor=this.getAccessor(accessor);var bufferView=this.getBufferView(accessor.bufferView),arrayBuffer=this.getBuffer(bufferView.buffer).data,_getAccessorArrayType=(0,_gltfUtils.getAccessorArrayTypeAndLength)(accessor,bufferView);return new _getAccessorArrayType.ArrayType(arrayBuffer,bufferView.byteOffset+accessor.byteOffset,_getAccessorArrayType.length)}},{key:"getTypedArrayForImageData",value:function(image){image=this.getAccessor(image);
image=this.getBufferView(image.bufferView);var arrayBuffer=this.getBuffer(image.buffer).data;return new Uint8Array(arrayBuffer,image.byteOffset||0,image.byteLength)}},{key:"addApplicationData",value:function(key,data){this.json[key]=data;return this}},{key:"addExtraData",value:function(key,data){this.json.extras=this.json.extras||{};this.json.extras[key]=data;return this}},{key:"addObjectExtension",value:function(object,extensionName,data){(0,_assert["default"])(data);object.extensions=object.extensions||
{};object.extensions[extensionName]=data;this.registerUsedExtension(extensionName);return this}},{key:"setObjectExtension",value:function(object,extensionName,data){(object.extensions||{})[extensionName]=data}},{key:"removeObjectExtension",value:function(object,extensionName){object=object.extensions||{};var extension=object[extensionName];delete object[extensionName];return extension}},{key:"addExtension",value:function(extensionName){var extensionData=1<arguments.length&&void 0!==arguments[1]?arguments[1]:
{};(0,_assert["default"])(extensionData);this.json.extensions=this.json.extensions||{};this.json.extensions[extensionName]=extensionData;this.registerUsedExtension(extensionName);return extensionData}},{key:"addRequiredExtension",value:function(extensionName){var extensionData=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};(0,_assert["default"])(extensionData);this.addExtension(extensionName,extensionData);this.registerRequiredExtension(extensionName);return extensionData}},{key:"registerUsedExtension",
value:function(extensionName){this.json.extensionsUsed=this.json.extensionsUsed||[];this.json.extensionsUsed.find(function(ext){return ext===extensionName})||this.json.extensionsUsed.push(extensionName)}},{key:"registerRequiredExtension",value:function(extensionName){this.registerUsedExtension(extensionName);this.json.extensionsRequired=this.json.extensionsRequired||[];this.json.extensionsRequired.find(function(ext){return ext===extensionName})||this.json.extensionsRequired.push(extensionName)}},
{key:"removeExtension",value:function(extensionName){this.json.extensionsRequired&&this._removeStringFromArray(this.json.extensionsRequired,extensionName);this.json.extensionsUsed&&this._removeStringFromArray(this.json.extensionsUsed,extensionName);this.json.extensions&&delete this.json.extensions[extensionName]}},{key:"addMesh",value:function(attributes,indices){var mode=2<arguments.length&&void 0!==arguments[2]?arguments[2]:4;mode={primitives:[{attributes:this._addAttributes(attributes),indices,
mode}]};this.json.meshes=this.json.meshes||[];this.json.meshes.push(mode);return this.json.meshes.length-1}},{key:"addPointCloud",value:function(attributes){attributes={primitives:[{attributes:this._addAttributes(attributes),mode:0}]};this.json.meshes=this.json.meshes||[];this.json.meshes.push(attributes);return this.json.meshes.length-1}},{key:"addImage",value:function(imageData,mimeType){mimeType=mimeType||(0,_images.getBinaryImageMIMEType)(imageData);imageData={bufferView:this.addBufferView(imageData),
mimeType};this.json.images=this.json.images||[];this.json.images.push(imageData);return this.json.images.length-1}},{key:"addBufferView",value:function(buffer){var byteLength=buffer.byteLength;(0,_assert["default"])(Number.isFinite(byteLength));this.sourceBuffers=this.sourceBuffers||[];this.sourceBuffers.push(buffer);buffer={buffer:0,byteOffset:this.byteLength,byteLength};this.byteLength+=(0,_loaderUtils.padTo4Bytes)(byteLength);this.json.bufferViews=this.json.bufferViews||[];this.json.bufferViews.push(buffer);
return this.json.bufferViews.length-1}},{key:"addAccessor",value:function(bufferViewIndex,accessor){bufferViewIndex={bufferView:bufferViewIndex,type:(0,_gltfUtils.getAccessorTypeFromSize)(accessor.size),componentType:accessor.componentType,count:accessor.count};this.json.accessors=this.json.accessors||[];this.json.accessors.push(bufferViewIndex);return this.json.accessors.length-1}},{key:"addBinaryBuffer",value:function(sourceBuffer){var accessor=1<arguments.length&&void 0!==arguments[1]?arguments[1]:
{size:3},bufferViewIndex=this.addBufferView(sourceBuffer),accessorDefaults={size:accessor.size,componentType:(0,_gltfUtils.getComponentTypeFromArray)(sourceBuffer),count:Math.round(sourceBuffer.length/accessor.size)};return this.addAccessor(bufferViewIndex,Object.assign(accessorDefaults,accessor))}},{key:"createBinaryChunk",value:function(){if(!this.arrayBuffer){for(var totalByteLength=this.byteLength,arrayBuffer=new ArrayBuffer(totalByteLength),targetArray=new Uint8Array(arrayBuffer),dstByteOffset=
0,i=0;i<this.sourceBuffers.length;i++){var sourceBuffer=this.sourceBuffers[i];dstByteOffset=(0,_loaderUtils.copyToArray)(sourceBuffer,targetArray,dstByteOffset)}this.json.buffers[0].byteLength=totalByteLength;this.arrayBuffer=arrayBuffer;this.sourceBuffers=[]}}},{key:"_removeStringFromArray",value:function(array,string){for(var found=!0;found;){var index=array.indexOf(string);-1<index?array.splice(index,1):found=!1}}},{key:"json",get:function(){return this.gltf.json}}]);return GLTFScenegraph}();exports["default"]=
require}
//# sourceMappingURL=module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$gltf_scenegraph.js.map
