shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$picking$picking=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.picking=void 0;var DEFAULT_MODULE_OPTIONS={pickingSelectedColor:null,pickingHighlightColor:new Uint8Array([0,255,255,255]),pickingActive:!1,pickingAttribute:!1};exports.picking={name:"picking",vs:"uniform bool picking_uActive;\nuniform bool picking_uAttribute;\nuniform vec3 picking_uSelectedColor;\nuniform bool picking_uSelectedColorValid;\n\nout vec4 picking_vRGBcolor_Avalid;\n\nconst float COLOR_SCALE \x3d 1. / 255.;\n\nbool picking_isColorValid(vec3 color) {\n  return dot(color, vec3(1.0)) \x3e 0.001;\n}\n\nbool isVertexPicked(vec3 vertexColor) {\n  return\n    picking_uSelectedColorValid \x26\x26\n    !picking_isColorValid(abs(vertexColor - picking_uSelectedColor));\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  if (picking_uActive) {\n    picking_vRGBcolor_Avalid.a \x3d float(picking_isColorValid(pickingColor));\n\n    if (!picking_uAttribute) {\n      picking_vRGBcolor_Avalid.rgb \x3d pickingColor * COLOR_SCALE;\n    }\n  } else {\n    picking_vRGBcolor_Avalid.a \x3d float(isVertexPicked(pickingColor));\n  }\n}\n\nvoid picking_setPickingAttribute(float value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.r \x3d value;\n  }\n}\nvoid picking_setPickingAttribute(vec2 value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.rg \x3d value;\n  }\n}\nvoid picking_setPickingAttribute(vec3 value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.rgb \x3d value;\n  }\n}\n",
fs:"uniform bool picking_uActive;\nuniform vec3 picking_uSelectedColor;\nuniform vec4 picking_uHighlightColor;\n\nin vec4 picking_vRGBcolor_Avalid;\nvec4 picking_filterHighlightColor(vec4 color) {\n  if (picking_uActive) {\n    return color;\n  }\n  bool selected \x3d bool(picking_vRGBcolor_Avalid.a);\n\n  if (selected) {\n    float highLightAlpha \x3d picking_uHighlightColor.a;\n    float blendedAlpha \x3d highLightAlpha + color.a * (1.0 - highLightAlpha);\n    float highLightRatio \x3d highLightAlpha / blendedAlpha;\n\n    vec3 blendedRGB \x3d mix(color.rgb, picking_uHighlightColor.rgb, highLightRatio);\n    return vec4(blendedRGB, blendedAlpha);\n  } else {\n    return color;\n  }\n}\nvec4 picking_filterPickingColor(vec4 color) {\n  if (picking_uActive) {\n    if (picking_vRGBcolor_Avalid.a \x3d\x3d 0.0) {\n      discard;\n    }\n    return picking_vRGBcolor_Avalid;\n  }\n  return color;\n}\nvec4 picking_filterColor(vec4 color) {\n  vec4 highightColor \x3d picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highightColor);\n}\n\n",
getUniforms:function(){var opts=0<arguments.length&&void 0!==arguments[0]?arguments[0]:DEFAULT_MODULE_OPTIONS,uniforms={};if(void 0!==opts.pickingSelectedColor)if(opts.pickingSelectedColor){var selectedColor=opts.pickingSelectedColor.slice(0,3);uniforms.picking_uSelectedColorValid=1;uniforms.picking_uSelectedColor=selectedColor}else uniforms.picking_uSelectedColorValid=0;opts.pickingHighlightColor&&(selectedColor=Array.from(opts.pickingHighlightColor,function(x){return x/255}),Number.isFinite(selectedColor[3])||
(selectedColor[3]=1),uniforms.picking_uHighlightColor=selectedColor);void 0!==opts.pickingActive&&(uniforms.picking_uActive=!!opts.pickingActive,uniforms.picking_uAttribute=!!opts.pickingAttribute);return uniforms}}}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$picking$picking.js.map
