shadow$provide.module$node_modules$$luma_DOT_gl$gltools$dist$es5$polyfill$polyfill_context=function(global,require,module,exports){function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e;
},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;}}}}function _unsupportedIterableToArray(o,
minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function polyfillContext(gl){gl.luma=
gl.luma||{};var luma=gl.luma;if(!luma.polyfilled){(0,_polyfillVertexArrayObject.polyfillVertexArrayObject)(gl);gl.luma.extensions={};var EXTENSIONS=gl.getSupportedExtensions()||[];EXTENSIONS=_createForOfIteratorHelper(EXTENSIONS);var _step;try{for(EXTENSIONS.s();!(_step=EXTENSIONS.n()).done;){var extension=_step.value;gl.luma[extension]=gl.getExtension(extension)}}catch(err){EXTENSIONS.e(err)}finally{EXTENSIONS.f()}_step=_createForOfIteratorHelper(Object.getOwnPropertyNames(_polyfillTable.WEBGL2_CONTEXT_POLYFILLS));
var _step2;try{for(_step.s();!(_step2=_step.n()).done;){var extension$jscomp$0=_step2.value;"overrides"!==extension$jscomp$0&&polyfillExtension(gl,{extension:extension$jscomp$0,target:gl.luma,target2:gl})}}catch(err){_step.e(err)}finally{_step.f()}installOverrides(gl,{target:luma,target2:gl});luma.polyfilled=!0}return gl}function installOverrides(gl,_ref){var target=_ref.target,target2=_ref.target2;Object.keys(_polyfillTable.WEBGL2_CONTEXT_OVERRIDES).forEach(function(key){if("function"===typeof _polyfillTable.WEBGL2_CONTEXT_OVERRIDES[key]){var originalFunc=
gl[key]?gl[key].bind(gl):function(){};originalFunc=_polyfillTable.WEBGL2_CONTEXT_OVERRIDES[key].bind(null,gl,originalFunc);target[key]=originalFunc;target2[key]=originalFunc}})}function polyfillExtension(gl,_ref2){var extension=_ref2.extension,target=_ref2.target,target2=_ref2.target2,defaults=_polyfillTable.WEBGL2_CONTEXT_POLYFILLS[extension];(0,_assert.assert)(defaults);_ref2=defaults.meta;_ref2=(void 0===_ref2?{}:_ref2).suffix;var suffix=void 0===_ref2?"":_ref2,ext=gl.getExtension(extension);extension=
function(){var key=_Object$keys[_i],extKey="".concat(key).concat(suffix),polyfill=null;"meta"!==key&&"function"!==typeof gl[key]&&(ext&&"function"===typeof ext[extKey]?polyfill=function(){return ext[extKey].apply(ext,arguments)}:"function"===typeof defaults[key]&&(polyfill=defaults[key].bind(target)));polyfill&&(target[key]=polyfill,target2[key]=polyfill)};for(var _i=0,_Object$keys=Object.keys(defaults);_i<_Object$keys.length;_i++)extension()}Object.defineProperty(exports,"__esModule",{value:!0});
exports.polyfillContext=polyfillContext;var _polyfillVertexArrayObject=require("module$node_modules$$luma_DOT_gl$gltools$dist$es5$polyfill$polyfill_vertex_array_object"),_assert=require("module$node_modules$$luma_DOT_gl$gltools$dist$es5$utils$assert"),_polyfillTable=require("module$node_modules$$luma_DOT_gl$gltools$dist$es5$polyfill$polyfill_table");("undefined"!==typeof global?global:window).polyfillContext=polyfillContext}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$gltools$dist$es5$polyfill$polyfill_context.js.map
