shadow$provide.module$node_modules$$deck_DOT_gl$mesh_layers$dist$es5$simple_mesh_layer$simple_mesh_layer_fragment_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;exports["default"]="#version 300 es\n#define SHADER_NAME simple-mesh-layer-fs\n\nprecision highp float;\n\nuniform bool hasTexture;\nuniform sampler2D sampler;\nuniform bool flatShading;\nuniform float opacity;\n\nin vec2 vTexCoord;\nin vec3 cameraPosition;\nin vec3 normals_commonspace;\nin vec4 position_commonspace;\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv \x3d vTexCoord;\n\n  vec3 normal;\n  if (flatShading) {\n#ifdef DERIVATIVES_AVAILABLE\n    normal \x3d normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n#else\n    normal \x3d vec3(0.0, 0.0, 1.0);\n#endif\n  } else {\n    normal \x3d normals_commonspace;\n  }\n\n  vec4 color \x3d hasTexture ? texture(sampler, vTexCoord) : vColor;\n  vec3 lightColor \x3d lighting_getLightColor(color.rgb, cameraPosition, position_commonspace.xyz, normal);\n  fragColor \x3d vec4(lightColor, color.a * opacity);\n\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n"}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$mesh_layers$dist$es5$simple_mesh_layer$simple_mesh_layer_fragment_glsl.js.map
