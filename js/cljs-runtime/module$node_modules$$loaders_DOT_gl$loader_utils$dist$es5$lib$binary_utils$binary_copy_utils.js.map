{
"version":3,
"file":"module$node_modules$$loaders_DOT_gl$loader_utils$dist$es5$lib$binary_utils$binary_copy_utils.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,4FAAf,CAAiH,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAWzJC,QAASA,gCAA+B,CAACC,QAAD,CAAWC,UAAX,CAAuBC,YAAvB,CAAqC,CAC3E,IAAIC,aAAe,CAAC,CAAA,CAAGC,gBAAH,CAAoBC,WAArB,EAAkCH,YAAlC,CAA+CI,UAA/C,CAAnB,CACIC,UAAYJ,YAAZI,CAA2BL,YAA3BK,CAAwCD,UAE5C,IAAIN,QAAJ,CAAc,CACZ,IAAIQ,YAAc,IAAIC,UAAJ,CAAeT,QAAf,CAAwBU,MAAxB,CAAgCV,QAAhC,CAAyCC,UAAzC,CAAsDA,UAAtD,CAAkEC,YAAlE,CAA+EI,UAA/E,CAAlB,CACIK,YAAc,IAAIF,UAAJ,CAAeP,YAAf,CAClBM;WAAA,CAAYI,GAAZ,CAAgBD,WAAhB,CAEA,KAASE,WAAT,CAAa,CAAb,CAAgBA,WAAhB,CAAoBN,SAApB,CAA+B,EAAEM,WAAjC,CACEb,QAAA,CAASc,QAAT,CAAkBb,UAAlB,CAA+BC,YAA/B,CAA4CI,UAA5C,CAAyDO,WAAzD,CAA4D,EAA5D,CANU,CAWd,MADAZ,WACA,CADcE,YAd6D,CAR7EY,MAAA,CAAOC,cAAP,CAAsBlB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CmB,MAAO,CAAA,CADoC,CAA7C,CAGAnB,QAAA,CAAQC,+BAAR,CAA0CA,+BAC1CD,QAAA,CAAQoB,0BAAR,CAsBAA,QAAmC,CAAClB,QAAD,CAAWC,UAAX,CAAuBkB,MAAvB,CAA+B,CAE5DC,MAAAA,CAAe,CADDC,IAAIC,WACH,EAAYC,MAAZ,CAAmBJ,MAAnB,CAEnB,OADAlB,WACA,CADaF,+BAAA,CAAgCC,QAAhC,CAA0CC,UAA1C,CAAsDmB,MAAtD,CAHmD,CApBlE;IAAIhB,iBAAmBR,OAAA,CAAQ,8FAAR,CATkI;",
"sources":["node_modules/@loaders_DOT_gl/loader-utils/dist/es5/lib/binary-utils/binary-copy-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$loaders_DOT_gl$loader_utils$dist$es5$lib$binary_utils$binary_copy_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copyPaddedArrayBufferToDataView = copyPaddedArrayBufferToDataView;\nexports.copyPaddedStringToDataView = copyPaddedStringToDataView;\n\nvar _memoryCopyUtils = require(\"./memory-copy-utils\");\n\nfunction copyPaddedArrayBufferToDataView(dataView, byteOffset, sourceBuffer) {\n  var paddedLength = (0, _memoryCopyUtils.padTo4Bytes)(sourceBuffer.byteLength);\n  var padLength = paddedLength - sourceBuffer.byteLength;\n\n  if (dataView) {\n    var targetArray = new Uint8Array(dataView.buffer, dataView.byteOffset + byteOffset, sourceBuffer.byteLength);\n    var sourceArray = new Uint8Array(sourceBuffer);\n    targetArray.set(sourceArray);\n\n    for (var i = 0; i < padLength; ++i) {\n      dataView.setUint8(byteOffset + sourceBuffer.byteLength + i, 0x20);\n    }\n  }\n\n  byteOffset += paddedLength;\n  return byteOffset;\n}\n\nfunction copyPaddedStringToDataView(dataView, byteOffset, string) {\n  var textEncoder = new TextEncoder();\n  var stringBuffer = textEncoder.encode(string);\n  byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, stringBuffer);\n  return byteOffset;\n}\n//# sourceMappingURL=binary-copy-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","copyPaddedArrayBufferToDataView","dataView","byteOffset","sourceBuffer","paddedLength","_memoryCopyUtils","padTo4Bytes","byteLength","padLength","targetArray","Uint8Array","buffer","sourceArray","set","i","setUint8","Object","defineProperty","value","copyPaddedStringToDataView","string","stringBuffer","textEncoder","TextEncoder","encode"]
}
