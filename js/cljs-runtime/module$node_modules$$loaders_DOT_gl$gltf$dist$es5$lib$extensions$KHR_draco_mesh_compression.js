shadow$provide.module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$extensions$KHR_draco_mesh_compression=function(global,require,module,exports){function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<
arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2["default"])(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===
typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e;},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=
!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;}}}}function _unsupportedIterableToArray(o,minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||
"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _decode(){_decode=(0,_asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(gltfData,options,context){var scenegraph,promises,_iterator4,_step4,primitive;return _regenerator["default"].wrap(function(_context2){for(;;)switch(_context2.prev=
_context2.next){case 0:if(options.gltf.decompressMeshes){_context2.next=2;break}return _context2.abrupt("return");case 2:scenegraph=new _gltfScenegraph["default"](gltfData);promises=[];_iterator4=_createForOfIteratorHelper(makeMeshPrimitiveIterator(scenegraph));try{for(_iterator4.s();!(_step4=_iterator4.n()).done;)primitive=_step4.value,scenegraph.getObjectExtension(primitive,_gltfConstants.KHR_DRACO_MESH_COMPRESSION)&&promises.push(decompressPrimitive(primitive,scenegraph,options,context))}catch(err){_iterator4.e(err)}finally{_iterator4.f()}_context2.next=
8;return Promise.all(promises);case 8:scenegraph.removeExtension(_gltfConstants.KHR_DRACO_MESH_COMPRESSION);case 9:case "end":return _context2.stop()}},_callee)}));return _decode.apply(this,arguments)}function decompressPrimitive(_x4,_x5,_x6,_x7){return _decompressPrimitive.apply(this,arguments)}function _decompressPrimitive(){_decompressPrimitive=(0,_asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(primitive,scenegraph,options,context){var compressedPrimitive,buffer,bufferCopy,
parse,dracoOptions,decodedData,originalAccessors,_i,_arr,_arr$_i,name,index;return _regenerator["default"].wrap(function(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:return compressedPrimitive=scenegraph.getObjectExtension(primitive,_gltfConstants.KHR_DRACO_MESH_COMPRESSION),buffer=scenegraph.getTypedArrayForBufferView(compressedPrimitive.bufferView),bufferCopy=(0,_loaderUtils.getZeroOffsetArrayBuffer)(buffer.buffer,buffer.byteOffset),parse=context.parse,dracoOptions=_objectSpread({},
options),delete dracoOptions["3d-tiles"],_context3.next=8,parse(bufferCopy,_draco.DracoLoader,dracoOptions,context);case 8:decodedData=_context3.sent;originalAccessors={};_i=0;for(_arr=[].concat((0,_toConsumableArray2["default"])(Object.entries(primitive.attributes)),[["indices",primitive.indices]]);_i<_arr.length;_i++)_arr$_i=(0,_slicedToArray2["default"])(_arr[_i],2),name=_arr$_i[0],index=_arr$_i[1],originalAccessors[name]=scenegraph.getAccessor(index);primitive.attributes=(0,_gltfAttributeUtils.getGLTFAccessors)(decodedData.attributes,
originalAccessors);decodedData.indices&&(primitive.indices=(0,_gltfAttributeUtils.getGLTFAccessor)(decodedData.indices,originalAccessors.indices||{}));if(!primitive.attributes&&0<Object.keys(primitive.attributes).length)throw Error("Empty glTF primitive detected: Draco decompression failure?");case 14:case "end":return _context3.stop()}},_callee2)}));return _decompressPrimitive.apply(this,arguments)}function compressMesh(attributes,indices){var mode=2<arguments.length&&void 0!==arguments[2]?arguments[2]:
4,options=3<arguments.length?arguments[3]:void 0,context=4<arguments.length?arguments[4]:void 0;if(!options.DracoWriter||!options.DracoLoader)throw Error("DracoWriter/DracoLoader not available");var compressedData=options.DracoWriter.encodeSync({attributes});context=context.parseSync;context=context({attributes});context=options._addFauxAttributes(context.attributes);options=options.addBufferView(compressedData);return{primitives:[{attributes:context,mode,extensions:(0,_defineProperty2["default"])({},
_gltfConstants.KHR_DRACO_MESH_COMPRESSION,{bufferView:options,attributes:context})}]}}function makeMeshPrimitiveIterator(scenegraph){var _iterator2,_step2,mesh,_iterator3,_step3,primitive;return _regenerator["default"].wrap(function(_context){for(;;)switch(_context.prev=_context.next){case 0:_iterator2=_createForOfIteratorHelper(scenegraph.json.meshes||[]),_context.prev=1,_iterator2.s();case 3:if((_step2=_iterator2.n()).done){_context.next=24;break}mesh=_step2.value;_iterator3=_createForOfIteratorHelper(mesh.primitives);
_context.prev=6;_iterator3.s();case 8:if((_step3=_iterator3.n()).done){_context.next=14;break}primitive=_step3.value;_context.next=12;return primitive;case 12:_context.next=8;break;case 14:_context.next=19;break;case 16:_context.prev=16,_context.t0=_context["catch"](6),_iterator3.e(_context.t0);case 19:return _context.prev=19,_iterator3.f(),_context.finish(19);case 22:_context.next=3;break;case 24:_context.next=29;break;case 26:_context.prev=26,_context.t1=_context["catch"](1),_iterator2.e(_context.t1);
case 29:return _context.prev=29,_iterator2.f(),_context.finish(29);case 32:case "end":return _context.stop()}},_marked,null,[[1,26,29,32],[6,16,19,22]])}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports.decode=function(_x,_x2,_x3){return _decode.apply(this,arguments)};exports.encode=function(gltfData){var options=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},scenegraph=new _gltfScenegraph["default"](gltfData),
_iterator=_createForOfIteratorHelper(scenegraph.json.meshes||[]),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;)compressMesh(_step.value,options),scenegraph.addRequiredExtension(_gltfConstants.KHR_DRACO_MESH_COMPRESSION)}catch(err){_iterator.e(err)}finally{_iterator.f()}};var _slicedToArray2=global(require("module$node_modules$$babel$runtime$helpers$slicedToArray")),_toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),_regenerator=global(require("module$node_modules$$babel$runtime$regenerator$index")),
_defineProperty2=global(require("module$node_modules$$babel$runtime$helpers$defineProperty")),_asyncToGenerator2=global(require("module$node_modules$$babel$runtime$helpers$asyncToGenerator")),_draco=require("module$node_modules$$loaders_DOT_gl$draco$dist$es5$index"),_loaderUtils=require("module$node_modules$$loaders_DOT_gl$loader_utils$dist$es5$index"),_gltfScenegraph=global(require("module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$gltf_scenegraph")),_gltfConstants=require("module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$gltf_constants"),
_gltfAttributeUtils=require("module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$gltf_utils$gltf_attribute_utils"),_marked=_regenerator["default"].mark(makeMeshPrimitiveIterator)}
//# sourceMappingURL=module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$extensions$KHR_draco_mesh_compression.js.map
