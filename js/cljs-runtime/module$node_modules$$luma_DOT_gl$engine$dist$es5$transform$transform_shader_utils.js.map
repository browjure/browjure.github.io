{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$engine$dist$es5$transform$transform_shader_utils.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@luma_DOT_gl/engine/dist/es5/transform/transform-shader-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$engine$dist$es5$transform$transform_shader_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateForTextures = updateForTextures;\nexports.getSizeUniforms = getSizeUniforms;\nexports.getVaryingType = getVaryingType;\nexports.processAttributeDefinition = processAttributeDefinition;\n\nvar _webgl = require(\"@luma.gl/webgl\");\n\nvar _shadertools = require(\"@luma.gl/shadertools\");\n\nvar SAMPLER_UNIFORM_PREFIX = 'transform_uSampler_';\nvar SIZE_UNIFORM_PREFIX = 'transform_uSize_';\nvar VS_POS_VARIABLE = 'transform_position';\n\nfunction updateForTextures(_ref) {\n  var vs = _ref.vs,\n      sourceTextureMap = _ref.sourceTextureMap,\n      targetTextureVarying = _ref.targetTextureVarying,\n      targetTexture = _ref.targetTexture;\n  var texAttributeNames = Object.keys(sourceTextureMap);\n  var sourceCount = texAttributeNames.length;\n  var targetTextureType = null;\n  var samplerTextureMap = {};\n  var updatedVs = vs;\n  var finalInject = {};\n\n  if (sourceCount > 0 || targetTextureVarying) {\n    var vsLines = updatedVs.split('\\n');\n    var updateVsLines = vsLines.slice();\n    vsLines.forEach(function (line, index, lines) {\n      if (sourceCount > 0) {\n        var updated = processAttributeDefinition(line, sourceTextureMap);\n\n        if (updated) {\n          var updatedLine = updated.updatedLine,\n              inject = updated.inject;\n          updateVsLines[index] = updatedLine;\n          finalInject = (0, _shadertools.combineInjects)([finalInject, inject]);\n          Object.assign(samplerTextureMap, updated.samplerTextureMap);\n          sourceCount--;\n        }\n      }\n\n      if (targetTextureVarying && !targetTextureType) {\n        targetTextureType = getVaryingType(line, targetTextureVarying);\n      }\n    });\n\n    if (targetTextureVarying) {\n      (0, _webgl.assert)(targetTexture);\n      var sizeName = \"\".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying);\n      var uniformDeclaration = \"uniform vec2 \".concat(sizeName, \";\\n\");\n      var posInstructions = \"     vec2 \".concat(VS_POS_VARIABLE, \" = transform_getPos(\").concat(sizeName, \");\\n     gl_Position = vec4(\").concat(VS_POS_VARIABLE, \", 0, 1.);\\n\");\n      var inject = {\n        'vs:#decl': uniformDeclaration,\n        'vs:#main-start': posInstructions\n      };\n      finalInject = (0, _shadertools.combineInjects)([finalInject, inject]);\n    }\n\n    updatedVs = updateVsLines.join('\\n');\n  }\n\n  return {\n    vs: updatedVs,\n    targetTextureType: targetTextureType,\n    inject: finalInject,\n    samplerTextureMap: samplerTextureMap\n  };\n}\n\nfunction getSizeUniforms(_ref2) {\n  var sourceTextureMap = _ref2.sourceTextureMap,\n      targetTextureVarying = _ref2.targetTextureVarying,\n      targetTexture = _ref2.targetTexture;\n  var uniforms = {};\n  var width;\n  var height;\n\n  if (targetTextureVarying) {\n    width = targetTexture.width;\n    height = targetTexture.height;\n    uniforms[\"\".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying)] = [width, height];\n  }\n\n  for (var textureName in sourceTextureMap) {\n    var _sourceTextureMap$tex = sourceTextureMap[textureName];\n    width = _sourceTextureMap$tex.width;\n    height = _sourceTextureMap$tex.height;\n    uniforms[\"\".concat(SIZE_UNIFORM_PREFIX).concat(textureName)] = [width, height];\n  }\n\n  return uniforms;\n}\n\nfunction getAttributeDefinition(line) {\n  return (0, _shadertools.getQualifierDetails)(line, ['attribute', 'in']);\n}\n\nfunction getSamplerDeclerations(textureName) {\n  var samplerName = \"\".concat(SAMPLER_UNIFORM_PREFIX).concat(textureName);\n  var sizeName = \"\".concat(SIZE_UNIFORM_PREFIX).concat(textureName);\n  var uniformDeclerations = \"  uniform sampler2D \".concat(samplerName, \";\\n  uniform vec2 \").concat(sizeName, \";\");\n  return {\n    samplerName: samplerName,\n    sizeName: sizeName,\n    uniformDeclerations: uniformDeclerations\n  };\n}\n\nfunction getVaryingType(line, varying) {\n  var qualaiferDetails = (0, _shadertools.getQualifierDetails)(line, ['varying', 'out']);\n\n  if (!qualaiferDetails) {\n    return null;\n  }\n\n  return qualaiferDetails.name === varying ? qualaiferDetails.type : null;\n}\n\nfunction processAttributeDefinition(line, textureMap) {\n  var samplerTextureMap = {};\n  var attributeData = getAttributeDefinition(line);\n\n  if (!attributeData) {\n    return null;\n  }\n\n  var type = attributeData.type,\n      name = attributeData.name;\n\n  if (name && textureMap[name]) {\n    var updatedLine = \"// \".concat(line, \" => Replaced by Transform with a sampler\");\n\n    var _getSamplerDecleratio = getSamplerDeclerations(name),\n        samplerName = _getSamplerDecleratio.samplerName,\n        sizeName = _getSamplerDecleratio.sizeName,\n        uniformDeclerations = _getSamplerDecleratio.uniformDeclerations;\n\n    var channels = (0, _shadertools.typeToChannelSuffix)(type);\n    var sampleInstruction = \"  \".concat(type, \" \").concat(name, \" = transform_getInput(\").concat(samplerName, \", \").concat(sizeName, \").\").concat(channels, \";\\n\");\n    samplerTextureMap[samplerName] = name;\n    var inject = {\n      'vs:#decl': uniformDeclerations,\n      'vs:#main-start': sampleInstruction\n    };\n    return {\n      updatedLine: updatedLine,\n      inject: inject,\n      samplerTextureMap: samplerTextureMap\n    };\n  }\n\n  return null;\n}\n//# sourceMappingURL=transform-shader-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getVaryingType","line","varying","qualaiferDetails","_shadertools","getQualifierDetails","name","type","processAttributeDefinition","textureMap","samplerTextureMap","attributeData","updatedLine","concat","samplerName","SAMPLER_UNIFORM_PREFIX","sizeName","SIZE_UNIFORM_PREFIX","uniformDeclerations","channels","typeToChannelSuffix","sampleInstruction","inject","Object","defineProperty","value","updateForTextures","_ref","vs","sourceTextureMap","targetTextureVarying","targetTexture","sourceCount","texAttributeNames","keys","length","targetTextureType","finalInject","vsLines","updatedVs","split","updateVsLines","slice","forEach","index","lines","updated","combineInjects","assign","_webgl","assert","uniformDeclaration","posInstructions","VS_POS_VARIABLE","join","getSizeUniforms","_ref2","uniforms","width","height","textureName","_sourceTextureMap$tex"]
}
