shadow$provide.module$node_modules$$deck_DOT_gl$core$dist$es5$controllers$controller=function(global,require,module,exports){function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=
null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2["default"])(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,
"__esModule",{value:!0});exports["default"]=void 0;var _defineProperty2=global(require("module$node_modules$$babel$runtime$helpers$defineProperty")),_classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_transitionManager=global(require("module$node_modules$$deck_DOT_gl$core$dist$es5$controllers$transition_manager")),_assert=global(require("module$node_modules$$deck_DOT_gl$core$dist$es5$utils$assert")),
NO_TRANSITION_PROPS={transitionDuration:0},INERTIA_EASING=function(t){return 1-(1-t)*(1-t)},JSCompiler_object_inline_WHEEL_4436=["wheel"],JSCompiler_object_inline_PAN_4437=["panstart","panmove","panend"],JSCompiler_object_inline_PINCH_4438=["pinchstart","pinchmove","pinchend"],JSCompiler_object_inline_TRIPLE_PAN_4439=["tripanstart","tripanmove","tripanend"],JSCompiler_object_inline_DOUBLE_TAP_4440=["doubletap"],JSCompiler_object_inline_KEYBOARD_4441=["keydown"];require=function(){function Controller(ControllerState){var options=
1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};(0,_classCallCheck2["default"])(this,Controller);(0,_assert["default"])(ControllerState);this.ControllerState=ControllerState;this.eventManager=this.controllerStateProps=this.controllerState=null;this.transitionManager=new _transitionManager["default"](ControllerState,_objectSpread(_objectSpread({},options),{},{onViewStateChange:this._onTransition.bind(this),onStateChange:this._setInteractionState.bind(this)}));this._events=null;this._interactionState=
{isDragging:!1};this._customEvents=[];this.onStateChange=this.onViewStateChange=null;this.handleEvent=this.handleEvent.bind(this);this.setProps(options)}(0,_createClass2["default"])(Controller,[{key:"finalize",value:function(){for(var eventName in this._events)this._events[eventName]&&this.eventManager.off(eventName,this.handleEvent);this.transitionManager.finalize()}},{key:"handleEvent",value:function(event){this.controllerState=new this.ControllerState(_objectSpread(_objectSpread({makeViewport:this.makeViewport},
this.controllerStateProps),this._state));var eventStartBlocked=this._eventStartBlocked;switch(event.type){case "panstart":return eventStartBlocked?!1:this._onPanStart(event);case "panmove":return this._onPan(event);case "panend":return this._onPanEnd(event);case "pinchstart":return eventStartBlocked?!1:this._onPinchStart(event);case "pinchmove":return this._onPinch(event);case "pinchend":return this._onPinchEnd(event);case "tripanstart":return eventStartBlocked?!1:this._onTriplePanStart(event);case "tripanmove":return this._onTriplePan(event);
case "tripanend":return this._onTriplePanEnd(event);case "doubletap":return this._onDoubleTap(event);case "wheel":return this._onWheel(event);case "keydown":return this._onKeyDown(event);default:return!1}}},{key:"getCenter",value:function(event){var _this$controllerState=this.controllerStateProps;event=event.offsetCenter;return[event.x-_this$controllerState.x,event.y-_this$controllerState.y]}},{key:"isPointInBounds",value:function(pos,event){var _this$controllerState2=this.controllerStateProps,width=
_this$controllerState2.width;_this$controllerState2=_this$controllerState2.height;if(event&&event.handled)return!1;(pos=0<=pos[0]&&pos[0]<=width&&0<=pos[1]&&pos[1]<=_this$controllerState2)&&event&&event.stopPropagation();return pos}},{key:"isFunctionKeyPressed",value:function(event){event=event.srcEvent;return!!(event.metaKey||event.altKey||event.ctrlKey||event.shiftKey)}},{key:"isDragging",value:function(){return this._interactionState.isDragging}},{key:"blockEvents",value:function(timeout){var _this=
this,timer=setTimeout(function(){_this._eventStartBlocked===timer&&(_this._eventStartBlocked=null)},timeout);this._eventStartBlocked=timer}},{key:"setProps",value:function(props){"onViewStateChange"in props&&(this.onViewStateChange=props.onViewStateChange);"onStateChange"in props&&(this.onStateChange=props.onStateChange);"makeViewport"in props&&(this.makeViewport=props.makeViewport);"dragMode"in props&&(this.dragMode=props.dragMode);this.controllerStateProps=props;"eventManager"in props&&this.eventManager!==
props.eventManager&&(this.eventManager=props.eventManager,this._events={},this.toggleEvents(this._customEvents,!0));"transitionInterpolator"in props||(props.transitionInterpolator=this._getTransitionProps().transitionInterpolator);this.transitionManager.processViewStateChange(props);var inertia=props.inertia;!0===inertia&&(inertia=300);this.inertia=inertia;inertia=props.scrollZoom;inertia=void 0===inertia?!0:inertia;var _props$dragPan=props.dragPan;_props$dragPan=void 0===_props$dragPan?!0:_props$dragPan;
var _props$dragRotate=props.dragRotate;_props$dragRotate=void 0===_props$dragRotate?!0:_props$dragRotate;var _props$doubleClickZoo=props.doubleClickZoom;_props$doubleClickZoo=void 0===_props$doubleClickZoo?!0:_props$doubleClickZoo;var _props$touchZoom=props.touchZoom;_props$touchZoom=void 0===_props$touchZoom?!0:_props$touchZoom;var _props$touchRotate=props.touchRotate;_props$touchRotate=void 0===_props$touchRotate?!1:_props$touchRotate;props=props.keyboard;props=void 0===props?!0:props;var isInteractive=
!!this.onViewStateChange;this.toggleEvents(JSCompiler_object_inline_WHEEL_4436,isInteractive&&inertia);this.toggleEvents(JSCompiler_object_inline_PAN_4437,isInteractive&&(_props$dragPan||_props$dragRotate));this.toggleEvents(JSCompiler_object_inline_PINCH_4438,isInteractive&&(_props$touchZoom||_props$touchRotate));this.toggleEvents(JSCompiler_object_inline_TRIPLE_PAN_4439,isInteractive&&_props$touchRotate);this.toggleEvents(JSCompiler_object_inline_DOUBLE_TAP_4440,isInteractive&&_props$doubleClickZoo);
this.toggleEvents(JSCompiler_object_inline_KEYBOARD_4441,isInteractive&&props);this.scrollZoom=inertia;this.dragPan=_props$dragPan;this.dragRotate=_props$dragRotate;this.doubleClickZoom=_props$doubleClickZoo;this.touchZoom=_props$touchZoom;this.touchRotate=_props$touchRotate;this.keyboard=props}},{key:"updateTransition",value:function(){this.transitionManager.updateTransition()}},{key:"toggleEvents",value:function(eventNames,enabled){var _this2=this;this.eventManager&&eventNames.forEach(function(eventName){if(_this2._events[eventName]!==
enabled)if(_this2._events[eventName]=enabled)_this2.eventManager.on(eventName,_this2.handleEvent);else _this2.eventManager.off(eventName,_this2.handleEvent)})}},{key:"updateViewport",value:function(newControllerState){var extraProps=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},interactionState=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};extraProps=Object.assign({},newControllerState.getViewportProps(),extraProps);var changed=this.controllerState!==newControllerState;this._state=
newControllerState.getState();this._setInteractionState(interactionState);if(changed&&(interactionState=this.controllerState?this.controllerState.getViewportProps():null,this.onViewStateChange))this.onViewStateChange({viewState:extraProps,interactionState:this._interactionState,oldViewState:interactionState})}},{key:"_onTransition",value:function(params){this.onViewStateChange&&(params.interactionState=this._interactionState,this.onViewStateChange(params))}},{key:"_setInteractionState",value:function(newStates){Object.assign(this._interactionState,
newStates);if(this.onStateChange)this.onStateChange(this._interactionState)}},{key:"_onPanStart",value:function(event){var pos=this.getCenter(event);if(!this.isPointInBounds(pos,event))return!1;event=this.isFunctionKeyPressed(event)||event.rightButton;if(this.invertPan||"pan"===this.dragMode)event=!event;pos=this.controllerState[event?"panStart":"rotateStart"]({pos});this._panMove=event;this.updateViewport(pos,NO_TRANSITION_PROPS,{isDragging:!0});return!0}},{key:"_onPan",value:function(event){return this.isDragging()?
this._panMove?this._onPanMove(event):this._onPanRotate(event):!1}},{key:"_onPanEnd",value:function(event){return this.isDragging()?this._panMove?this._onPanMoveEnd(event):this._onPanRotateEnd(event):!1}},{key:"_onPanMove",value:function(event){if(!this.dragPan)return!1;event=this.getCenter(event);event=this.controllerState.pan({pos:event});this.updateViewport(event,NO_TRANSITION_PROPS,{isDragging:!0,isPanning:!0});return!0}},{key:"_onPanMoveEnd",value:function(event){var inertia=this.inertia;if(this.dragPan&&
inertia&&event.velocity){var pos=this.getCenter(event);event=this.controllerState.pan({pos:[pos[0]+event.velocityX*inertia/2,pos[1]+event.velocityY*inertia/2]}).panEnd();this.updateViewport(event,_objectSpread(_objectSpread({},this._getTransitionProps()),{},{transitionDuration:inertia,transitionEasing:INERTIA_EASING}),{isDragging:!1,isPanning:!0})}else inertia=this.controllerState.panEnd(),this.updateViewport(inertia,null,{isDragging:!1,isPanning:!1});return!0}},{key:"_onPanRotate",value:function(event){if(!this.dragRotate)return!1;
event=this.getCenter(event);event=this.controllerState.rotate({pos:event});this.updateViewport(event,NO_TRANSITION_PROPS,{isDragging:!0,isRotating:!0});return!0}},{key:"_onPanRotateEnd",value:function(event){var inertia=this.inertia;if(this.dragRotate&&inertia&&event.velocity){var pos=this.getCenter(event);event=this.controllerState.rotate({pos:[pos[0]+event.velocityX*inertia/2,pos[1]+event.velocityY*inertia/2]}).rotateEnd();this.updateViewport(event,_objectSpread(_objectSpread({},this._getTransitionProps()),
{},{transitionDuration:inertia,transitionEasing:INERTIA_EASING}),{isDragging:!1,isRotating:!0})}else inertia=this.controllerState.rotateEnd(),this.updateViewport(inertia,null,{isDragging:!1,isRotating:!1});return!0}},{key:"_onWheel",value:function(event){if(!this.scrollZoom)return!1;event.preventDefault();var pos=this.getCenter(event);if(!this.isPointInBounds(pos,event))return!1;var _this$scrollZoom=this.scrollZoom,_this$scrollZoom$spee=_this$scrollZoom.speed;_this$scrollZoom=_this$scrollZoom.smooth;
_this$scrollZoom=void 0===_this$scrollZoom?!1:_this$scrollZoom;event=event.delta;_this$scrollZoom$spee=2/(1+Math.exp(-Math.abs(event*(void 0===_this$scrollZoom$spee?.01:_this$scrollZoom$spee))));0>event&&0!==_this$scrollZoom$spee&&(_this$scrollZoom$spee=1/_this$scrollZoom$spee);_this$scrollZoom$spee=this.controllerState.zoom({pos,scale:_this$scrollZoom$spee});this.updateViewport(_this$scrollZoom$spee,_objectSpread(_objectSpread({},this._getTransitionProps({around:pos})),{},{transitionDuration:_this$scrollZoom?
250:1}),{isZooming:!0,isPanning:!0});return!0}},{key:"_onTriplePanStart",value:function(event){var pos=this.getCenter(event);if(!this.isPointInBounds(pos,event))return!1;event=this.controllerState.rotateStart({pos});this.updateViewport(event,NO_TRANSITION_PROPS,{isDragging:!0});return!0}},{key:"_onTriplePan",value:function(event){if(!this.touchRotate||!this.isDragging())return!1;var pos=this.getCenter(event);pos[0]-=event.deltaX;event=this.controllerState.rotate({pos});this.updateViewport(event,NO_TRANSITION_PROPS,
{isDragging:!0,isRotating:!0});return!0}},{key:"_onTriplePanEnd",value:function(event){if(!this.isDragging())return!1;var inertia=this.inertia;if(this.touchRotate&&inertia&&event.velocityY){var pos=this.getCenter(event);event=[pos[0],pos[1]+=event.velocityY*inertia/2];event=this.controllerState.rotate({pos:event});this.updateViewport(event,_objectSpread(_objectSpread({},this._getTransitionProps()),{},{transitionDuration:inertia,transitionEasing:INERTIA_EASING}),{isDragging:!1,isRotating:!0});this.blockEvents(inertia)}else inertia=
this.controllerState.rotateEnd(),this.updateViewport(inertia,null,{isDragging:!1,isRotating:!1});return!0}},{key:"_onPinchStart",value:function(event){var pos=this.getCenter(event);if(!this.isPointInBounds(pos,event))return!1;pos=this.controllerState.zoomStart({pos}).rotateStart({pos});this._startPinchRotation=event.rotation;this._lastPinchEvent=event;this.updateViewport(pos,NO_TRANSITION_PROPS,{isDragging:!0});return!0}},{key:"_onPinch",value:function(event){if(!this.touchZoom&&!this.touchRotate||
!this.isDragging())return!1;var newControllerState=this.controllerState;if(this.touchZoom){var scale=event.scale,pos=this.getCenter(event);newControllerState=newControllerState.zoom({pos,scale})}this.touchRotate&&(newControllerState=newControllerState.rotate({deltaAngleX:this._startPinchRotation-event.rotation}));this.updateViewport(newControllerState,NO_TRANSITION_PROPS,{isDragging:!0,isPanning:this.touchZoom,isZooming:this.touchZoom,isRotating:this.touchRotate});this._lastPinchEvent=event;return!0}},
{key:"_onPinchEnd",value:function(event){if(!this.isDragging())return!1;var inertia=this.inertia,_lastPinchEvent=this._lastPinchEvent;if(this.touchZoom&&inertia&&_lastPinchEvent&&event.scale!==_lastPinchEvent.scale){var pos=this.getCenter(event),newControllerState=this.controllerState.rotateEnd(),z=Math.log2(event.scale);newControllerState=newControllerState.zoom({pos,scale:Math.pow(2,z+(z-Math.log2(_lastPinchEvent.scale))/(event.deltaTime-_lastPinchEvent.deltaTime)*inertia/2)}).zoomEnd();this.updateViewport(newControllerState,
_objectSpread(_objectSpread({},this._getTransitionProps({around:pos})),{},{transitionDuration:inertia,transitionEasing:INERTIA_EASING}),{isDragging:!1,isPanning:this.touchZoom,isZooming:this.touchZoom,isRotating:!1});this.blockEvents(inertia)}else event=this.controllerState.zoomEnd().rotateEnd(),this.updateViewport(event,null,{isDragging:!1,isPanning:!1,isZooming:!1,isRotating:!1});this._lastPinchEvent=this._startPinchRotation=null;return!0}},{key:"_onDoubleTap",value:function(event){if(!this.doubleClickZoom)return!1;
var pos=this.getCenter(event);if(!this.isPointInBounds(pos,event))return!1;event=this.isFunctionKeyPressed(event);event=this.controllerState.zoom({pos,scale:event?.5:2});this.updateViewport(event,this._getTransitionProps({around:pos}),{isZooming:!0,isPanning:!0});this.blockEvents(100);return!0}},{key:"_onKeyDown",value:function(event){if(!this.keyboard)return!1;var funcKey=this.isFunctionKeyPressed(event),_this$keyboard=this.keyboard,zoomSpeed=_this$keyboard.zoomSpeed,moveSpeed=_this$keyboard.moveSpeed,
rotateSpeedX=_this$keyboard.rotateSpeedX,rotateSpeedY=_this$keyboard.rotateSpeedY,controllerState=this.controllerState;_this$keyboard={};switch(event.srcEvent.code){case "Minus":event=funcKey?controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed):controllerState.zoomOut(zoomSpeed);_this$keyboard.isZooming=!0;break;case "Equal":event=funcKey?controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed):controllerState.zoomIn(zoomSpeed);_this$keyboard.isZooming=!0;break;case "ArrowLeft":funcKey?(event=controllerState.rotateLeft(rotateSpeedX),
_this$keyboard.isRotating=!0):(event=controllerState.moveLeft(moveSpeed),_this$keyboard.isPanning=!0);break;case "ArrowRight":funcKey?(event=controllerState.rotateRight(rotateSpeedX),_this$keyboard.isRotating=!0):(event=controllerState.moveRight(moveSpeed),_this$keyboard.isPanning=!0);break;case "ArrowUp":funcKey?(event=controllerState.rotateUp(rotateSpeedY),_this$keyboard.isRotating=!0):(event=controllerState.moveUp(moveSpeed),_this$keyboard.isPanning=!0);break;case "ArrowDown":funcKey?(event=controllerState.rotateDown(rotateSpeedY),
_this$keyboard.isRotating=!0):(event=controllerState.moveDown(moveSpeed),_this$keyboard.isPanning=!0);break;default:return!1}this.updateViewport(event,this._getTransitionProps(),_this$keyboard);return!0}},{key:"_getTransitionProps",value:function(){return NO_TRANSITION_PROPS}},{key:"events",set:function(customEvents){this.toggleEvents(this._customEvents,!1);this.toggleEvents(customEvents,!0);this._customEvents=customEvents;this.setProps(this.controllerStateProps)}}]);return Controller}();exports["default"]=
require}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$core$dist$es5$controllers$controller.js.map
