{"version":3,"sources":["org/browjure/codemirror/base.cljs"],"mappings":";;;AAQA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA4CS;AAA5C,AAAAL,AAAAJ,AAAA,AAAuBM;AAAvB,AAAAF,AAAAJ,AAAA,AAA0BO;AAA1B,AAAAH,AAAAJ,AAAA,AAA+BQ;AAA/B,AACE,AAAM,AAAA,AAACE,AAAEH;AAAT,AAEE,AAAA,AAAA,AAAA,AAAA,AAACI,AAAMC,AAASC,AACTC,AAAqBC;;AAH9B;;AAIA,AAAA,AAACC,AAA8CP","names":["p__83131","map__83132","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","org.browjure.codemirror.base/handler","id","type","payload","command","cljs.core._EQ_","cljs.core.swap_BANG_","org.browjure.base/registry","cljs.core/update","cljs.core/merge","js/module$node_modules$codemirror$lib$codemirror.fromTextArea","js/console.log"],"sourcesContent":["(ns org.browjure.codemirror.base\n  (:require\n   [org.browjure.base :refer [registry]]\n   [\"codemirror\" :as cm]\n   [\"codemirror/mode/clojure/clojure\"]\n   [helix.core :refer [$ defnc <>]]\n   ))\n\n(defn handler [{:keys [id type payload] :as command}]\n  (when (= type\n           :register-plugin)\n    (swap! registry update :bindings\n           merge {'fromTextArea cm/fromTextArea}))\n  (js/console.log \"codemirror handler command: \" command))\n"]}