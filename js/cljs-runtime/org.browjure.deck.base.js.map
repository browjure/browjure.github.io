{"version":3,"sources":["org/browjure/deck/base.cljs"],"mappings":"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","names":["org.browjure.deck.base/mapbox-token","cljs.core.atom","org.browjure.deck.base/active-layers","org.browjure.deck.base/assoc-cljs-data","o","data","goog.object/set","cljs.core/to-array","var_args","G__80829","org.browjure.deck.base/set-tooltip","js/Error","p__80832","vec__80839","cljs.core.nth","p__80842","p__80843","vec__80845","map__80848","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","x","y","label","org.browjure.deck.base.set_tooltip","font-color","tooltip","js/document","el","new-el","org.browjure.deck.base/window-resolve","symbol","p1__80857#","p2__80858#","cljs.core.reduce","helix.core/get-react","helix.impl.props/merge-obj","obj81207","helix.impl.props._native_props","js/window","cljs.core.conj","clojure.string.split","clojure.string/replace","cljs.core/namespace","cljs.core/name","p__80882","vec__80884","org.browjure.deck.base/set-hiccup-tooltip","hiccup","js/module$node_modules$react_dom$server_browser.renderToStaticMarkup","org.browjure.deck.base/compile-and-add-layer","layer-props","compiled-layer-props","cljs.core.doall","cljs.core.keep","p__80920","vec__80925","k","v","cognitect.transit/tagged-value?","sci.core.eval_string","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.pr_str","js/console.log","p__80933","map__80934","fp64","filter-size","js/module$node_modules$$deck_DOT_gl$extensions$dist$es5$index.DataFilterExtension","cljs.core.into","uses-functions?","cljs.core/some","p__80943","vec__80948","cljs.core.swap_BANG_","cljs.core/assoc","G__80952","org.browjure.deck.layers/key->class","cljs-bean.core/->js","cljs.core.merge","org.browjure.deck.base/rerender","G__80954","js/org","js/org.browjure","js/org.browjure.deck","js/org.browjure.deck.base","js/org.browjure.deck.base.default-view-state","org.browjure.deck.base/default-view-state","cljs.core/clj->js","goog.object/get","js/module$node_modules$react_dom$index.render","org.browjure.deck.layers/deck","cljs.core/deref","cljs.core/vals","org.browjure.deck.layers/static-map","p__80969","map__80970","org.browjure.deck.base/handler","id","type","payload","command","G__80974","cljs.core/Keyword","cljs.core/reset!","org.browjure.base/registry","cljs.core/update","cljs.core/merge","cljs.core.map","p__80978","vec__80979","key","class","cljs.core.symbol","p__80982","map__80983","cljs.core/dissoc","org.browjure.deck.base/compile","form","p__80985","map__80986","org.browjure.state/set-path-value","org.browjure.deck.base/compile-layer-props","p__80988","vec__80989","p__80992","map__80993","p__80995","vec__80996","G__80999","G__81000","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","org.browjure.deck.base/embed-component","seq81001","self__4724__auto__","config-or-layers","layers","cljs.core.filter","config","or__4126__auto__","cljs.core/identity","cljs.core/map?","c","G__81007","props__66390__auto__","maybe-ref__66391__auto__","vec__81008","helix.core/extract-cljs-props","goog/DEBUG","G__81212","org.browjure.deck.base/deck-component","props","map__81011","use-path-sub","dep-values","p__81012","vec__81013","dep-name","dep-path","view-state","G__81017","data->layers","container-props-fn","container-props","cljs.core.mapcat","p__81208","vec__81209","layer-type","layer","cljs.core.assoc"],"sourcesContent":["(ns org.browjure.deck.base\n  (:require\n   [org.browjure.state :refer [set-path-value]]\n   [org.browjure.base :refer [registry]]\n   [org.browjure.deck.layers :as layers :refer [key->class]]\n   [\"@deck.gl/extensions\" :refer [DataFilterExtension]]\n   [react :as react]\n   [react-dom :refer [render]]\n   [\"react-dom/server\" :as ReactDOMServer]\n   [goog.object :as gobj]\n   [cognitect.transit :as transit]\n   [cljs-bean.core :refer [bean ->clj ->js]]\n   [helix.core :refer [$ defnc <>]]\n   [helix.dom :refer [div]]\n   [sci.core :as sci]))\n\n(def mapbox-token (atom nil))\n\n(def active-layers (atom {}))\n\n(declare rerender)\n\n(defn assoc-cljs-data [o data]\n  (gobj/set o \"data\" (to-array data))\n  o)\n\n(defn set-tooltip\n  ([[x y] label] (set-tooltip [x y] label {}))\n  ([[x y] label {:keys [font-color]\n                 :or {font-color \"white\"}}]\n   (let [tooltip (.getElementById js/document \"tooltip\")\n         el (if tooltip\n              tooltip\n              (let [new-el (.createElement js/document \"div\")]\n                (.setAttribute new-el \"id\" \"tooltip\")\n                (.append (.-body js/document) new-el)\n                new-el))]\n     (if label\n       (do (set! (.-innerHTML el) label)\n           (set! (.. el -style -display) \"block\")\n           (set! (.. el -style -position) \"absolute\")\n           (set! (.. el -style -zIndex) 10)\n           (set! (.. el -style -left) (str (+ x 20) \"px\"))\n           (set! (.. el -style -top) (str (+ y 20) \"px\"))\n           (set! (.. el -style -color) font-color))\n       (set! (.. el -style -display) \"none\")))))\n\n(defn window-resolve [symbol]\n  (reduce #(aget %1 %2)\n          js/window\n          (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                      \".\")\n                (clojure.string/replace (name symbol) \"-\" \"_\"))))\n\n(defn set-hiccup-tooltip [[x y] hiccup]\n  (let [tooltip (.getElementById js/document \"tooltip\")\n        el (if tooltip\n             tooltip\n             (let [new-el (.createElement js/document \"div\")]\n               (.setAttribute new-el \"id\" \"tooltip\")\n               (.append (.-body js/document) new-el)\n               new-el))]\n    (if hiccup\n      (do (set! (.-innerHTML el)\n                (ReactDOMServer/renderToStaticMarkup\n                 (apply (window-resolve 'sablono.interpreter/element) [hiccup])))\n          (set! (.. el -style -display) \"block\")\n          (set! (.. el -style -position) \"absolute\")\n          (set! (.. el -style -zIndex) 10)\n          (set! (.. el -style -left) (str (+ x 20) \"px\"))\n          (set! (.. el -style -top) (str (+ y 20) \"px\")))\n      (set! (.. el -style -display) \"none\"))))\n\n(defn compile-and-add-layer [layer-props]\n  (let [compiled-layer-props\n        (doall (->> layer-props\n                    (keep (fn [[k v]]\n                            (when (transit/tagged-value? v)\n                              [k (sci/eval-string\n                                  (pr-str `(comp clj->js ~(aget v \"rep\")))\n                                  {:bindings {'js/console.log js/console.log\n                                              'js/document    js/document\n                                              'data-filter (fn [{:keys [fp64 filter-size]}]\n                                                             (DataFilterExtension. #js {:filterSize filter-size :fp64 fp64}))\n                                              'DataFilterExtension DataFilterExtension\n                                              'set-tooltip    set-tooltip\n                                              'set-hiccup-tooltip set-hiccup-tooltip}\n                                   :classes {:allow :all}})])))\n                    (into {})))\n        uses-functions? (some (fn [[k v]]\n                                (transit/tagged-value? v))\n                              layer-props)]\n    (if uses-functions?\n      (do (swap! active-layers assoc (:id layer-props)\n                 (apply (key->class (:layer-type layer-props))\n                        [(if (get #{:geo-json-layer} (:layer-type layer-props))\n                           (->js (merge layer-props compiled-layer-props))\n                           (assoc-cljs-data (->js (merge layer-props compiled-layer-props))\n\n                                            (:data layer-props)))]))\n          (rerender))\n      (do (swap! active-layers assoc (:id layer-props)\n                 (apply (key->class (:layer-type layer-props))\n                        [(->js layer-props)]))\n          (rerender)))))\n\n(defonce default-view-state\n  (clj->js\n   {:latitude 37.618889\n    :longitude -122.375\n    :zoom   10\n    :bearing 0\n    :pitch  0\n    :width  (gobj/get js/window \"innerWidth\")\n    :height (gobj/get js/window \"innerHeight\")}))\n\n(defn rerender []\n  (render\n   (layers/deck\n    {:key \"deck\"\n     :controller true\n     :pickingRadius 10\n     :initialViewState default-view-state\n     :layers (to-array (vals @active-layers))\n     :children [(when @mapbox-token\n                  (layers/static-map\n                   {:key \"map\"\n                    :mapboxApiAccessToken @mapbox-token\n                    :reuseMaps true\n                    :mapStyle \"mapbox://styles/mapbox/dark-v9\"\n                    :preventStyleDiffing true}))]})\n   (. js/document getElementById \"app\")))\n\n(defn handler [{:keys [id type payload] :as command}]\n  (js/console.log \"deck handler command: \" command)\n  (case type\n    :mapbox-token (when-not @mapbox-token\n                    (reset! mapbox-token payload))\n    :register-plugin (do\n                       (swap! registry update :bindings\n                              merge (merge (into {}\n                                                 (map (fn [[key class]]\n                                                        [(symbol \"org.browjure.deck.layers\"\n                                                                 (name key)) class])\n                                                      key->class))\n                                           {'org.browjure.deck.layers/deck org.browjure.deck.layers/deck\n                                            'org.browjure.deck.layers/static-map org.browjure.deck.layers/static-map\n                                            'js/console.log js/console.log\n                                            'js/document    js/document\n                                            'data-filter (fn [{:keys [fp64 filter-size]}]\n                                                           (DataFilterExtension. #js {:filterSize filter-size :fp64 fp64}))\n                                            'DataFilterExtension DataFilterExtension\n                                            'set-tooltip set-tooltip\n                                            'set-hiccup-tooltip set-hiccup-tooltip}))\n                       (when (:mapbox-token payload) (reset! mapbox-token (:mapbox-token payload))))\n    :visualize (do (compile-and-add-layer payload)\n                   (rerender))\n    :erase (do (swap! active-layers dissoc payload)\n               (rerender))))\n\n(defn compile [form]\n  (sci/eval-string\n   (pr-str form)\n   {:bindings {'js/console.log js/console.log\n               'js/document    js/document\n               'set-tooltip set-tooltip\n               'data-filter (fn [{:keys [fp64 filter-size]}]\n                              (DataFilterExtension. #js {:filterSize filter-size :fp64 fp64}))\n               'DataFilterExtension DataFilterExtension\n               'set-path-value set-path-value}\n    :classes {:allow :all}}))\n\n(defn compile-layer-props [layer-props]\n  (let [compiled-layer-props\n        (doall (->> layer-props\n                    (keep (fn [[k v]]\n                            (when (transit/tagged-value? v)\n                              [k (sci/eval-string\n                                  (pr-str `(comp clj->js ~(aget v \"rep\")))\n                                  {:bindings {'js/console.log js/console.log\n                                              'js/document    js/document\n                                              'data-filter (fn [{:keys [fp64 filter-size]}]\n                                                             (DataFilterExtension. #js {:filterSize filter-size :fp64 fp64}))\n                                              'DataFilterExtension DataFilterExtension\n                                              'set-tooltip set-tooltip\n                                              'set-path-value set-path-value}\n                                   :classes {:allow :all}})])))\n                    (into {})))\n        uses-functions? (some (fn [[k v]]\n                                (transit/tagged-value? v))\n                              layer-props)]\n    (if uses-functions?\n      (apply (key->class (:layer-type layer-props))\n             [(if (get #{:geo-json-layer} (:layer-type layer-props))\n                (->js (merge layer-props compiled-layer-props))\n                (assoc-cljs-data (->js (merge layer-props compiled-layer-props))\n                                 (:data layer-props)))])\n      (apply (key->class (:layer-type layer-props))\n             [(->js layer-props)]))))\n\n(defn embed-component [& config-or-layers]\n  (let [layers (filter :layer-type config-or-layers)\n        config (or (some identity (filter map? config-or-layers)) {})]\n    [:div\n     (merge {:style {:width \"600px\" :height \"600px\"}\n             :ref (fn [c]\n                    (when c\n                      (render\n                       (layers/deck\n                        {:key \"deck\"\n                         :style {:position \"relative\"}\n                         :controller true\n                         :container c\n                         :pickingRadius 10\n                         :initialViewState (or (:initial-view-state config) default-view-state)\n                         :layers (to-array (map compile-layer-props layers))\n                         :children [(when (or @mapbox-token (:mapbox-token config))\n                                      (layers/static-map\n                                       {:key \"map\"\n                                        :mapboxApiAccessToken (or @mapbox-token (:mapbox-token config))\n                                        :reuseMaps true\n                                        :mapStyle \"mapbox://styles/mapbox/dark-v9\"\n                                        :preventStyleDiffing true}))]})\n                       c)))}\n            (:container-props config))]))\n\n(defnc deck-component [props]\n  (let [use-path-sub (window-resolve 'org.browjure.state/use-path-sub)\n        dep-values (doall (->> (:dataset/dependencies props)\n                               (map (fn [[dep-name dep-path]]\n                                      [dep-name (use-path-sub dep-path)]))\n                               (into {})))\n        view-state (use-path-sub [:view-state])\n        {:deck/keys [data->layers]} props\n        data->layers (compile (aget data->layers \"rep\"))\n        container-props-fn (if (:container-props-fn props)\n                             (compile (aget (:container-props-fn props) \"rep\"))\n                             (fn [] {}))\n        container-props (merge (:container-props props)\n                               (container-props-fn dep-values))]\n    ($ \"div\"\n       {:key (str \"deck\" (:id props))\n        :ref (fn [c]\n               (when c\n                 (render\n                  (layers/deck\n                   {:key \"deck\"\n                    :style {:position \"relative\"}\n                    :controller true\n                    :container c\n                    :pickingRadius 10\n                    :initialViewState (or (clj->js view-state)\n                                          (:initial-view-state props)\n                                          default-view-state)\n                    :layers (->> (data->layers dep-values)\n                                 (mapcat (fn [[layer-type layers]]\n                                           (doall\n                                            (map (fn [layer]\n                                                   (compile-layer-props\n                                                    (assoc layer :layer-type layer-type)))\n                                                 layers))))\n                                 to-array)\n                    :children [(when (or @mapbox-token (:mapbox-token props))\n                                 (layers/static-map\n                                  {:key \"map\"\n                                   :mapboxApiAccessToken (or @mapbox-token (:mapbox-token props))\n                                   :reuseMaps true\n                                   :mapStyle \"mapbox://styles/mapbox/dark-v9\"\n                                   :preventStyleDiffing true}))]})\n                  c)))\n        & container-props})))\n"]}