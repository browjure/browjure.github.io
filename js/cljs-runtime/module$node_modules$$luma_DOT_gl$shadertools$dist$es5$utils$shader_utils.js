shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$utils$shader_utils=function(global,require,module,exports){function convertToVec4(variable,type){switch(type){case "float":return"vec4(".concat(variable,", 0.0, 0.0, 1.0)");case "vec2":return"vec4(".concat(variable,", 0.0, 1.0)");case "vec3":return"vec4(".concat(variable,", 1.0)");case "vec4":return variable;default:return(0,_utils.assert)(!1),null}}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
Object.defineProperty(exports,"__esModule",{value:!0});exports.getQualifierDetails=function(line,qualifiers){qualifiers=Array.isArray(qualifiers)?qualifiers:[qualifiers];line=line.replace(/^\s+/,"").split(/\s+/);var _words=(0,_slicedToArray2["default"])(line,3);line=_words[0];var type=_words[1];_words=_words[2];if(!qualifiers.includes(line)||!type||!_words)return null;qualifiers=_words.split(";")[0];return{qualifier:line,type,name:qualifiers}};exports.getPassthroughFS=function(){var options=0<arguments.length&&
void 0!==arguments[0]?arguments[0]:{},_options$version=options.version;_options$version=void 0===_options$version?100:_options$version;var input=options.input,inputType=options.inputType;options=options.output;if(!input)return 300===_options$version?FS300:300<_options$version?"#version ".concat(_options$version,"\n").concat(FS_GLES):FS100;var outputValue=convertToVec4(input,inputType);return 300<=_options$version?"#version ".concat(_options$version," ").concat(300===_options$version?"es":"","\nin ").concat(inputType,
" ").concat(input,";\nout vec4 ").concat(options,";\nvoid main() {\n  ").concat(options," \x3d ").concat(outputValue,";\n}"):"varying ".concat(inputType," ").concat(input,";\nvoid main() {\n  gl_FragColor \x3d ").concat(outputValue,";\n}")};exports.typeToChannelSuffix=function(type){switch(type){case "float":return"x";case "vec2":return"xy";case "vec3":return"xyz";case "vec4":return"xyzw";default:return(0,_utils.assert)(!1),null}};exports.typeToChannelCount=function(type){switch(type){case "float":return 1;
case "vec2":return 2;case "vec3":return 3;case "vec4":return 4;default:return(0,_utils.assert)(!1),null}};exports.convertToVec4=convertToVec4;var _slicedToArray2=global(require("module$node_modules$$babel$runtime$helpers$slicedToArray")),_utils=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$utils$index"),FS100="void main() {gl_FragColor \x3d vec4(0);}",FS_GLES="out vec4 transform_output;\nvoid main() {\n  transform_output \x3d vec4(0);\n}",FS300="#version 300 es\n".concat(FS_GLES)}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$utils$shader_utils.js.map
