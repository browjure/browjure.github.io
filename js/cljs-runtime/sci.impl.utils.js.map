{"version":3,"sources":["sci/impl/utils.cljc"],"mappings":"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","names":["cljs.core.derive","sci.impl.utils/constant?","x","cljs.core/Keyword","cljs.core/boolean?","sci.impl.utils/eval?","G__61134","cljs.core/meta","sci.impl.utils/kw-identical?","cljs.core/keyword-identical?","var_args","G__61138","sci.impl.utils/mark-eval-call","js/Error","expr","cljs.core.vary_meta","m","cljs.core.assoc","cljs.core/deref","sci.impl.vars/current-ns","sci.impl.vars/current-file","extra-key","extra-val","sci.impl.utils/mark-eval","G__61163","sci.impl.utils/throw-error-with-location","msg","iobj","sci.impl.utils.throw_error_with_location","data","map__61168","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","line","cljs.core.get","column","file","cljs.core.ex_info","cljs.core.merge","sci.impl.utils/*in-try*","sci.impl.utils/macro?","f","temp__5753__auto__","or__4126__auto__","sci.impl.utils/needs-ctx","cljs.core.symbol","sci.impl.utils/rethrow-with-location-of-node","ctx","e","raw-node","node","sci.impl.types/sexpr","cljs.core/seqable?","cljs.core/first","fm","G__61181","op","and__4115__auto__","special?","cljs.core/Symbol","cljs.core/not","env","id","cljs.core.swap_BANG_","cljs.core/update-in","vt","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj","cljs.core/volatile!","cljs.core/List","d","cljs.core/ex-data","wrapping-sci-error?","cljs.core.isa_QMARK_","map__61201","ex-msg","G__61214","cljs.core/last","clojure.string/replace","new-exception","new-d","cljs.core/Delay","v","cljs.core.get_in","sci.impl.utils/iobj?","obj","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.utils/vary-meta*","seq61246","G__61247","cljs.core/next","G__61248","self__4723__auto__","args","cljs.core/vary-meta","sci.impl.utils/merge-meta","temp__5751__auto__","cljs.core/with-meta","sci.impl.utils/strip-core-ns","sym","G__61264","cljs.core/namespace","cljs.core/name","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/walk*","inner","form","cljs.core/list?","cljs.core/list","cljs.core.map","cljs.core/map-entry?","cljs.core/MapEntry","G__61270","cljs.core/key","G__61271","cljs.core/val","cljs.core/seq?","cljs.core.doall","cljs.core/record?","cljs.core.reduce","r","cljs.core/coll?","cljs.core.into","cljs.core/empty","sci.impl.utils/prewalk","cljs.core.partial","sci.impl.utils/namespace-object","ns-sym","create?","attr-map","env*","ns-map","ns-obj","sci.impl.vars/->SciNamespace","cljs.core/assoc-in","sci.impl.utils/set-namespace!","sci.impl.types/setVal","sci.impl.utils/eval-form-state","sci.impl.utils/eval-require-state","sci.impl.utils/eval-use-state","sci.impl.utils/eval-resolve-state","sci.impl.utils/eval-refer-state","sci.impl.utils/macroexpand*","sci.impl.utils/macroexpand-1*","sci.impl.utils/eval*","sci.impl.utils/eval-do*","sci.impl.utils/eval-fn","sci.impl.utils/eval-string*","sci.impl.utils/lookup","sci.impl.utils/split-when","pred","coll","cljs.core/LazySeq","s","cljs.core/seq","fst","cljs.core/complement","run","cljs.core/cons","p1__61284#","cljs.core.take_while","G__61295","G__61296","cljs.core.drop","cljs.core/count","sci.impl.utils/ana-macros","sci.impl.utils/ctx-fn","sci.impl.types/->EvalFn","sci.impl.utils/maybe-destructured","params","body","cljs.core/every?","cljs.core/symbol?","new-params","lets","cljs.core.sequence","cljs.core.concat","gparam","cljs.core.gensym"],"sourcesContent":["(ns sci.impl.utils\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.types :as t]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(derive :sci.error/realized-beyond-max :sci/error)\n(derive :sci.error/parse :sci/error)\n\n(defn constant? [x]\n  (or (number? x) (string? x) (keyword? x) (boolean? x)))\n\n(defn eval? [x]\n  (some-> x meta :sci.impl/op))\n\n(def kw-identical? #?(:clj identical? :cljs keyword-identical?))\n\n(defn mark-eval-call\n  ([expr]\n   (vary-meta\n    expr\n    (fn [m]\n      (-> m\n          (assoc :sci.impl/op :call)\n          (assoc :ns @vars/current-ns)\n          (assoc :file @vars/current-file)))))\n  ([expr extra-key extra-val]\n   (vary-meta\n    expr\n    (fn [m]\n      (-> m\n          (assoc :sci.impl/op :call)\n          (assoc :ns @vars/current-ns)\n          (assoc :file @vars/current-file)\n          (assoc extra-key extra-val))))))\n\n(defn mark-eval\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m :sci.impl/op :eval))))\n\n(defn throw-error-with-location\n  ([msg iobj] (throw-error-with-location msg iobj {}))\n  ([msg iobj data]\n   (let [{:keys [:line :column :file]\n          :or {file @vars/current-file}} (meta iobj)]\n     (throw (ex-info msg (merge {:type :sci/error\n                                 :line line\n                                 :column column\n                                 :file file} data))))))\n\n(def ^:dynamic *in-try* false)\n\n(defn macro? [f]\n  (when-let [m (meta f)]\n    (or (:sci/macro m)\n        (:macro m))))\n\n(def needs-ctx (symbol \"needs-ctx\"))\n\n(defn rethrow-with-location-of-node [ctx ^Throwable e raw-node]\n  (if *in-try* (throw e)\n      (let [node (t/sexpr raw-node)\n            m (meta node)\n            f (when (seqable? node) (first node))\n            fm (some-> f meta)\n            op (when (and fm m)\n                 (.get ^java.util.Map m :sci.impl/op))\n            special? (or\n                      ;; special call like def\n                      (and (symbol? f) (not op))\n                      ;; anonymous function\n                      (kw-identical? :fn op)\n                      ;; special thing like require\n                      (identical? needs-ctx op))\n            env (:env ctx)\n            id (:id ctx)]\n        (when (not special?)\n          (swap! env update-in [:sci.impl/callstack id]\n                 (fn [vt]\n                   (if vt\n                     (do (vswap! vt conj node)\n                         vt)\n                     (volatile! (list node))))))\n        (let [d (ex-data e)\n              wrapping-sci-error? (isa? (:type d) :sci/error)]\n          (if wrapping-sci-error?\n            (throw e)\n            (let [ex-msg #?(:clj (.getMessage e)\n                            :cljs (.-message e))\n                  {:keys [:line :column :file]}\n                  (or (some-> env deref\n                              :sci.impl/callstack (get id)\n                              deref last meta)\n                      (meta node))]\n              (if (and line column)\n                (let [ex-msg (if (and ex-msg (:name fm))\n                               (str/replace ex-msg #\"(sci\\.impl\\.)?fns/fun/[a-zA-Z0-9-]+--\\d+\"\n                                            (str (:ns fm) \"/\" (:name fm)))\n                               ex-msg)\n                      new-exception\n                      (let [new-d {:type :sci/error\n                                   :line line\n                                   :column column\n                                   :message ex-msg\n                                   :sci.impl/callstack\n                                   (delay (when-let\n                                              [v (get-in @(:env ctx) [:sci.impl/callstack (:id ctx)])]\n                                            @v))\n                                   :file file\n                                   :locals (:bindings ctx)}]\n                        (ex-info ex-msg new-d e))]\n                  (throw new-exception))\n                (throw e))))))))\n\n(defn iobj? [obj]\n  (and #?(:clj (instance? clojure.lang.IObj obj)\n          :cljs (implements? IWithMeta obj))\n       (meta obj)))\n\n(defn vary-meta*\n  \"Only adds metadata to obj if d is not nil and if obj already has meta\"\n  [obj f & args]\n  (if (iobj? obj)\n    (apply vary-meta obj f args)\n    obj))\n\n(defn merge-meta\n  \"Only adds metadata to obj if d is not nil and if meta on obj isn't already nil.\"\n  [obj d]\n  (if (and d #?(:clj (instance? clojure.lang.IObj obj)\n                :cljs (implements? IWithMeta obj)))\n    (if-let [m (meta obj)]\n      (do\n        nil\n        ;; this should not happen, turn on for debugging\n        #_(when (identical? m d) (prn :identical obj d m))\n        (with-meta obj (merge m d)))\n      obj)\n    obj))\n\n(defn strip-core-ns [sym]\n  (case (namespace sym)\n    (\"clojure.core\" \"cljs.core\") (symbol (name sym))\n    sym))\n\n(def allowed-loop (symbol \"loop\"))\n(def allowed-recur (symbol \"recur\"))\n\n(defn walk*\n  [inner form]\n  (cond\n    (:sci.impl/op (meta form)) form\n    (list? form) (with-meta (apply list (map inner form))\n                   (meta form))\n    #?(:clj (instance? clojure.lang.IMapEntry form) :cljs (map-entry? form))\n    #?(:clj (clojure.lang.MapEntry/create (inner (key form)) (inner (val form)))\n       :cljs (MapEntry. (inner (key form)) (inner (val form)) nil))\n    (seq? form) (with-meta (doall (map inner form))\n                  (meta form))\n    #?(:clj (instance? clojure.lang.IRecord form)\n       :cljs (record? form))\n    (reduce (fn [r x] (conj r (inner x))) form form)\n    (coll? form) (into (empty form) (map inner form))\n    :else form))\n\n(defn prewalk\n  \"Prewalk with metadata preservation. Does not prewalk :sci.impl/op nodes.\"\n  [f form]\n  (walk* (partial prewalk f) (f form)))\n\n(defn namespace-object\n  \"Fetches namespaces from env if it exists. Else, if `create?`,\n  produces one regardless of the existince of the namespace in env and\n  adds it to env before returning it.\"\n  [env ns-sym create? attr-map]\n  (let [env* @env\n        ns-map (get-in env* [:namespaces ns-sym])]\n    (or (:obj ns-map)\n        (when (or ns-map create?)\n          (let [ns-obj (vars/->SciNamespace ns-sym attr-map)]\n            (swap! env assoc-in [:namespaces ns-sym :obj] ns-obj)\n            ns-obj)))))\n\n(defn set-namespace! [ctx ns-sym attr-map]\n  (let [env (:env ctx)\n        attr-map (merge (meta ns-sym) attr-map)\n        ns-obj (namespace-object env ns-sym true attr-map)]\n    (t/setVal vars/current-ns ns-obj)))\n\n(def eval-form-state (volatile! nil))\n(def eval-require-state (volatile! nil))\n(def eval-use-state (volatile! nil))\n(def eval-resolve-state (volatile! nil))\n(def eval-refer-state (volatile! nil))\n(def macroexpand* (volatile! nil))\n(def macroexpand-1* (volatile! nil))\n(def eval* (volatile! nil))\n(def eval-do* (volatile! nil))\n(def eval-fn (volatile! nil))\n(def eval-string* (volatile! nil))\n(def lookup (volatile! nil))\n\n(defn split-when\n  \"Like partition-by but splits collection only when `pred` returns\n  a truthy value. E.g. `(split-when odd? [1 2 3 4 5]) => ((1 2) (3 4) (5))`\"\n  [pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [fst (first s)\n           f (complement pred)\n           run (cons fst (take-while #(f %) (next s)))]\n       (cons run (split-when pred (lazy-seq (drop (count run) s))))))))\n\n(def ana-macros\n  '#{do if and or let fn fn* def defn\n     comment loop lazy-seq for doseq case try defmacro\n     declare expand-dot* expand-constructor new . import in-ns ns var\n     set! resolve #_#_macroexpand-1 macroexpand})\n\n(defn ctx-fn [f expr]\n  (t/->EvalFn f nil expr))\n\n(defn maybe-destructured\n  [params body]\n  (if (every? symbol? params)\n    {:params params\n     :body body}\n    (loop [params params\n           new-params (with-meta [] (meta params))\n           lets []]\n      (if params\n        (if (symbol? (first params))\n          (recur (next params) (conj new-params (first params)) lets)\n          (let [gparam (gensym \"p__\")]\n            (recur (next params) (conj new-params gparam)\n                   (-> lets (conj (first params)) (conj gparam)))))\n        {:params new-params\n         :body [`(let ~lets\n                   ~@body)]}))))\n"]}