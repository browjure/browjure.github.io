{"version":3,"sources":["sci/impl/evaluator.cljc"],"mappings":"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","names":["sci.impl.evaluator/macros","sci.impl.evaluator/eval-and","ctx","args","cljs.core/seq","x","cljs.core/first","v","sci.impl.evaluator/eval","xs","cljs.core/next","sci.impl.evaluator/eval-or","sci.impl.evaluator/eval-let","let-bindings","exprs","let-name","cljs.core/rest","let-val","rest-let-bindings","bindings","cljs.core/-assoc","cljs.core/not","e","ret","nexprs","sci.impl.evaluator/eval-def","var-name","init","m","cljs.core/meta","cnn","sci.impl.vars/getName","assoc-in-env","env","the-current-ns","cljs.core.get","prev","sci.impl.vars/var?","sci.impl.vars/->SciVar","cljs.core.symbol","sci.impl.utils/kw-identical?","G__65299","cljs.core.alter_meta_BANG_","cljs.core/merge","sci.impl.vars/bindRoot","cljs.core.assoc","cljs.core/assoc-in","cljs.core.swap_BANG_","p__65320","vec__65321","cljs.core.nth","map__65324","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","case-map","case-val","case-default","sci.impl.evaluator/eval-case","_case","temp__5751__auto__","vec__65334","_","found","cljs.core/find","cljs.core/vector?","G__65338","G__65339","cljs.core/second","js/Error","sci.impl.evaluator/eval-try","expr","map__65352","body","catches","finally","e65359","*in-try*-orig-val__65377","*in-try*-temp-val__65378","sci.impl.utils/*in-try*","vec__65366","r","cljs.core.reduce","c","clazz","cljs.core/reduced","G__65364","G__65365","sci.impl.utils/rethrow-with-location-of-node","p__65383","vec__65384","sci.impl.evaluator/eval-throw","_throw","ex","sci.impl.evaluator/eval-static-method-invocation","sci.impl.interop/invoke-static-method","p1__65392#","cljs.core.map","p__65401","vec__65403","sci.impl.evaluator/eval-constructor-invocation","_new","constructor","p1__65393#","sci.impl.interop/invoke-constructor","p__65421","p__65422","map__65425","class->opts","vec__65435","sci.impl.evaluator/eval-instance-method-invocation","_dot","instance-expr","method-str","_expr","instance-meta","tag-class","instance-expr*","cljs.core/map?","cljs.core.keyword","cljs.core.subs","instance-class","or__4126__auto__","cljs.core/type","instance-class-name","instance-class-symbol","allowed?","target-class","temp__5753__auto__","f","sci.impl.utils.throw_error_with_location","p1__65414#","sci.impl.interop/invoke-instance-method","p__65469","vec__65470","sci.impl.evaluator/eval-in-ns","_in-ns","ns-expr","ns-sym","sci.impl.utils/set-namespace!","var_args","G__65489","sci.impl.evaluator/eval-resolve","sym","fexpr__65496","cljs.core/deref","sci.impl.utils/lookup","cljs.core/contains?","fexpr__65499","cljs.core/vreset!","sci.impl.utils/eval-resolve-state","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.evaluator/eval-import","seq65506","G__65507","self__4723__auto__","import-symbols-or-lists","specs","p1__65500#","cljs.core/seq?","cljs.core._EQ_","spec","vec__65516","package","classes","cljs.core/Symbol","s","last-dot","clojure.string.last_index_of","package+class-name","p","cs","class","fq-class-name","sci.impl.interop/resolve-class","sci.impl.vars/current-ns-name","rec","sci.impl.records.resolve_record_or_protocol_class","p__65553","vec__65554","sci.impl.evaluator/eval-set!","obj","sci.impl.types/setVal","cljs.core.ex_info","sci.impl.evaluator/eval-do","G__65567","G__65568","sci.impl.utils/eval-do*","cljs.core.mapv","p1__64951#","cljs.core/count","sci.impl.evaluator/fn-call","G__65772","arg65581","G__65774","G__65775","arg65582","G__65778","G__65779","arg65583","G__65780","G__65781","arg65584","G__65783","G__65784","arg65585","G__65786","G__65787","arg65586","G__65789","G__65790","arg65587","G__65791","G__65792","arg65588","G__65793","G__65794","arg65589","G__65795","G__65796","arg65590","G__65799","G__65800","arg65591","G__65802","G__65803","arg65592","G__65804","G__65805","arg65593","G__65806","G__65807","arg65594","G__65808","G__65809","arg65595","G__65810","G__65811","arg65596","G__65814","G__65815","arg65597","G__65817","G__65818","arg65598","G__65819","G__65820","arg65599","G__65821","G__65822","arg65600","G__65823","G__65824","arg65601","G__65825","G__65826","arg65602","G__65833","G__65834","arg65603","G__65836","G__65837","arg65604","G__65842","G__65843","arg65605","G__65848","G__65849","arg65606","G__65850","G__65851","arg65607","G__65852","G__65853","arg65608","G__65854","G__65855","arg65609","G__65856","G__65857","arg65610","G__65859","G__65860","arg65611","G__65861","G__65862","arg65612","G__65863","G__65864","arg65613","G__65865","G__65866","arg65614","G__65870","G__65871","arg65615","G__65872","G__65873","arg65616","G__65874","G__65875","arg65617","G__65879","G__65880","arg65618","G__65881","G__65882","arg65619","G__65883","G__65884","arg65620","G__65887","G__65888","arg65621","G__65890","G__65891","arg65622","G__65892","G__65893","arg65623","G__65894","G__65895","arg65624","G__65896","G__65897","arg65625","G__65898","G__65899","arg65626","G__65904","G__65905","arg65627","G__65907","G__65908","arg65628","G__65909","G__65910","arg65629","G__65911","G__65912","arg65630","G__65913","G__65914","arg65631","G__65915","G__65916","arg65632","G__65920","G__65921","arg65633","G__65922","G__65924","arg65634","G__65927","G__65928","arg65635","G__65929","G__65930","arg65636","G__65934","G__65935","arg65637","G__65936","G__65937","arg65638","G__65938","G__65939","arg65639","G__65942","G__65943","arg65640","G__65944","G__65945","arg65641","G__65949","G__65950","arg65642","G__65951","G__65952","arg65643","G__65953","G__65954","arg65644","G__65955","G__65956","arg65645","G__65958","G__65959","arg65646","G__65963","G__65964","arg65647","G__65972","G__65973","arg65648","G__65975","G__65976","arg65649","G__65978","G__65979","arg65650","G__65981","G__65982","arg65651","G__65984","G__65985","arg65652","G__65991","G__65992","arg65653","G__65993","G__65994","arg65654","G__65997","G__65998","arg65655","G__66000","G__66001","arg65656","G__66008","G__66009","arg65657","G__66011","G__66012","arg65658","G__66013","G__66014","arg65659","G__66019","G__66020","arg65660","G__66022","G__66023","arg65661","G__66027","G__66028","arg65662","G__66029","G__66030","arg65663","G__66037","G__66038","arg65664","G__66039","G__66040","arg65665","G__66041","G__66042","arg65666","G__66044","G__66045","arg65667","G__66046","G__66047","arg65668","G__66049","G__66050","arg65669","G__66054","G__66055","arg65670","G__66056","G__66057","arg65671","G__66061","G__66062","arg65672","G__66064","G__66065","arg65673","G__66066","G__66067","arg65674","G__66069","G__66070","arg65675","G__66071","G__66072","arg65676","G__66073","G__66074","arg65677","G__66076","G__66077","arg65678","G__66078","G__66079","arg65679","G__66080","G__66081","arg65680","G__66082","G__66083","arg65681","G__66084","G__66085","arg65682","G__66087","G__66088","arg65683","G__66089","G__66090","arg65684","G__66091","G__66092","arg65685","G__66093","G__66094","arg65686","G__66095","G__66096","arg65687","G__66097","G__66098","arg65688","G__66101","G__66102","arg65689","G__66104","G__66105","arg65690","G__66106","G__66107","arg65691","G__66108","G__66109","arg65692","G__66111","G__66112","arg65693","G__66113","G__66114","arg65694","G__66115","G__66116","arg65695","G__66120","G__66121","arg65696","G__66127","G__66128","arg65697","G__66129","G__66130","arg65698","G__66131","G__66132","arg65699","G__66133","G__66134","arg65700","G__66135","G__66136","arg65701","G__66141","G__66142","arg65702","G__66143","G__66144","arg65703","G__66145","G__66146","arg65704","G__66147","G__66148","arg65705","G__66149","G__66150","arg65706","G__66151","G__66152","arg65707","G__66153","G__66154","arg65708","G__66157","G__66158","arg65709","G__66160","G__66161","arg65710","G__66162","G__66163","arg65711","G__66164","G__66165","arg65712","G__66166","G__66167","arg65713","G__66168","G__66169","arg65714","G__66173","G__66174","arg65715","G__66178","G__66179","arg65716","G__66180","G__66181","arg65717","G__66182","G__66183","arg65718","G__66184","G__66185","arg65719","G__66186","G__66187","arg65720","G__66188","G__66189","arg65721","G__66190","G__66191","arg65722","G__66192","G__66193","arg65723","G__66195","G__66196","arg65724","G__66197","G__66198","arg65725","G__66199","G__66200","arg65726","G__66201","G__66202","arg65727","G__66203","G__66204","arg65728","G__66209","G__66210","arg65729","G__66211","G__66212","arg65730","G__66213","G__66214","arg65731","G__66215","G__66216","arg65732","G__66220","G__66221","arg65733","G__66222","G__66223","arg65734","G__66230","G__66231","arg65735","G__66233","G__66234","arg65736","G__66239","G__66240","arg65737","G__66245","G__66246","arg65738","G__66250","G__66251","arg65739","G__66257","G__66258","arg65740","G__66259","G__66260","arg65741","G__66261","G__66262","arg65742","G__66265","G__66266","arg65743","G__66272","G__66273","arg65744","G__66274","G__66275","arg65745","G__66279","G__66280","arg65746","G__66281","G__66282","arg65747","G__66283","G__66284","arg65748","G__66287","G__66288","arg65749","G__66302","G__66303","arg65750","G__66304","G__66305","arg65751","G__66306","G__66307","arg65752","G__66310","G__66311","arg65753","G__66312","G__66313","arg65754","G__66316","G__66317","arg65755","G__66323","G__66324","arg65756","G__66326","G__66327","arg65757","G__66330","G__66331","arg65758","G__66332","G__66333","arg65759","G__66334","G__66335","arg65760","G__66336","G__66337","arg65761","G__66339","G__66340","arg65762","G__66342","G__66343","arg65763","G__66344","G__66345","arg65764","G__66346","G__66347","arg65765","G__66348","G__66349","arg65766","G__66350","G__66351","arg65767","G__66352","G__66353","arg65768","G__66354","G__66355","arg65769","G__66356","G__66357","arg65770","G__66358","G__66359","sci.impl.evaluator/eval-special-call","f-sym","G__66360","sci.impl.utils/strip-core-ns","cljs.core/LazySeq","G__66367","G__66368","sci.impl.load/eval-refer","sci.impl.load/eval-require","cljs.core/with-meta","sci.impl.load/eval-use","sci.impl.evaluator/eval-call","e66381","eval?","sci.impl.types/EvalFn","op","G__66397","cljs.core/ifn?","cljs.core.pr_str","sci.impl.evaluator/handle-meta","mm","cljs.core.dissoc","e66411","sci.impl.types/EvalVar","cljs.core/-deref","G__66415","fn-meta","the-fn","sci.impl.fns/eval-fn","cljs.core.vary_meta","sci.impl.interop/get-static-field","cljs.core/force","sci.impl.utils/needs-ctx","cljs.core.partial","cljs.core/zipmap","p1__66407#","cljs.core/keys","p1__66408#","cljs.core/vals","sci.impl.utils/eval*"],"sourcesContent":["(ns sci.impl.evaluator\n  {:no-doc true}\n  (:refer-clojure :exclude [eval])\n  (:require\n   [clojure.string :as str]\n   [sci.impl.faster :as faster :refer [get-2 deref-1]]\n   [sci.impl.fns :as fns]\n   [sci.impl.interop :as interop]\n   [sci.impl.load :as load]\n   [sci.impl.macros :as macros]\n   [sci.impl.records :as records]\n   [sci.impl.types :as t]\n   [sci.impl.utils :as utils :refer [throw-error-with-location\n                                     rethrow-with-location-of-node\n                                     set-namespace!\n                                     kw-identical?]]\n   [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros [sci.impl.evaluator :refer [def-fn-call resolve-symbol]])))\n\n(declare eval fn-call)\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def #?(:clj ^:const macros :cljs macros)\n  '#{do and or quote fn def defn\n     lazy-seq try syntax-quote case . in-ns set!\n     ;; TODO: make normal function\n     require})\n\n;;;; Evaluation\n\n(defn eval-and\n  \"The and macro from clojure.core. Note: and is unrolled in the analyzer, this is a fallback.\"\n  [ctx args]\n  (let [args (seq args)]\n    (loop [args args]\n      (if args\n        (let [x (first args)\n              v (eval ctx x)]\n          (if v\n            (let [xs (next args)]\n              (if xs\n                (recur xs) v)) v))\n        true))))\n\n(defn eval-or\n  \"The or macro from clojure.core. Note: or is unrolled in the analyzer, this is a fallback.\"\n  [ctx args]\n  (let [args (seq args)]\n    (loop [args args]\n      (when args\n        (let [x (first args)\n              v (eval ctx x)]\n          (if v v\n              (let [xs (next args)]\n                (if xs (recur xs)\n                    v))))))))\n\n(defn eval-let\n  \"The let macro from clojure.core\"\n  [ctx let-bindings exprs]\n  (let [ctx (loop [ctx ctx\n                   let-bindings let-bindings]\n              (let [let-name (first let-bindings)\n                    let-bindings (rest let-bindings)\n                    let-val (first let-bindings)\n                    rest-let-bindings (next let-bindings)\n                    v (eval ctx let-val)\n                    bindings (faster/get-2 ctx :bindings)\n                    bindings (faster/assoc-3 bindings let-name v)\n                    ctx (faster/assoc-3 ctx :bindings bindings)]\n                (if-not rest-let-bindings\n                  ctx\n                  (recur ctx\n                         rest-let-bindings))))]\n    (when exprs\n      (loop [exprs exprs]\n        (let [e (first exprs)\n              ret (eval ctx e)\n              nexprs (next exprs)]\n          (if nexprs (recur nexprs)\n              ret))))))\n\n(defn eval-def\n  [ctx var-name init]\n  (let [init (eval ctx init)\n        m (meta var-name)\n        m (eval ctx m) ;; m is marked with eval op in analyzer only when necessary\n        cnn (vars/getName (:ns m))\n        assoc-in-env\n        (fn [env]\n          (let [the-current-ns (get (get env :namespaces) cnn)\n                prev (get the-current-ns var-name)\n                prev (if-not (vars/var? prev)\n                       (vars/->SciVar prev (symbol (str cnn) (str var-name))\n                                      (meta prev)\n                                      false)\n                       prev)\n                v (if (kw-identical? :sci.impl/var.unbound init)\n                    (doto prev\n                      (alter-meta! merge m))\n                    (do (vars/bindRoot prev init)\n                        (alter-meta! prev merge m)\n                        prev))\n                the-current-ns (assoc the-current-ns var-name v)]\n            (assoc-in env [:namespaces cnn] the-current-ns)))\n        env (swap! (:env ctx) assoc-in-env)]\n    ;; return var\n    (get (get (get env :namespaces) cnn) var-name)))\n\n(defmacro resolve-symbol [ctx sym]\n  `(.get ^java.util.Map\n         (.get ~(with-meta ctx\n                  {:tag 'java.util.Map}) :bindings) ~sym))\n\n(declare eval-string*)\n\n(defn eval-case\n  [ctx [_case {:keys [:case-map :case-val :case-default]}]]\n  (let [v (eval ctx case-val)]\n    (if-let [[_ found] (find case-map v)]\n      (eval ctx found)\n      (if (vector? case-default)\n        (eval ctx (second case-default))\n        (throw (new #?(:clj Exception :cljs js/Error)\n                    (str \"No matching clause: \" v)))))))\n\n(defn eval-try\n  [ctx expr]\n  (let [{:keys [:body :catches :finally]} (:sci.impl/try expr)]\n    (try\n      (binding [utils/*in-try* true]\n        (eval ctx body))\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (if-let\n         [[_ r]\n          (reduce (fn [_ c]\n                    (let [clazz (:class c)]\n                      (when (instance? clazz e)\n                        (reduced\n                         [::try-result\n                          (eval (assoc-in ctx [:bindings (:binding c)]\n                                          e)\n                                (:body c))]))))\n                  nil\n                  catches)]\n          r\n          (rethrow-with-location-of-node ctx e body)))\n      (finally\n        (eval ctx finally)))))\n\n(defn eval-throw [ctx [_throw ex]]\n  (let [ex (eval ctx ex)]\n    (throw ex)))\n\n;;;; Interop\n\n(defn eval-static-method-invocation [ctx expr]\n  (interop/invoke-static-method (first expr)\n                                ;; eval args!\n                                (map #(eval ctx %) (rest expr))))\n\n(defn eval-constructor-invocation [ctx [_new #?(:clj class :cljs constructor) args]]\n  (let [args (map #(eval ctx %) args)] ;; eval args!\n    (interop/invoke-constructor #?(:clj class :cljs constructor) args)))\n\n#?(:clj\n   (defn super-symbols [clazz]\n     ;; (prn clazz '-> (map #(symbol (.getName ^Class %)) (supers clazz)))\n     (map #(symbol (.getName ^Class %)) (supers clazz))))\n\n(defn eval-instance-method-invocation [{:keys [:class->opts] :as ctx}\n                                       [_dot instance-expr method-str args :as _expr]]\n  (let [instance-meta (meta instance-expr)\n        tag-class (:tag-class instance-meta)\n        instance-expr* (eval ctx instance-expr)]\n    (if (and (map? instance-expr*)\n             (:sci.impl/record (meta instance-expr*))) ;; a sci record\n      (get instance-expr* (keyword (subs method-str 1)))\n      (let [instance-class (or tag-class (#?(:clj class :cljs type) instance-expr*))\n            instance-class-name #?(:clj (.getName ^Class instance-class)\n                                   :cljs (.-name instance-class))\n            instance-class-symbol (symbol instance-class-name)\n            allowed? (or\n                      (get class->opts :allow)\n                      (get class->opts instance-class-symbol))\n            ^Class target-class (if allowed? instance-class\n                                    (when-let [f (:public-class ctx)]\n                                      (f instance-expr*)))]\n        ;; we have to check options at run time, since we don't know what the class\n        ;; of instance-expr is at analysis time\n        (when-not target-class\n          (throw-error-with-location (str \"Method \" method-str \" on \" instance-class \" not allowed!\") instance-expr))\n        (let [args (map #(eval ctx %) args)] ;; eval args!\n          (interop/invoke-instance-method instance-expr* target-class method-str args))))))\n\n;;;; End interop\n\n;;;; Namespaces\n\n(defn eval-in-ns [ctx [_in-ns ns-expr]]\n  (let [ns-sym (eval ctx ns-expr)]\n    (set-namespace! ctx ns-sym nil)\n    nil))\n\n(declare eval-form)\n\n(defn eval-resolve\n  ([ctx sym]\n   (let [sym (eval ctx sym)]\n     (second (@utils/lookup ctx sym false))))\n  ([ctx env sym]\n   (when-not (contains? env sym)\n     (let [sym (eval ctx sym)]\n       (second (@utils/lookup ctx sym false))))))\n\n(vreset! utils/eval-resolve-state eval-resolve)\n\n;;;; End namespaces\n\n;;;; Import\n\n(defn eval-import [ctx & import-symbols-or-lists]\n  ;;(prn import-symbols-or-lists)\n  (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %)\n                   import-symbols-or-lists)\n        env (:env ctx)]\n    (reduce (fn [_ spec]\n              (let [[package classes]\n                    (if (symbol? spec)\n                      (let [s (str spec)\n                            last-dot (str/last-index-of s \".\")\n                            package+class-name\n                            (if last-dot\n                              [(symbol (subs s 0 last-dot))\n                               [(symbol (subs s (inc last-dot) (count s)))]]\n                              [nil [spec]])]\n                        package+class-name)\n                      (let [p (first spec)\n                            cs (rest spec)]\n                        [p cs]))]\n                (reduce (fn [_ class]\n                          (let [fq-class-name (symbol (if package (str package \".\" class)\n                                                          class))]\n                            (if-let [clazz (interop/resolve-class ctx fq-class-name)]\n                              (let [cnn (vars/current-ns-name)]\n                                (swap! env assoc-in [:namespaces cnn :imports class] fq-class-name)\n                                clazz)\n                              (if-let [rec (records/resolve-record-or-protocol-class ctx package class)]\n                                (let [cnn (vars/current-ns-name)]\n                                  (swap! env assoc-in [:namespaces cnn class] rec)\n                                  rec)\n                                (throw (new #?(:clj Exception :cljs js/Error)\n                                            (str \"Unable to resolve classname: \" fq-class-name)))))))\n                        nil\n                        classes)))\n            nil\n            specs)))\n\n;;;; End import\n\n(defn eval-set! [ctx [_ obj v]]\n  (let [obj (eval ctx obj)\n        v (eval ctx v)]\n    (if (vars/var? obj)\n      (t/setVal obj v)\n      (throw (ex-info (str \"Cannot set \" obj \" to \" v) {:obj obj :v v})))))\n\n(declare eval-string)\n\n(defn eval-do\n  \"Note: various arities of do have already been unrolled in the analyzer.\"\n  [ctx exprs]\n  (let [exprs (seq exprs)]\n    (loop [exprs exprs]\n      (when exprs\n        (let [ret (eval ctx (first exprs))]\n          (if-let [exprs (next exprs)]\n            (recur exprs)\n            ret))))))\n\n(vreset! utils/eval-do* eval-do)\n\n(macros/deftime\n  ;; This macro generates a function of the following form for 20 arities:\n  #_(defn fn-call [ctx f args]\n      (case (count args)\n        0 (f)\n        1 (let [arg (eval ctx (first args))]\n            (f arg))\n        2 (let [arg1 (eval ctx (first args))\n                args (rest args)\n                arg2 (eval ctx (first args))]\n            (f arg1 arg2))\n        ,,,\n        (let [args (mapv #(eval ctx %) args)]\n          (apply f args))))\n  (defmacro def-fn-call []\n    (let [cases\n          (mapcat (fn [i]\n                    [i (let [arg-syms (map (fn [_] (gensym \"arg\")) (range i))\n                             args-sym 'args ;; (gensym \"args\")\n                             let-syms (interleave arg-syms (repeat args-sym))\n                             let-vals (interleave (repeat `(eval ~'ctx (first ~args-sym)))\n                                                  (repeat `(rest ~args-sym)))\n                             let-bindings (vec (interleave let-syms let-vals))]\n                         `(let ~let-bindings\n                            (~'f ~@arg-syms)))]) (range 20))\n          cases (concat cases ['(let [args (mapv #(eval ctx %) args)]\n                                  (apply f args))])]\n      ;; Normal apply:\n      #_`(defn ~'fn-call ~'[ctx f args]\n           (apply ~'f (map #(eval ~'ctx %) ~'args)))\n      `(defn ~'fn-call ~'[ctx f args]\n         ;; TODO: can we prevent hitting this at all, by analyzing more efficiently?\n         ;; (prn :count ~'f ~'(count args) ~'args)\n         (case ~'(count args)\n           ~@cases)))))\n\n(def-fn-call)\n\n(defn eval-special-call [ctx f-sym expr]\n  (case (utils/strip-core-ns f-sym)\n    ;; do (eval-do ctx expr)\n    and (eval-and ctx (rest expr))\n    or (eval-or ctx (rest expr))\n    lazy-seq (new #?(:clj clojure.lang.LazySeq\n                     :cljs cljs.core/LazySeq)\n                  #?@(:clj []\n                      :cljs [nil])\n                  (eval ctx (second expr))\n                  #?@(:clj []\n                      :cljs [nil nil]))\n    ;; recur (fn-call ctx (comp fns/->Recur vector) (rest expr))\n    case (eval-case ctx expr)\n    try (eval-try ctx expr)\n    ;; interop\n    new (eval-constructor-invocation ctx expr)\n    . (eval-instance-method-invocation ctx expr)\n    throw (eval-throw ctx expr)\n    in-ns (eval-in-ns ctx expr)\n    set! (eval-set! ctx expr)\n    refer (apply load/eval-refer ctx (rest expr))\n    require (apply load/eval-require ctx (with-meta (rest expr)\n                                      (meta expr)))\n    use (apply load/eval-use ctx (with-meta (rest expr)\n                                   (meta expr)))\n    ;; resolve works as a function so this should not be necessary\n    ;; resolve (eval-resolve ctx (second expr))\n    ;;macroexpand-1 (macroexpand-1 ctx (eval ctx (second expr)))\n    ;; macroexpand (macroexpand ctx (eval ctx (second expr)))\n    import (apply eval-import ctx (rest expr))\n    quote (second expr)))\n\n(defn eval-call [ctx expr]\n  (try (let [f (first expr)\n             eval? (instance? sci.impl.types.EvalFn f)\n             op (when-not eval?\n                  (some-> (meta f) (get-2 :sci.impl/op)))]\n         (cond\n           (and (symbol? f) (not op))\n           (eval-special-call ctx f expr)\n           (kw-identical? op :static-access)\n           (eval-static-method-invocation ctx expr)\n           :else\n           (let [f (if (or op eval?)\n                     (eval ctx f)\n                     f)]\n             (if (ifn? f)\n               (fn-call ctx f (rest expr))\n               (throw (new #?(:clj Exception :cljs js/Error)\n                           (str \"Cannot call \" (pr-str f) \" as a function.\")))))))\n       (catch #?(:clj Throwable :cljs js/Error) e\n         (rethrow-with-location-of-node ctx e expr))))\n\n(defn- handle-meta [ctx m]\n  ;; Sometimes metadata needs eval. In this case the metadata has metadata.\n  (-> (if-let [mm (meta m)]\n        (if (when mm (get-2 mm :sci.impl/op))\n          (eval ctx m)\n          m)\n        m)\n      (dissoc :sci.impl/op)))\n\n(defn eval\n  [ctx expr]\n  (try\n    (cond (instance? sci.impl.types.EvalFn expr)\n          (let [f (.-f ^sci.impl.types.EvalFn expr)]\n            (f ctx))\n          (instance? sci.impl.types.EvalVar expr)\n          (let [v (.-v ^sci.impl.types.EvalVar expr)]\n            (deref-1 v))\n          :else\n          (let [m (meta expr)\n                op (when m (get-2 m :sci.impl/op))\n                ret\n                (if\n                 (not op) expr\n                    ;; TODO: moving this up increased performance for #246. We can\n                    ;; probably optimize it further by not using separate keywords for\n                    ;; one :sci.impl/op keyword on which we can use a case expression\n                 (case op\n                   :call (eval-call ctx expr)\n                   :try (eval-try ctx expr)\n                   :fn (let [fn-meta (:sci.impl/fn-meta expr)\n                             the-fn (fns/eval-fn ctx eval expr)\n                             fn-meta (when fn-meta (handle-meta ctx fn-meta))]\n                         (if fn-meta\n                           (vary-meta the-fn merge fn-meta)\n                           the-fn))\n                   :static-access (interop/get-static-field expr)\n                   :deref! (let [v (first expr)\n                                 v (if (vars/var? v) @v v)\n                                 v (force v)]\n                             v)\n                   :resolve-sym (resolve-symbol ctx expr)\n                      ;; needed for when a needs-ctx fn is passed as hof\n                   needs-ctx (if (identical? op utils/needs-ctx)\n                               (partial expr ctx)\n                                  ;; this should never happen, or if it does, it's\n                                  ;; someone trying to hack\n                               (throw (new #?(:clj Exception :cljs js/Error)\n                                           (str \"unexpected: \" expr \", type: \" (type expr), \", meta:\" (meta expr)))))\n                   (cond (map? expr) (with-meta (zipmap (map #(eval ctx %) (keys expr))\n                                                        (map #(eval ctx %) (vals expr)))\n                                       (handle-meta ctx m))\n                         :else (throw (new #?(:clj Exception :cljs js/Error)\n                                           (str \"unexpected: \" expr \", type: \" (type expr), \", meta:\" (meta expr)))))))]\n            ;; for debugging:\n            ;; (prn :eval expr (meta expr) '-> ret (meta ret))\n            ret))\n    (catch #?(:clj Throwable :cljs js/Error) e\n      (rethrow-with-location-of-node ctx e expr))))\n\n(vreset! utils/eval* eval)\n"]}