shadow$provide.module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$hexagon_layer$hexagon_aggregator=function(global,require,module,exports){function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},
e:function(_e){throw _e;},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;}}}}function _unsupportedIterableToArray(o,
minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function getPointsCenter(data,
aggregationParams){var attributes=aggregationParams.attributes;aggregationParams=attributes.positions.value;attributes=attributes.positions.getAccessor().size;var minX=Infinity,minY=Infinity,maxX=-Infinity,maxY=-Infinity,i;for(i=0;i<attributes*data.length;i+=attributes){var x=aggregationParams[i],y=aggregationParams[i+1];Number.isFinite(x)&&Number.isFinite(y)&&(minX=Math.min(x,minX),maxX=Math.max(x,maxX),minY=Math.min(y,minY),maxY=Math.max(y,maxY))}return[minX,minY,maxX,maxY].every(Number.isFinite)?
[(minX+maxX)/2,(minY+maxY)/2]:null}function getRadiusInCommon(radius,viewport,center){viewport=viewport.getDistanceScales(center).unitsPerMeter;return radius*viewport[0]}Object.defineProperty(exports,"__esModule",{value:!0});exports.pointToHexbin=function(props,aggregationParams){var data=props.data,radius=props.radius,viewport=aggregationParams.viewport;props=aggregationParams.attributes;aggregationParams=data.length?getPointsCenter(data,aggregationParams):null;aggregationParams=getRadiusInCommon(radius,
viewport,aggregationParams);radius=[];var _createIterable=(0,_core.createIterable)(data);data=_createIterable.iterable;_createIterable=_createIterable.objectInfo;var positions=props.positions.value;props=props.positions.getAccessor().size;data=_createForOfIteratorHelper(data);var _step;try{for(data.s();!(_step=data.n()).done;){var object=_step.value;_createIterable.index++;var posIndex=_createIterable.index*props,position=[positions[posIndex],positions[posIndex+1]];Number.isFinite(position[0])&&Number.isFinite(position[1])?
radius.push({screenCoord:viewport.projectFlat(position),source:object,index:_createIterable.index}):_core.log.warn("HexagonLayer: invalid position")()}}catch(err){data.e(err)}finally{data.f()}return{hexagons:(0,_d3Hexbin.hexbin)().radius(aggregationParams).x(function(d){return d.screenCoord[0]}).y(function(d){return d.screenCoord[1]})(radius).map(function(hex,index){return{position:viewport.unprojectFlat([hex.x,hex.y]),points:hex,index}}),radiusCommon:aggregationParams}};exports.getPointsCenter=getPointsCenter;
exports.getRadiusInCommon=getRadiusInCommon;var _d3Hexbin=require("module$node_modules$d3_hexbin$build$d3_hexbin"),_core=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index")}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$hexagon_layer$hexagon_aggregator.js.map
