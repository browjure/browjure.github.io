shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$fp64$fp64_arithmetic_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;exports["default"]="uniform float ONE;\nvec2 split(float a) {\n  const float SPLIT \x3d 4097.0;\n  float t \x3d a * SPLIT;\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float a_hi \x3d t * ONE - (t - a);\n  float a_lo \x3d a * ONE - a_hi;\n#else\n  float a_hi \x3d t - (t - a);\n  float a_lo \x3d a - a_hi;\n#endif\n  return vec2(a_hi, a_lo);\n}\nvec2 split2(vec2 a) {\n  vec2 b \x3d split(a.x);\n  b.y +\x3d a.y;\n  return b;\n}\nvec2 quickTwoSum(float a, float b) {\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float sum \x3d (a + b) * ONE;\n  float err \x3d b - (sum - a) * ONE;\n#else\n  float sum \x3d a + b;\n  float err \x3d b - (sum - a);\n#endif\n  return vec2(sum, err);\n}\nvec2 twoSum(float a, float b) {\n  float s \x3d (a + b);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float v \x3d (s * ONE - a) * ONE;\n  float err \x3d (a - (s - v) * ONE) * ONE * ONE * ONE + (b - v);\n#else\n  float v \x3d s - a;\n  float err \x3d (a - (s - v)) + (b - v);\n#endif\n  return vec2(s, err);\n}\n\nvec2 twoSub(float a, float b) {\n  float s \x3d (a - b);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float v \x3d (s * ONE - a) * ONE;\n  float err \x3d (a - (s - v) * ONE) * ONE * ONE * ONE - (b + v);\n#else\n  float v \x3d s - a;\n  float err \x3d (a - (s - v)) - (b + v);\n#endif\n  return vec2(s, err);\n}\n\nvec2 twoSqr(float a) {\n  float prod \x3d a * a;\n  vec2 a_fp64 \x3d split(a);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float err \x3d ((a_fp64.x * a_fp64.x - prod) * ONE + 2.0 * a_fp64.x *\n    a_fp64.y * ONE * ONE) + a_fp64.y * a_fp64.y * ONE * ONE * ONE;\n#else\n  float err \x3d ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;\n#endif\n  return vec2(prod, err);\n}\n\nvec2 twoProd(float a, float b) {\n  float prod \x3d a * b;\n  vec2 a_fp64 \x3d split(a);\n  vec2 b_fp64 \x3d split(b);\n  float err \x3d ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +\n    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;\n  return vec2(prod, err);\n}\n\nvec2 sum_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s \x3d twoSum(a.x, b.x);\n  t \x3d twoSum(a.y, b.y);\n  s.y +\x3d t.x;\n  s \x3d quickTwoSum(s.x, s.y);\n  s.y +\x3d t.y;\n  s \x3d quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 sub_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s \x3d twoSub(a.x, b.x);\n  t \x3d twoSub(a.y, b.y);\n  s.y +\x3d t.x;\n  s \x3d quickTwoSum(s.x, s.y);\n  s.y +\x3d t.y;\n  s \x3d quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 mul_fp64(vec2 a, vec2 b) {\n  vec2 prod \x3d twoProd(a.x, b.x);\n  prod.y +\x3d a.x * b.y;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  prod \x3d split2(prod);\n#endif\n  prod \x3d quickTwoSum(prod.x, prod.y);\n  prod.y +\x3d a.y * b.x;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  prod \x3d split2(prod);\n#endif\n  prod \x3d quickTwoSum(prod.x, prod.y);\n  return prod;\n}\n\nvec2 div_fp64(vec2 a, vec2 b) {\n  float xn \x3d 1.0 / b.x;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  vec2 yn \x3d mul_fp64(a, vec2(xn, 0));\n#else\n  vec2 yn \x3d a * xn;\n#endif\n  float diff \x3d (sub_fp64(a, mul_fp64(b, yn))).x;\n  vec2 prod \x3d twoProd(xn, diff);\n  return sum_fp64(yn, prod);\n}\n\nvec2 sqrt_fp64(vec2 a) {\n  if (a.x \x3d\x3d 0.0 \x26\x26 a.y \x3d\x3d 0.0) return vec2(0.0, 0.0);\n  if (a.x \x3c 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n\n  float x \x3d 1.0 / sqrt(a.x);\n  float yn \x3d a.x * x;\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  vec2 yn_sqr \x3d twoSqr(yn) * ONE;\n#else\n  vec2 yn_sqr \x3d twoSqr(yn);\n#endif\n  float diff \x3d sub_fp64(a, yn_sqr).x;\n  vec2 prod \x3d twoProd(x * 0.5, diff);\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  return sum_fp64(split(yn), prod);\n#else\n  return sum_fp64(vec2(yn, 0.0), prod);\n#endif\n}\n"}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$fp64$fp64_arithmetic_glsl.js.map
