shadow$provide.module$node_modules$$math_DOT_gl$culling$dist$es5$algorithms$compute_eigen_decomposition=function(global,require,module,exports){function offDiagonalFrobeniusNorm(matrix){for(var norm=0,i=0;3>i;++i){var temp=matrix[scratchMatrix.getElementIndex(colVal[i],rowVal[i])];norm+=2*temp*temp}return Math.sqrt(norm)}Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=function(matrix){var result=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},EIGEN_TOLERANCE=_core._MathUtils.EPSILON20,
count=0,sweep=0,unitaryMatrix=scratchUnitary,diagonalMatrix=scratchDiagonal;unitaryMatrix.identity();diagonalMatrix.copy(matrix);for(var norm=0,i=0;9>i;++i){var temp=diagonalMatrix[i];norm+=temp*temp}for(EIGEN_TOLERANCE*=Math.sqrt(norm);10>sweep&&offDiagonalFrobeniusNorm(diagonalMatrix)>EIGEN_TOLERANCE;){i=diagonalMatrix;norm=jMatrix;var tolerance=_core._MathUtils.EPSILON15;temp=0;for(var rotAxis=1,i$jscomp$0=0;3>i$jscomp$0;++i$jscomp$0){var temp$jscomp$0=Math.abs(i[scratchMatrix.getElementIndex(colVal[i$jscomp$0],
rowVal[i$jscomp$0])]);temp$jscomp$0>temp&&(rotAxis=i$jscomp$0,temp=temp$jscomp$0)}temp=rowVal[rotAxis];rotAxis=colVal[rotAxis];i$jscomp$0=1;temp$jscomp$0=0;Math.abs(i[scratchMatrix.getElementIndex(rotAxis,temp)])>tolerance&&(tolerance=i[scratchMatrix.getElementIndex(rotAxis,rotAxis)],i$jscomp$0=i[scratchMatrix.getElementIndex(temp,temp)],i=i[scratchMatrix.getElementIndex(rotAxis,temp)],i=(tolerance-i$jscomp$0)/2/i,i=0>i?-1/(-i+Math.sqrt(1+i*i)):1/(i+Math.sqrt(1+i*i)),i$jscomp$0=1/Math.sqrt(1+i*i),
temp$jscomp$0=i*i$jscomp$0);_core.Matrix3.IDENTITY.to(norm);norm[scratchMatrix.getElementIndex(temp,temp)]=norm[scratchMatrix.getElementIndex(rotAxis,rotAxis)]=i$jscomp$0;norm[scratchMatrix.getElementIndex(rotAxis,temp)]=temp$jscomp$0;norm[scratchMatrix.getElementIndex(temp,rotAxis)]=-temp$jscomp$0;jMatrixTranspose.copy(jMatrix).transpose();diagonalMatrix.multiplyRight(jMatrix);diagonalMatrix.multiplyLeft(jMatrixTranspose);unitaryMatrix.multiplyRight(jMatrix);2<++count&&(++sweep,count=0)}result.unitary=
unitaryMatrix.toTarget(result.unitary);result.diagonal=diagonalMatrix.toTarget(result.diagonal);return result};var _core=require("module$node_modules$$math_DOT_gl$core$dist$es5$index"),scratchMatrix=new _core.Matrix3,scratchUnitary=new _core.Matrix3,scratchDiagonal=new _core.Matrix3,jMatrix=new _core.Matrix3,jMatrixTranspose=new _core.Matrix3,rowVal=[1,0,0],colVal=[2,2,1]}
//# sourceMappingURL=module$node_modules$$math_DOT_gl$culling$dist$es5$algorithms$compute_eigen_decomposition.js.map
