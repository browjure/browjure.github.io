shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_fun_filters$hexagonalpixelate=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.hexagonalPixelate=void 0;exports.hexagonalPixelate={name:"hexagonalPixelate",uniforms:{center:{value:[.5,.5],hint:"screenspace"},scale:{value:10,min:1,softMin:5,softMax:50}},fs:"uniform vec2 center;\nuniform float scale;\n\nvec4 hexagonalPixelate_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec2 tex \x3d (texCoord * texSize - center * texSize) / scale;\n  tex.y /\x3d 0.866025404;\n  tex.x -\x3d tex.y * 0.5;\n\n  vec2 a;\n  if (tex.x + tex.y - floor(tex.x) - floor(tex.y) \x3c 1.0) {\n    a \x3d vec2(floor(tex.x), floor(tex.y));\n  }\n  else a \x3d vec2(ceil(tex.x), ceil(tex.y));\n  vec2 b \x3d vec2(ceil(tex.x), floor(tex.y));\n  vec2 c \x3d vec2(floor(tex.x), ceil(tex.y));\n\n  vec3 TEX \x3d vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);\n  vec3 A \x3d vec3(a.x, a.y, 1.0 - a.x - a.y);\n  vec3 B \x3d vec3(b.x, b.y, 1.0 - b.x - b.y);\n  vec3 C \x3d vec3(c.x, c.y, 1.0 - c.x - c.y);\n\n  float alen \x3d length(TEX - A);\n  float blen \x3d length(TEX - B);\n  float clen \x3d length(TEX - C);\n\n  vec2 choice;\n  if (alen \x3c blen) {\n    if (alen \x3c clen) choice \x3d a;\n    else choice \x3d c;\n  } else {\n    if (blen \x3c clen) choice \x3d b;\n    else choice \x3d c;\n  }\n\n  choice.x +\x3d choice.y * 0.5;\n  choice.y *\x3d 0.866025404;\n  choice *\x3d scale / texSize;\n\n  return texture2D(texture, choice + center);\n}\n",
passes:[{sampler:!0}]}}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_fun_filters$hexagonalpixelate.js.map
