{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator.js",
"lineCount":36,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nvar _shadertools = require(\"@luma.gl/shadertools\");\n\nvar _core2 = require(\"@deck.gl/core\");\n\nvar _gpuGridAggregatorConstants = require(\"./gpu-grid-aggregator-constants\");\n\nvar _aggregationOperationUtils = require(\"../aggregation-operation-utils\");\n\nvar _aggregateToGridVs = _interopRequireDefault(require(\"./aggregate-to-grid-vs.glsl\"));\n\nvar _aggregateToGridFs = _interopRequireDefault(require(\"./aggregate-to-grid-fs.glsl\"));\n\nvar _aggregateAllVs = _interopRequireDefault(require(\"./aggregate-all-vs.glsl\"));\n\nvar _aggregateAllFs = _interopRequireDefault(require(\"./aggregate-all-fs.glsl\"));\n\nvar _transformMeanVs = _interopRequireDefault(require(\"./transform-mean-vs.glsl\"));\n\nvar _resourceUtils = require(\"./../resource-utils.js\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nvar ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\nvar REQUIRED_FEATURES = [_core.FEATURES.WEBGL2, _core.FEATURES.COLOR_ATTACHMENT_RGBA32F, _core.FEATURES.BLEND_EQUATION_MINMAX, _core.FEATURES.FLOAT_BLEND, _core.FEATURES.TEXTURE_FLOAT];\n\nvar GPUGridAggregator = function () {\n  (0, _createClass2[\"default\"])(GPUGridAggregator, null, [{\n    key: \"getAggregationData\",\n    value: function getAggregationData(_ref) {\n      var aggregationData = _ref.aggregationData,\n          maxData = _ref.maxData,\n          minData = _ref.minData,\n          maxMinData = _ref.maxMinData,\n          pixelIndex = _ref.pixelIndex;\n      var index = pixelIndex * _gpuGridAggregatorConstants.PIXEL_SIZE;\n      var results = {};\n\n      if (aggregationData) {\n        results.cellCount = aggregationData[index + 3];\n        results.cellWeight = aggregationData[index];\n      }\n\n      if (maxMinData) {\n        results.maxCellWieght = maxMinData[0];\n        results.minCellWeight = maxMinData[3];\n      } else {\n        if (maxData) {\n          results.maxCellWieght = maxData[0];\n          results.totalCount = maxData[3];\n        }\n\n        if (minData) {\n          results.minCellWeight = minData[0];\n          results.totalCount = maxData[3];\n        }\n      }\n\n      return results;\n    }\n  }, {\n    key: \"getCellData\",\n    value: function getCellData(_ref2) {\n      var countsData = _ref2.countsData,\n          _ref2$size = _ref2.size,\n          size = _ref2$size === void 0 ? 1 : _ref2$size;\n      var numCells = countsData.length / 4;\n      var cellWeights = new Float32Array(numCells * size);\n      var cellCounts = new Uint32Array(numCells);\n\n      for (var i = 0; i < numCells; i++) {\n        for (var sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n          cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n        }\n\n        cellCounts[i] = countsData[i * 4 + 3];\n      }\n\n      return {\n        cellCounts: cellCounts,\n        cellWeights: cellWeights\n      };\n    }\n  }, {\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return (0, _core.hasFeatures)(gl, REQUIRED_FEATURES);\n    }\n  }]);\n\n  function GPUGridAggregator(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _classCallCheck2[\"default\"])(this, GPUGridAggregator);\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n      resources: {},\n      results: {}\n    };\n    this._hasGPUSupport = (0, _core.isWebGL2)(gl) && (0, _core.hasFeatures)(this.gl, _core.FEATURES.BLEND_EQUATION_MINMAX, _core.FEATURES.COLOR_ATTACHMENT_RGBA32F, _core.FEATURES.TEXTURE_FLOAT);\n\n    if (this._hasGPUSupport) {\n      this._setupModels();\n    }\n  }\n\n  (0, _createClass2[\"default\"])(GPUGridAggregator, [{\n    key: \"delete\",\n    value: function _delete() {\n      var gridAggregationModel = this.gridAggregationModel,\n          allAggregationModel = this.allAggregationModel,\n          meanTransform = this.meanTransform;\n      var _this$state = this.state,\n          textures = _this$state.textures,\n          framebuffers = _this$state.framebuffers,\n          maxMinFramebuffers = _this$state.maxMinFramebuffers,\n          minFramebuffers = _this$state.minFramebuffers,\n          maxFramebuffers = _this$state.maxFramebuffers,\n          meanTextures = _this$state.meanTextures,\n          resources = _this$state.resources;\n      gridAggregationModel && gridAggregationModel[\"delete\"]();\n      allAggregationModel && allAggregationModel[\"delete\"]();\n      meanTransform && meanTransform[\"delete\"]();\n      deleteResources([framebuffers, textures, maxMinFramebuffers, minFramebuffers, maxFramebuffers, meanTextures, resources]);\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.setState({\n        results: {}\n      });\n\n      var aggregationParams = this._normalizeAggregationParams(opts);\n\n      if (!this._hasGPUSupport) {\n        _core2.log.log(1, 'GPUGridAggregator: not supported')();\n      }\n\n      return this._runAggregation(aggregationParams);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(weightId) {\n      var data = {};\n      var results = this.state.results;\n\n      if (!results[weightId].aggregationData) {\n        results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n      }\n\n      data.aggregationData = results[weightId].aggregationData;\n\n      for (var arrayName in ARRAY_BUFFER_MAP) {\n        var bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n        if (results[weightId][arrayName] || results[weightId][bufferName]) {\n          results[weightId][arrayName] = results[weightId][arrayName] || results[weightId][bufferName].getData();\n          data[arrayName] = results[weightId][arrayName];\n        }\n      }\n\n      return data;\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders() {\n      var shaderOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.setState({\n        shaderOptions: shaderOptions,\n        modelDirty: true\n      });\n    }\n  }, {\n    key: \"_normalizeAggregationParams\",\n    value: function _normalizeAggregationParams(opts) {\n      var aggregationParams = Object.assign({}, _gpuGridAggregatorConstants.DEFAULT_RUN_PARAMS, opts);\n      var weights = aggregationParams.weights;\n\n      if (weights) {\n        aggregationParams.weights = normalizeWeightParams(weights);\n      }\n\n      return aggregationParams;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      Object.assign(this.state, updateObject);\n    }\n  }, {\n    key: \"_getAggregateData\",\n    value: function _getAggregateData(opts) {\n      var results = {};\n      var _this$state2 = this.state,\n          textures = _this$state2.textures,\n          framebuffers = _this$state2.framebuffers,\n          maxMinFramebuffers = _this$state2.maxMinFramebuffers,\n          minFramebuffers = _this$state2.minFramebuffers,\n          maxFramebuffers = _this$state2.maxFramebuffers,\n          resources = _this$state2.resources;\n      var weights = opts.weights;\n\n      for (var id in weights) {\n        results[id] = {};\n        var _weights$id = weights[id],\n            needMin = _weights$id.needMin,\n            needMax = _weights$id.needMax,\n            combineMaxMin = _weights$id.combineMaxMin;\n        results[id].aggregationTexture = textures[id];\n        results[id].aggregationBuffer = (0, _core.readPixelsToBuffer)(framebuffers[id], {\n          target: weights[id].aggregationBuffer,\n          sourceType: 5126\n        });\n\n        if (needMin && needMax && combineMaxMin) {\n          results[id].maxMinBuffer = (0, _core.readPixelsToBuffer)(maxMinFramebuffers[id], {\n            target: weights[id].maxMinBuffer,\n            sourceType: 5126\n          });\n          results[id].maxMinTexture = resources[\"\".concat(id, \"-maxMinTexture\")];\n        } else {\n          if (needMin) {\n            results[id].minBuffer = (0, _core.readPixelsToBuffer)(minFramebuffers[id], {\n              target: weights[id].minBuffer,\n              sourceType: 5126\n            });\n            results[id].minTexture = resources[\"\".concat(id, \"-minTexture\")];\n          }\n\n          if (needMax) {\n            results[id].maxBuffer = (0, _core.readPixelsToBuffer)(maxFramebuffers[id], {\n              target: weights[id].maxBuffer,\n              sourceType: 5126\n            });\n            results[id].maxTexture = resources[\"\".concat(id, \"-maxTexture\")];\n          }\n        }\n      }\n\n      this._trackGPUResultBuffers(results, weights);\n\n      return results;\n    }\n  }, {\n    key: \"_renderAggregateData\",\n    value: function _renderAggregateData(opts) {\n      var cellSize = opts.cellSize,\n          projectPoints = opts.projectPoints,\n          attributes = opts.attributes,\n          moduleSettings = opts.moduleSettings,\n          numCol = opts.numCol,\n          numRow = opts.numRow,\n          weights = opts.weights,\n          translation = opts.translation,\n          scaling = opts.scaling;\n      var _this$state3 = this.state,\n          maxMinFramebuffers = _this$state3.maxMinFramebuffers,\n          minFramebuffers = _this$state3.minFramebuffers,\n          maxFramebuffers = _this$state3.maxFramebuffers;\n      var gridSize = [numCol, numRow];\n      var parameters = {\n        blend: true,\n        depthTest: false,\n        blendFunc: [1, 1]\n      };\n      var uniforms = {\n        cellSize: cellSize,\n        gridSize: gridSize,\n        projectPoints: projectPoints,\n        translation: translation,\n        scaling: scaling\n      };\n\n      for (var id in weights) {\n        var _weights$id2 = weights[id],\n            needMin = _weights$id2.needMin,\n            needMax = _weights$id2.needMax;\n        var combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n        this._renderToWeightsTexture({\n          id: id,\n          parameters: parameters,\n          moduleSettings: moduleSettings,\n          uniforms: uniforms,\n          gridSize: gridSize,\n          attributes: attributes,\n          weights: weights\n        });\n\n        if (combineMaxMin) {\n          this._renderToMaxMinTexture({\n            id: id,\n            parameters: Object.assign({}, parameters, {\n              blendEquation: _gpuGridAggregatorConstants.MAX_MIN_BLEND_EQUATION\n            }),\n            gridSize: gridSize,\n            minOrMaxFb: maxMinFramebuffers[id],\n            clearParams: {\n              clearColor: [0, 0, 0, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT]\n            },\n            combineMaxMin: combineMaxMin\n          });\n        } else {\n          if (needMin) {\n            this._renderToMaxMinTexture({\n              id: id,\n              parameters: Object.assign({}, parameters, {\n                blendEquation: _gpuGridAggregatorConstants.MIN_BLEND_EQUATION\n              }),\n              gridSize: gridSize,\n              minOrMaxFb: minFramebuffers[id],\n              clearParams: {\n                clearColor: [_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, 0]\n              },\n              combineMaxMin: combineMaxMin\n            });\n          }\n\n          if (needMax) {\n            this._renderToMaxMinTexture({\n              id: id,\n              parameters: Object.assign({}, parameters, {\n                blendEquation: _gpuGridAggregatorConstants.MAX_BLEND_EQUATION\n              }),\n              gridSize: gridSize,\n              minOrMaxFb: maxFramebuffers[id],\n              clearParams: {\n                clearColor: [0, 0, 0, 0]\n              },\n              combineMaxMin: combineMaxMin\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_renderToMaxMinTexture\",\n    value: function _renderToMaxMinTexture(opts) {\n      var id = opts.id,\n          parameters = opts.parameters,\n          gridSize = opts.gridSize,\n          minOrMaxFb = opts.minOrMaxFb,\n          combineMaxMin = opts.combineMaxMin,\n          _opts$clearParams = opts.clearParams,\n          clearParams = _opts$clearParams === void 0 ? {} : _opts$clearParams;\n      var framebuffers = this.state.framebuffers;\n      var gl = this.gl,\n          allAggregationModel = this.allAggregationModel;\n      (0, _core.withParameters)(gl, _objectSpread(_objectSpread({}, clearParams), {}, {\n        framebuffer: minOrMaxFb,\n        viewport: [0, 0, gridSize[0], gridSize[1]]\n      }), function () {\n        gl.clear(16384);\n        allAggregationModel.draw({\n          parameters: parameters,\n          uniforms: {\n            uSampler: framebuffers[id].texture,\n            gridSize: gridSize,\n            combineMaxMin: combineMaxMin\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_renderToWeightsTexture\",\n    value: function _renderToWeightsTexture(opts) {\n      var id = opts.id,\n          parameters = opts.parameters,\n          moduleSettings = opts.moduleSettings,\n          uniforms = opts.uniforms,\n          gridSize = opts.gridSize,\n          weights = opts.weights;\n      var _this$state4 = this.state,\n          framebuffers = _this$state4.framebuffers,\n          equations = _this$state4.equations,\n          weightAttributes = _this$state4.weightAttributes;\n      var gl = this.gl,\n          gridAggregationModel = this.gridAggregationModel;\n      var operation = weights[id].operation;\n      var clearColor = operation === _aggregationOperationUtils.AGGREGATION_OPERATION.MIN ? [_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, 0] : [0, 0, 0, 0];\n      (0, _core.withParameters)(gl, {\n        framebuffer: framebuffers[id],\n        viewport: [0, 0, gridSize[0], gridSize[1]],\n        clearColor: clearColor\n      }, function () {\n        gl.clear(16384);\n        var attributes = {\n          weights: weightAttributes[id]\n        };\n        gridAggregationModel.draw({\n          parameters: Object.assign({}, parameters, {\n            blendEquation: equations[id]\n          }),\n          moduleSettings: moduleSettings,\n          uniforms: uniforms,\n          attributes: attributes\n        });\n      });\n\n      if (operation === _aggregationOperationUtils.AGGREGATION_OPERATION.MEAN) {\n        var _this$state5 = this.state,\n            meanTextures = _this$state5.meanTextures,\n            textures = _this$state5.textures;\n        var transformOptions = {\n          _sourceTextures: {\n            aggregationValues: meanTextures[id]\n          },\n          _targetTexture: textures[id],\n          elementCount: textures[id].width * textures[id].height\n        };\n\n        if (this.meanTransform) {\n          this.meanTransform.update(transformOptions);\n        } else {\n          this.meanTransform = getMeanTransform(gl, transformOptions);\n        }\n\n        this.meanTransform.run({\n          parameters: {\n            blend: false,\n            depthTest: false\n          }\n        });\n        framebuffers[id].attach((0, _defineProperty2[\"default\"])({}, 36064, textures[id]));\n      }\n    }\n  }, {\n    key: \"_runAggregation\",\n    value: function _runAggregation(opts) {\n      this._updateModels(opts);\n\n      this._setupFramebuffers(opts);\n\n      this._renderAggregateData(opts);\n\n      var results = this._getAggregateData(opts);\n\n      this.setState({\n        results: results\n      });\n      return results;\n    }\n  }, {\n    key: \"_setupFramebuffers\",\n    value: function _setupFramebuffers(opts) {\n      var _this$state6 = this.state,\n          textures = _this$state6.textures,\n          framebuffers = _this$state6.framebuffers,\n          maxMinFramebuffers = _this$state6.maxMinFramebuffers,\n          minFramebuffers = _this$state6.minFramebuffers,\n          maxFramebuffers = _this$state6.maxFramebuffers,\n          meanTextures = _this$state6.meanTextures,\n          equations = _this$state6.equations;\n      var weights = opts.weights;\n      var numCol = opts.numCol,\n          numRow = opts.numRow;\n      var framebufferSize = {\n        width: numCol,\n        height: numRow\n      };\n\n      for (var id in weights) {\n        var _weights$id3 = weights[id],\n            needMin = _weights$id3.needMin,\n            needMax = _weights$id3.needMax,\n            combineMaxMin = _weights$id3.combineMaxMin,\n            operation = _weights$id3.operation;\n        textures[id] = weights[id].aggregationTexture || textures[id] || (0, _resourceUtils.getFloatTexture)(this.gl, {\n          id: \"\".concat(id, \"-texture\"),\n          width: numCol,\n          height: numRow\n        });\n        textures[id].resize(framebufferSize);\n        var texture = textures[id];\n\n        if (operation === _aggregationOperationUtils.AGGREGATION_OPERATION.MEAN) {\n          meanTextures[id] = meanTextures[id] || (0, _resourceUtils.getFloatTexture)(this.gl, {\n            id: \"\".concat(id, \"-mean-texture\"),\n            width: numCol,\n            height: numRow\n          });\n          meanTextures[id].resize(framebufferSize);\n          texture = meanTextures[id];\n        }\n\n        if (framebuffers[id]) {\n          framebuffers[id].attach((0, _defineProperty2[\"default\"])({}, 36064, texture));\n        } else {\n          framebuffers[id] = (0, _resourceUtils.getFramebuffer)(this.gl, {\n            id: \"\".concat(id, \"-fb\"),\n            width: numCol,\n            height: numRow,\n            texture: texture\n          });\n        }\n\n        framebuffers[id].resize(framebufferSize);\n        equations[id] = _gpuGridAggregatorConstants.EQUATION_MAP[operation] || _gpuGridAggregatorConstants.EQUATION_MAP.SUM;\n\n        if (needMin || needMax) {\n          if (needMin && needMax && combineMaxMin) {\n            if (!maxMinFramebuffers[id]) {\n              texture = weights[id].maxMinTexture || this._getMinMaxTexture(\"\".concat(id, \"-maxMinTexture\"));\n              maxMinFramebuffers[id] = (0, _resourceUtils.getFramebuffer)(this.gl, {\n                id: \"\".concat(id, \"-maxMinFb\"),\n                texture: texture\n              });\n            }\n          } else {\n            if (needMin) {\n              if (!minFramebuffers[id]) {\n                texture = weights[id].minTexture || this._getMinMaxTexture(\"\".concat(id, \"-minTexture\"));\n                minFramebuffers[id] = (0, _resourceUtils.getFramebuffer)(this.gl, {\n                  id: \"\".concat(id, \"-minFb\"),\n                  texture: texture\n                });\n              }\n            }\n\n            if (needMax) {\n              if (!maxFramebuffers[id]) {\n                texture = weights[id].maxTexture || this._getMinMaxTexture(\"\".concat(id, \"-maxTexture\"));\n                maxFramebuffers[id] = (0, _resourceUtils.getFramebuffer)(this.gl, {\n                  id: \"\".concat(id, \"-maxFb\"),\n                  texture: texture\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_getMinMaxTexture\",\n    value: function _getMinMaxTexture(name) {\n      var resources = this.state.resources;\n\n      if (!resources[name]) {\n        resources[name] = (0, _resourceUtils.getFloatTexture)(this.gl, {\n          id: \"resourceName\"\n        });\n      }\n\n      return resources[name];\n    }\n  }, {\n    key: \"_setupModels\",\n    value: function _setupModels() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$numCol = _ref3.numCol,\n          numCol = _ref3$numCol === void 0 ? 0 : _ref3$numCol,\n          _ref3$numRow = _ref3.numRow,\n          numRow = _ref3$numRow === void 0 ? 0 : _ref3$numRow;\n\n      var gl = this.gl;\n      var shaderOptions = this.state.shaderOptions;\n\n      if (this.gridAggregationModel) {\n        this.gridAggregationModel[\"delete\"]();\n      }\n\n      this.gridAggregationModel = getAggregationModel(gl, shaderOptions);\n\n      if (!this.allAggregationModel) {\n        var instanceCount = numCol * numRow;\n        this.allAggregationModel = getAllAggregationModel(gl, instanceCount);\n      }\n    }\n  }, {\n    key: \"_setupWeightAttributes\",\n    value: function _setupWeightAttributes(opts) {\n      var weightAttributes = this.state.weightAttributes;\n      var weights = opts.weights;\n\n      for (var id in weights) {\n        weightAttributes[id] = opts.attributes[id];\n      }\n    }\n  }, {\n    key: \"_trackGPUResultBuffers\",\n    value: function _trackGPUResultBuffers(results, weights) {\n      var resources = this.state.resources;\n\n      for (var id in results) {\n        if (results[id]) {\n          var _iterator = _createForOfIteratorHelper(BUFFER_NAMES),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var bufferName = _step.value;\n\n              if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n                var name = \"gpu-result-\".concat(id, \"-\").concat(bufferName);\n\n                if (resources[name]) {\n                  resources[name][\"delete\"]();\n                }\n\n                resources[name] = results[id][bufferName];\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateModels\",\n    value: function _updateModels(opts) {\n      var vertexCount = opts.vertexCount,\n          attributes = opts.attributes,\n          numCol = opts.numCol,\n          numRow = opts.numRow;\n      var modelDirty = this.state.modelDirty;\n\n      if (modelDirty) {\n        this._setupModels(opts);\n\n        this.setState({\n          modelDirty: false\n        });\n      }\n\n      this._setupWeightAttributes(opts);\n\n      this.gridAggregationModel.setVertexCount(vertexCount);\n      this.gridAggregationModel.setAttributes(attributes);\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }]);\n  return GPUGridAggregator;\n}();\n\nexports[\"default\"] = GPUGridAggregator;\n\nfunction normalizeWeightParams(weights) {\n  var result = {};\n\n  for (var id in weights) {\n    result[id] = Object.assign({}, _gpuGridAggregatorConstants.DEFAULT_WEIGHT_PARAMS, weights[id]);\n  }\n\n  return result;\n}\n\nfunction deleteResources(resources) {\n  resources = Array.isArray(resources) ? resources : [resources];\n  resources.forEach(function (obj) {\n    for (var name in obj) {\n      obj[name][\"delete\"]();\n    }\n  });\n}\n\nfunction getAggregationModel(gl, shaderOptions) {\n  var shaders = (0, _core2._mergeShaders)({\n    vs: _aggregateToGridVs[\"default\"],\n    fs: _aggregateToGridFs[\"default\"],\n    modules: [_shadertools.fp64arithmetic, _core2.project32]\n  }, shaderOptions);\n  return new _core.Model(gl, _objectSpread({\n    id: 'Gird-Aggregation-Model',\n    vertexCount: 1,\n    drawMode: 0\n  }, shaders));\n}\n\nfunction getAllAggregationModel(gl, instanceCount) {\n  return new _core.Model(gl, {\n    id: 'All-Aggregation-Model',\n    vs: _aggregateAllVs[\"default\"],\n    fs: _aggregateAllFs[\"default\"],\n    modules: [_shadertools.fp64arithmetic],\n    vertexCount: 1,\n    drawMode: 0,\n    isInstanced: true,\n    instanceCount: instanceCount,\n    attributes: {\n      position: [0, 0]\n    }\n  });\n}\n\nfunction getMeanTransform(gl, opts) {\n  return new _core.Transform(gl, Object.assign({}, {\n    vs: _transformMeanVs[\"default\"],\n    _targetTextureVarying: 'meanValues'\n  }, opts));\n}\n//# sourceMappingURL=gpu-grid-aggregator.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","call","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","deleteResources","resources","obj","_interopRequireDefault","_classCallCheck2","_createClass2","_core","_shadertools","_core2","_gpuGridAggregatorConstants","_aggregationOperationUtils","_aggregateToGridVs","_aggregateToGridFs","_aggregateAllVs","_aggregateAllFs","_transformMeanVs","_resourceUtils","BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","REQUIRED_FEATURES","FEATURES","WEBGL2","COLOR_ATTACHMENT_RGBA32F","BLEND_EQUATION_MINMAX","FLOAT_BLEND","TEXTURE_FLOAT","GPUGridAggregator","gl","opts","undefined","id","state","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","results","_hasGPUSupport","isWebGL2","hasFeatures","_setupModels","getAggregationData","_ref","aggregationData","index","pixelIndex","PIXEL_SIZE","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","getCellData","_ref2","countsData","_ref2$size","size","numCells","cellWeights","Float32Array","cellCounts","Uint32Array","sizeIndex","isSupported","_delete","gridAggregationModel","allAggregationModel","meanTransform","_this$state","run","setState","aggregationParams","_normalizeAggregationParams","log","_runAggregation","getData","weightId","data","aggregationBuffer","arrayName","bufferName","updateShaders","shaderOptions","modelDirty","assign","DEFAULT_RUN_PARAMS","weights","result","DEFAULT_WEIGHT_PARAMS","updateObject","_getAggregateData","_this$state2","_weights$id","needMin","needMax","combineMaxMin","aggregationTexture","readPixelsToBuffer","sourceType","maxMinBuffer","maxMinTexture","concat","minBuffer","minTexture","maxBuffer","maxTexture","_trackGPUResultBuffers","_renderAggregateData","attributes","moduleSettings","_this$state3","gridSize","numCol","numRow","parameters","blend","depthTest","blendFunc","uniforms","cellSize","projectPoints","translation","scaling","_weights$id2","_renderToWeightsTexture","_renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","_opts$clearParams","withParameters","framebuffer","viewport","clear","draw","uSampler","texture","_this$state4","operation","AGGREGATION_OPERATION","MIN","MEAN","_this$state5","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","width","height","update","Transform","vs","_targetTextureVarying","attach","_updateModels","_setupFramebuffers","_this$state6","framebufferSize","_weights$id3","getFloatTexture","resize","getFramebuffer","EQUATION_MAP","SUM","_getMinMaxTexture","_ref3","_ref3$numCol","_ref3$numRow","shaders","_mergeShaders","fs","modules","fp64arithmetic","project32","Model","vertexCount","drawMode","isInstanced","instanceCount","position","_setupWeightAttributes","_iterator","_step","setVertexCount","setAttributes","setInstanceCount"]
}
