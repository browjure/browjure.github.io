{"version":3,"sources":["org/browjure/base.cljs"],"mappings":"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","names":["js/org","js/org.browjure","js/org.browjure.base","js/org.browjure.base.router_","org.browjure.base/router_","cljs.core.atom","org.browjure.base/stop-router!","temp__5753__auto__","cljs.core/deref","stop-f","org.browjure.base/?csrf-token","el","js/document","map__67768","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","packer","taoensso.sente.packers.transit.get_transit_packer","chsk","ch-recv","send-fn","state","taoensso.sente.make_channel_socket_client_BANG_","org.browjure.base/chsk","org.browjure.base/ch-chsk","org.browjure.base/chsk-send!","org.browjure.base/chsk-state","org.browjure.base/registry","org.browjure.base/make-component","js/console.log","js/window","org.browjure.state/set-path-value","org.browjure.state/use-combined-sub","org.browjure.state/use-path-sub","org.browjure.state/window-resolve","hx.react/f","goog.object/set","goog.object/get","helix.core/$","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","seq67770","self__4724__auto__","cljs.core/seq","argss","cljs.core/second","compiled-component-fn","org.browjure.state/compile","cljs.core/first","js/module$node_modules$react$index.createElement","org.browjure.base/browjure-components->react-element","form","cljs.core/vector?","component","and__4115__auto__","cljs.core/rest","org.browjure.base/handle-command","command","G__67771","cljs.core/Keyword","G__67772","cljs.core.swap_BANG_","cljs.core/merge","js/setTimeout","id","or__4126__auto__","cljs.core/name","base-path-handler","cljs.core._EQ_","clojure.string/replace","hiccup","clojure.walk/postwalk","fexpr__67773","org.browjure.base/handler","msg","cljs.core.not_EQ_","vec__67774","cljs.core.nth","vec__67777","sente-event","browjure-event","lib-event","org.browjure.base/start-router!","cljs.core/reset!","taoensso.sente/start-client-chsk-router!","org.browjure.base/load-commands!","js/fetch","response","number-of-commands","cljs.core.doall","cljs.core.map","i","p1__67780#","command-str","cognitect.transit/read","cognitect.transit.reader","cljs.core.range","log","G__67781","cljs.core.pr_str","G__67782"],"sourcesContent":["(ns org.browjure.base\n  (:require\n   [org.browjure.state :as st :refer\n    [use-combined-sub use-path-sub set-path-value compile window-resolve]]\n   [taoensso.sente  :as sente :refer (cb-success?)]\n   [taoensso.sente.packers.transit  :as sente-transit]\n   [cognitect.transit :as transit]\n   [react :as react]\n   [helix.core :refer [$ defnc]]\n   [hx.react :as hx]\n   [sci.core :as sci]\n   [goog.object :as gobj]))\n\n(defonce router_ (atom nil))\n\n(defn stop-router! [] (when-let [stop-f @router_] (stop-f)))\n\n(def ?csrf-token\n  (when-let [el (.getElementById js/document \"sente-csrf-token\")]\n    (.getAttribute el \"data-csrf-token\")))\n\n(let [packer (sente-transit/get-transit-packer)\n      {:keys [chsk ch-recv send-fn state]}\n      (sente/make-channel-socket-client!\n       \"/chsk\" ; Must match server Ring routing URL\n       ?csrf-token\n       {:type   :ws\n        :csrf-token ?csrf-token\n        :packer packer})]\n\n  (def chsk       chsk)\n  (def ch-chsk    ch-recv) ; ChannelSocket's receive channel\n  (def chsk-send! send-fn) ; ChannelSocket's send API fn\n  (def chsk-state state)   ; Watchable, read-only atom\n  )\n\n(declare make-component)\n\n(def registry\n  (atom {:hiccup-fn make-component\n         :bindings {'js/console.log js/console.log\n                    'js/document    js/document\n                    'js/window      js/window\n                    'set-path-value   set-path-value\n                    'use-combined-sub use-combined-sub\n                    'use-path-sub     use-path-sub\n                    'window-resolve window-resolve\n                    'hx.react/f hx.react/f\n                    'gset gobj/set\n                    'gget gobj/get\n                    '$ $}}))\n\n(defn make-component [& argss]\n  (js/console.log argss (second argss))\n  (let [compiled-component-fn (compile (first argss) (-> @registry\n                                                        :bindings))]\n    (js/console.log \"compiled\" compiled-component-fn)\n    (react/createElement compiled-component-fn #js {} #js [])))\n\n(defn browjure-components->react-element [form]\n  (js/console.log \"form \" form)\n  (cond\n    (and (vector? form)\n         (get @registry (first form)))\n    (let [component (window-resolve (get @registry (first form)))]\n      (js/console.log (get @registry (first form)))\n      (if (and component (.-displayName component))\n        (apply $ component (rest form))\n        (apply (window-resolve (get @registry (first form)))\n               (rest form))))\n    :else form))\n\n(defn handle-command [command]\n  (case (:type command)\n    :clear-cache\n    (.reload (.-location js/window) true)\n    :register-plugin\n    (do (when (-> command :payload :base-path)\n          (.append (.-head js/document)\n                   (doto (.createElement js/document \"script\")\n                     (.setAttribute \"type\" \"text/javascript\")\n                     (.setAttribute \"src\" (-> command :payload :base-path)))))\n        (swap! registry merge (-> command :payload :sablono :hiccup-tag->factory-symbol))\n        (js/setTimeout #(let [id (or (:namespace (:payload command)) (name (:id command)))\n                              base-path-handler (if (= (:id command) \"browjure\")\n                                                  (aget (aget (aget (aget js/window \"org\") id)\n                                                              \"base\")\n                                                        \"handler\")\n                                                  (aget (aget (aget (aget (aget js/window \"org\") \"browjure\")\n                                                                    (clojure.string/replace id \"-\" \"_\"))\n                                                              \"base\")\n                                                        \"handler\"))]\n                          (js/console.log \"calling base handler with register plugin command\" id command)\n                          (base-path-handler command))\n                       1000)) ;;need timeout to let library load?\n    :view-sablono\n    (let [hiccup\n          (clojure.walk/postwalk\n           browjure-components->react-element\n           command)]\n      (apply (window-resolve 'org.browjure.sablono.base/handler) [hiccup]))\n    :set-path-value\n    (set-path-value (-> command :payload :path) (-> command :payload :value))\n    (let [id (name (:id command))]\n      (js/console.log \"else\" command)\n      ((aget (aget (aget (aget (aget js/window \"org\") \"browjure\") (clojure.string/replace id \"-\" \"_\")) \"base\") \"handler\") command))))\n\n(defn handler [msg]\n  (when (and (= :chsk/recv (first (:event msg)))\n             (not= :chsk/ws-ping (first (second (:event msg)))))\n    (let [[sente-event [browjure-event lib-event]] (:event msg)]\n      (js/console.log  @registry)\n      (js/console.log \"event type\" (= :view-sablono (:type lib-event)) (:type lib-event) lib-event)\n      (when (= browjure-event :event/echo) (handle-command lib-event)))))\n\n(defn start-router! []\n  (stop-router!)\n  (reset! router_\n          (sente/start-client-chsk-router!\n           ch-chsk handler)))\n\n(start-router!)\n\n(defn load-commands! []\n  (.then (js/fetch \"commands.json\")\n         (fn [response]\n           (.then (.json response)\n                  (fn [number-of-commands]\n                    (doall (map (fn [i] (js/setTimeout\n                                         (fn []\n                                           (.then (js/fetch (str \"command-\" i \".json\"))\n                                                  #(.then (.text %)\n                                                          (fn [command-str]\n                                                            (js/console.log \"handling command: \" i)\n                                                            (handle-command\n                                                             (transit/read\n                                                              (transit/reader :json)\n                                                              command-str))))))\n                                         (* 1000 i)))\n                                (range number-of-commands))))))))\n\n(let [log (.-log (.-console js/window))]\n  (set! (.-log (.-console js/window))\n        (fn []\n          (chsk-send! [:browjure/log (pr-str (js-arguments))])\n          (apply log (js-arguments)))))\n\n(set! (.-onerror js/window)\n      (fn []\n        (chsk-send! [:browjure/error (pr-str (js-arguments))])\n        (apply (.-error (.-console js/window)) (js-arguments))))\n"]}