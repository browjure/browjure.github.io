{"version":3,"sources":["org/browjure/base.cljs"],"mappings":"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","names":["js/org","js/org.browjure","js/org.browjure.base","js/org.browjure.base.router_","org.browjure.base/router_","cljs.core.atom","org.browjure.base/stop-router!","temp__5753__auto__","cljs.core/deref","stop-f","org.browjure.base/?csrf-token","el","js/document","map__72355","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","packer","taoensso.sente.packers.transit.get_transit_packer","chsk","ch-recv","send-fn","state","taoensso.sente.make_channel_socket_client_BANG_","org.browjure.base/chsk","org.browjure.base/ch-chsk","org.browjure.base/chsk-send!","org.browjure.base/chsk-state","G__72359","props__61744__auto__","maybe-ref__61745__auto__","vec__72360","helix.core/extract-cljs-props","map__72363","cljs.core.nth","goog/DEBUG","G__72420","goog.object/set","org.browjure.base/control-component","type","path","value","style","onChange","on-change","sci.core.eval_string","cljs.core.pr_str","js/console.log","values","org.browjure.state/use-path-sub","G__72365","js/Error","iter__4529__auto__","s__72384","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__72386","cljs.core/chunk-buffer","i__72385","vec__72393","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__72383","cljs.core/chunk-rest","vec__72413","cljs.core/first","cljs.core/cons","cljs.core/rest","control-name","control-val","helix.core/get-react","obj72381","helix.impl.props/native-style","obj72407","obj72412","obj72417","obj72419","e","new-values","cljs.core.assoc","org.browjure.state/set-path-value","org.browjure.base/hiccup-registry","org.browjure.base/window-resolve","symbol","cljs.core.conj","clojure.string.split","clojure.string/replace","cljs.core/namespace","cljs.core/name","p1__72421#","p2__72422#","cljs.core.reduce","js/window","org.browjure.base/connected","org.browjure.base/handle-command","command","cljs.core._EQ_","cljs.core/reset!","G__72425","cljs.core.swap_BANG_","cljs.core/merge","js/setTimeout","id","or__4126__auto__","base-path-handler","react-componentized","p1__72423#","clojure.walk/postwalk","cljs.core/vector?","make-component","cljs.core.into","cljs.core.concat","G__72426","cljs.core/second","cljs.core.drop","hiccup","p1__72424#","component","helix.core/$","vec__72427","seq__72428","first__72429","cljs.core/next","_","element","props","G__72430","cljs.core/clj->js","fexpr__72431","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","org.browjure.base/make-component","seq72432","G__72433","self__4723__auto__","material-component-fn","rest","js/module$node_modules$react$index.createElement","org.browjure.state/compile","form","cljs.core.sequence","cljs.core/List","org.browjure.base/handler","msg","cljs.core.not_EQ_","vec__72434","vec__72437","sente-event","browjure-event","lib-event","org.browjure.base/start-router!","taoensso.sente/start-client-chsk-router!","cljs.core/not","js/fetch","response","number-of-commands","cljs.core.doall","cljs.core.map","i","p1__72440#","command-str","cognitect.transit/read","cognitect.transit.reader","cljs.core.range","log","G__72441","G__72442","cljs.core/chunk-first"],"sourcesContent":["(ns org.browjure.base\n  (:require\n   [org.browjure.state :as st :refer\n    [use-path-sub set-path-value use-combined-sub compile]]\n   [taoensso.sente  :as sente :refer (cb-success?)]\n   [taoensso.sente.packers.transit  :as sente-transit]\n   [cognitect.transit :as transit]\n   [react :as react]\n   [helix.core :refer [$ defnc]]\n   [hx.react :as hx]\n   [sci.core :as sci]\n   [goog.object :as gobj]))\n\n(defonce router_ (atom nil))\n\n(defn stop-router! [] (when-let [stop-f @router_] (stop-f)))\n\n(def ?csrf-token\n  (when-let [el (.getElementById js/document \"sente-csrf-token\")]\n    (.getAttribute el \"data-csrf-token\")))\n\n(let [packer (sente-transit/get-transit-packer)\n      {:keys [chsk ch-recv send-fn state]}\n      (sente/make-channel-socket-client!\n       \"/chsk\" ; Must match server Ring routing URL\n       ?csrf-token\n       {:type   :ws\n        :csrf-token ?csrf-token\n        :packer packer})]\n\n  (def chsk       chsk)\n  (def ch-chsk    ch-recv) ; ChannelSocket's receive channel\n  (def chsk-send! send-fn) ; ChannelSocket's send API fn\n  (def chsk-state state)   ; Watchable, read-only atom\n  )\n\n(defnc control-component [{:keys [type path value style onChange]}]\n  (let [on-change (sci/eval-string\n                  (pr-str (aget onChange \"rep\"))\n                  {:bindings {'js/console.log js/console.log\n                              'js/document    js/document}\n                   :classes {:allow :all}})\n        values    (use-path-sub path value)]\n    (case type\n      \"edn-multi-checkbox\"\n      ($ :div\n         {:style style}\n         (for [[control-name control-val] values]\n           ($ :label\n              {:key control-name} control-name\n              ($ :input\n                 {:type \"checkbox\"\n                  :checked control-val\n                  :onChange (fn [e]\n                              (let [new-values (assoc values control-name (.-checked (.-target e)))]\n                                (set-path-value path new-values)\n                                (on-change new-values)))})))))))\n\n(def hiccup-registry\n  (atom {:browjure/control 'org.browjure.base/control-component}))\n\n(defn window-resolve [symbol]\n  (js/console.log \"split ns\" (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                                         \".\")\n                                   (clojure.string/replace (name symbol) \"-\" \"_\")))\n  (reduce #(aget %1 %2)\n          js/window\n          (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                      \".\")\n                (clojure.string/replace (name symbol) \"-\" \"_\"))))\n\n(def connected (atom false))\n\n(defn handle-command [command] ;;todo break this fn up, doing too much\n  (js/console.log command)\n  (when (= :register-plugin (:type command)) (reset! connected true))\n  (cond\n    (= :clear-cache (:type command))\n    (.reload (.-location js/window) true)\n    (= :register-plugin (:type command))\n    (do (when (-> command :payload :base-path)\n          (.append (.-head js/document)\n                   (doto (.createElement js/document \"script\")\n                     (.setAttribute \"type\" \"text/javascript\")\n                     (.setAttribute \"src\" (-> command :payload :base-path)))))\n        (swap! hiccup-registry merge (-> command :payload :sablono :hiccup-tag->factory-symbol))\n        (js/setTimeout #(let [id (or (:namespace (:payload command)) (name (:id command)))\n                              base-path-handler (if (= (:id command) \"browjure\")\n                                                  (aget (aget (aget (aget js/window \"org\") id)\n                                                              \"base\")\n                                                        \"handler\")\n                                                  (aget (aget (aget (aget (aget js/window \"org\") \"browjure\")\n                                                                    (clojure.string/replace id \"-\" \"_\"))\n                                                              \"base\")\n                                                        \"handler\"))]\n                          (js/console.log \"calling base handler with register plugin command\" id command)\n                          (base-path-handler command))\n                       1000)) ;;need timeout to let library load?\n    (= :view-sablono (:type command))\n    (let [react-componentized\n          (clojure.walk/postwalk\n           #(cond\n              (and (vector? %)\n                   (= :react-fn-component (first %)))\n              (let [make-component (window-resolve 'org.browjure.material-ui.base/make-component)]\n                (into [] (concat [:built-react-fn-component\n                                  (make-component (second %))]\n                                 (drop 2 %))))\n              :else %)\n           command)\n          hiccup\n          (clojure.walk/postwalk\n           #(cond\n              (and (vector? %)\n                   (get @hiccup-registry (first %)))\n              (let [component (window-resolve (get @hiccup-registry (first %)))]\n                (if (.-displayName component)\n                  (apply $ component (rest %))\n                  (apply (window-resolve (get @hiccup-registry (first %)))\n                         (rest %))))\n              (and (vector? %)\n                   (= (first %) :built-react-fn-component))\n              (let [[_ element & props] %]\n                (element (clj->js (first props))))\n              :else %)\n           react-componentized)]\n      (apply (window-resolve 'org.browjure.sablono.base/handler) [hiccup]))\n    (= :set-path-value (:type command))\n    (set-path-value (-> command :payload :path) (-> command :payload :value))\n    :else\n    (let [id (name (:id command))]\n      (js/console.log \"else\" command)\n      ((aget (aget (aget (aget (aget js/window \"org\") \"browjure\") (clojure.string/replace id \"-\" \"_\")) \"base\") \"handler\") command))))\n\n\n(defn make-component [material-component-fn & rest]\n  (apply #(react/createElement\n           (compile (clojure.walk/postwalk (fn [form]\n                                             (if (and (vector? form) (= (first form) :style)) [(first form) `(~'clj->js ~(second form))] form))\n                                           material-component-fn))) rest))\n\n(defn handler [msg]\n  (when (and (= :chsk/recv (first (:event msg)))\n             (not= :chsk/ws-ping (first (second (:event msg)))))\n    (let [[sente-event [browjure-event lib-event]] (:event msg)]\n      (js/console.log  @hiccup-registry)\n      (js/console.log \"event type\" (= :view-sablono (:type lib-event)) (:type lib-event) lib-event)\n      (when (= browjure-event :event/echo) (handle-command lib-event)))))\n\n(defn start-router! []\n  (stop-router!)\n  (reset! router_\n          (sente/start-client-chsk-router!\n           ch-chsk handler)))\n\n(start-router!)\n\n(js/setTimeout\n (fn []\n   (js/console.log \"connected to back-end?\" @connected)\n   ;;when not connected in 5 seconds assume offline usage\n   (when (not @connected)\n     (.then (js/fetch \"commands.json\")\n            (fn [response]\n              (.then (.json response)\n                     (fn [number-of-commands]\n                       (doall (map (fn [i] (js/setTimeout\n                                            (fn []\n                                              (.then (js/fetch (str \"command-\" i \".json\"))\n                                                     #(.then (.text %)\n                                                             (fn [command-str]\n                                                               (js/console.log \"handling command: \" i)\n                                                               (handle-command\n                                                                (transit/read\n                                                                 (transit/reader :json)\n                                                                 command-str))))))\n                                            (* 1000 i)))\n                                   (range number-of-commands)))))))))\n 5000)\n\n(let [log (.-log (.-console js/window))]\n  (set! (.-log (.-console js/window))\n        (fn []\n          (chsk-send! [:browjure/log (pr-str (js-arguments))])\n          (apply log (js-arguments)))))\n\n(set! (.-onerror js/window)\n      (fn []\n        (chsk-send! [:browjure/error (pr-str (js-arguments))])\n        (apply (.-error (.-console js/window)) (js-arguments))))\n"]}