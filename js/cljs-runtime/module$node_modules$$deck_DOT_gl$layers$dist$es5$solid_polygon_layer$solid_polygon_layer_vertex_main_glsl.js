shadow$provide.module$node_modules$$deck_DOT_gl$layers$dist$es5$solid_polygon_layer$solid_polygon_layer_vertex_main_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;exports["default"]="\nattribute vec2 vertexPositions;\nattribute float vertexValid;\n\nuniform bool extruded;\nuniform bool isWireframe;\nuniform float elevationScale;\nuniform float opacity;\n\nvarying vec4 vColor;\n\nstruct PolygonProps {\n  vec4 fillColors;\n  vec4 lineColors;\n  vec3 positions;\n  vec3 nextPositions;\n  vec3 pickingColors;\n  vec3 positions64Low;\n  vec3 nextPositions64Low;\n  float elevations;\n};\n\nvec3 project_offset_normal(vec3 vector) {\n  if (project_uCoordinateSystem \x3d\x3d COORDINATE_SYSTEM_LNGLAT ||\n    project_uCoordinateSystem \x3d\x3d COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    return normalize(vector * project_uCommonUnitsPerWorldUnit);\n  }\n  return project_normal(vector);\n}\n\nvoid calculatePosition(PolygonProps props) {\n#ifdef IS_SIDE_VERTEX\n  if(vertexValid \x3c 0.5){\n    gl_Position \x3d vec4(0.);\n    return;\n  }\n#endif\n\n  vec3 pos;\n  vec3 pos64Low;\n  vec3 normal;\n  vec4 colors \x3d isWireframe ? props.lineColors : props.fillColors;\n\n  geometry.worldPosition \x3d props.positions;\n  geometry.worldPositionAlt \x3d props.nextPositions;\n  geometry.pickingColor \x3d props.pickingColors;\n\n#ifdef IS_SIDE_VERTEX\n  pos \x3d mix(props.positions, props.nextPositions, vertexPositions.x);\n  pos64Low \x3d mix(props.positions64Low, props.nextPositions64Low, vertexPositions.x);\n#else\n  pos \x3d props.positions;\n  pos64Low \x3d props.positions64Low;\n#endif\n\n  if (extruded) {\n    pos.z +\x3d props.elevations * vertexPositions.y * elevationScale;\n\n#ifdef IS_SIDE_VERTEX\n    normal \x3d vec3(\n      props.positions.y - props.nextPositions.y + (props.positions64Low.y - props.nextPositions64Low.y),\n      props.nextPositions.x - props.positions.x + (props.nextPositions64Low.x - props.positions64Low.x),\n      0.0);\n    normal \x3d project_offset_normal(normal);\n#else\n    normal \x3d vec3(0.0, 0.0, 1.0);\n#endif\n    geometry.normal \x3d normal;\n  }\n\n  gl_Position \x3d project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  if (extruded) {\n    vec3 lightColor \x3d lighting_getLightColor(colors.rgb, project_uCameraPosition, geometry.position.xyz, normal);\n    vColor \x3d vec4(lightColor, colors.a * opacity);\n  } else {\n    vColor \x3d vec4(colors.rgb, colors.a * opacity);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n"}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$layers$dist$es5$solid_polygon_layer$solid_polygon_layer_vertex_main_glsl.js.map
