{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$gpu_grid_layer$gpu_grid_layer.js",
"lineCount":21,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/gpu-grid-layer/gpu-grid-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$gpu_grid_layer$gpu_grid_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nvar _core2 = require(\"@deck.gl/core\");\n\nvar _gpuGridAggregator = _interopRequireDefault(require(\"../utils/gpu-grid-aggregation/gpu-grid-aggregator\"));\n\nvar _aggregationOperationUtils = require(\"../utils/aggregation-operation-utils\");\n\nvar _colorUtils = require(\"../utils/color-utils\");\n\nvar _gpuGridCellLayer = _interopRequireDefault(require(\"./gpu-grid-cell-layer\"));\n\nvar _gridAggregator = require(\"./../cpu-grid-layer/grid-aggregator\");\n\nvar _gridAggregationLayer = _interopRequireDefault(require(\"../grid-aggregation-layer\"));\n\nvar _gridAggregationUtils = require(\"../utils/grid-aggregation-utils\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: _colorUtils.defaultColorRange,\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  extruded: false,\n  material: true\n};\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n};\nvar POSITION_ATTRIBUTE_NAME = 'positions';\n\nvar GPUGridLayer = function (_GridAggregationLayer) {\n  (0, _inherits2[\"default\"])(GPUGridLayer, _GridAggregationLayer);\n\n  var _super = _createSuper(GPUGridLayer);\n\n  function GPUGridLayer() {\n    (0, _classCallCheck2[\"default\"])(this, GPUGridLayer);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2[\"default\"])(GPUGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n\n      var gl = this.context.gl;\n\n      var isSupported = _gpuGridAggregator[\"default\"].isSupported(gl);\n\n      if (!isSupported) {\n        _core2.log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n      }\n\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GPUGridLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS\n      });\n      this.setState({\n        gpuAggregation: true,\n        projectPoints: false,\n        isSupported: isSupported,\n        weights: {\n          color: {\n            needMin: true,\n            needMax: true,\n            combineMaxMin: true,\n            maxMinBuffer: new _core.Buffer(gl, {\n              byteLength: 4 * 4,\n              accessor: {\n                size: 4,\n                type: 5126,\n                divisor: 1\n              }\n            })\n          },\n          elevation: {\n            needMin: true,\n            needMax: true,\n            combineMaxMin: true,\n            maxMinBuffer: new _core.Buffer(gl, {\n              byteLength: 4 * 4,\n              accessor: {\n                size: 4,\n                type: 5126,\n                divisor: 1\n              }\n            })\n          }\n        },\n        positionAttributeName: 'positions'\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, (0, _defineProperty2[\"default\"])(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), (0, _defineProperty2[\"default\"])(_attributeManager$add, \"color\", {\n        size: 3,\n        accessor: 'getColorWeight'\n      }), (0, _defineProperty2[\"default\"])(_attributeManager$add, \"elevation\", {\n        size: 3,\n        accessor: 'getElevationWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (this.state.isSupported === false) {\n        return;\n      }\n\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GPUGridLayer.prototype), \"updateState\", this).call(this, opts);\n      var aggregationDirty = this.state.aggregationDirty;\n\n      if (aggregationDirty) {\n        this.setState({\n          gridHash: null\n        });\n      }\n    }\n  }, {\n    key: \"getHashKeyForIndex\",\n    value: function getHashKeyForIndex(index) {\n      var _this$state = this.state,\n          numRow = _this$state.numRow,\n          numCol = _this$state.numCol,\n          boundingBox = _this$state.boundingBox,\n          gridOffset = _this$state.gridOffset;\n      var gridSize = [numCol, numRow];\n      var gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n      var cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      var yIndex = Math.floor(index / gridSize[0]);\n      var xIndex = index - yIndex * gridSize[0];\n      var latIdx = Math.floor((yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]);\n      var lonIdx = Math.floor((xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]);\n      return \"\".concat(latIdx, \"-\").concat(lonIdx);\n    }\n  }, {\n    key: \"getPositionForIndex\",\n    value: function getPositionForIndex(index) {\n      var _this$state2 = this.state,\n          numRow = _this$state2.numRow,\n          numCol = _this$state2.numCol,\n          boundingBox = _this$state2.boundingBox,\n          gridOffset = _this$state2.gridOffset;\n      var gridSize = [numCol, numRow];\n      var gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n      var cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      var yIndex = Math.floor(index / gridSize[0]);\n      var xIndex = index - yIndex * gridSize[0];\n      var yPos = yIndex * cellSize[1] + gridOrigin[1];\n      var xPos = xIndex * cellSize[0] + gridOrigin[0];\n      return [xPos, yPos];\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info,\n          mode = _ref.mode;\n      var index = info.index;\n      var object = null;\n\n      if (index >= 0) {\n        var gpuGridAggregator = this.state.gpuGridAggregator;\n        var position = this.getPositionForIndex(index);\n\n        var colorInfo = _gpuGridAggregator[\"default\"].getAggregationData(Object.assign({\n          pixelIndex: index\n        }, gpuGridAggregator.getData('color')));\n\n        var elevationInfo = _gpuGridAggregator[\"default\"].getAggregationData(Object.assign({\n          pixelIndex: index\n        }, gpuGridAggregator.getData('elevation')));\n\n        object = {\n          colorValue: colorInfo.cellWeight,\n          elevationValue: elevationInfo.cellWeight,\n          count: colorInfo.cellCount || elevationInfo.cellCount,\n          position: position,\n          totalCount: colorInfo.totalCount || elevationInfo.totalCount\n        };\n\n        if (mode !== 'hover') {\n          var props = this.props;\n          var gridHash = this.state.gridHash;\n\n          if (!gridHash) {\n            var _this$state3 = this.state,\n                gridOffset = _this$state3.gridOffset,\n                translation = _this$state3.translation,\n                boundingBox = _this$state3.boundingBox;\n            var viewport = this.context.viewport;\n            var attributes = this.getAttributes();\n            var cpuAggregation = (0, _gridAggregator.pointToDensityGridDataCPU)(props, {\n              gridOffset: gridOffset,\n              attributes: attributes,\n              viewport: viewport,\n              translation: translation,\n              boundingBox: boundingBox\n            });\n            gridHash = cpuAggregation.gridHash;\n            this.setState({\n              gridHash: gridHash\n            });\n          }\n\n          var key = this.getHashKeyForIndex(index);\n          var cpuAggregationData = gridHash[key];\n          Object.assign(object, cpuAggregationData);\n        }\n      }\n\n      return Object.assign(info, {\n        picked: Boolean(object),\n        object: object\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.isSupported) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          cellSizeMeters = _this$props.cellSize,\n          coverage = _this$props.coverage,\n          material = _this$props.material,\n          elevationRange = _this$props.elevationRange,\n          colorDomain = _this$props.colorDomain,\n          elevationDomain = _this$props.elevationDomain;\n      var _this$state4 = this.state,\n          weights = _this$state4.weights,\n          numRow = _this$state4.numRow,\n          numCol = _this$state4.numCol,\n          gridOrigin = _this$state4.gridOrigin,\n          gridOffset = _this$state4.gridOffset;\n      var color = weights.color,\n          elevation = weights.elevation;\n      var colorRange = (0, _colorUtils.colorRangeToFlatArray)(this.props.colorRange);\n      var SubLayerClass = this.getSubLayerClass('gpu-grid-cell', _gpuGridCellLayer[\"default\"]);\n      return new SubLayerClass({\n        gridSize: [numCol, numRow],\n        gridOrigin: gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange: colorRange,\n        elevationRange: elevationRange,\n        colorDomain: colorDomain,\n        elevationDomain: elevationDomain,\n        cellSize: cellSizeMeters,\n        coverage: coverage,\n        material: material,\n        elevationScale: elevationScale,\n        extruded: extruded\n      }, this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }), {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state$weights = this.state.weights,\n          color = _this$state$weights.color,\n          elevation = _this$state$weights.elevation;\n      [color, elevation].forEach(function (weight) {\n        var aggregationBuffer = weight.aggregationBuffer,\n            maxMinBuffer = weight.maxMinBuffer;\n        maxMinBuffer[\"delete\"]();\n\n        if (aggregationBuffer) {\n          aggregationBuffer[\"delete\"]();\n        }\n      });\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GPUGridLayer.prototype), \"finalizeState\", this).call(this);\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var props = opts.props,\n          oldProps = opts.oldProps;\n      var cellSize = props.cellSize,\n          coordinateSystem = props.coordinateSystem;\n      var viewport = this.context.viewport;\n      var cellSizeChanged = oldProps.cellSize !== cellSize;\n      var dimensions = this.state.dimensions;\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var attributesChanged = positionsChanged || this.isAttributeChanged();\n      var boundingBox = this.state.boundingBox;\n\n      if (positionsChanged) {\n        boundingBox = (0, _gridAggregationUtils.getBoundingBox)(this.getAttributes(), this.getNumInstances());\n        this.setState({\n          boundingBox: boundingBox\n        });\n      }\n\n      if (positionsChanged || cellSizeChanged) {\n        var _getGridParams = (0, _gridAggregationUtils.getGridParams)(boundingBox, cellSize, viewport, coordinateSystem),\n            gridOffset = _getGridParams.gridOffset,\n            translation = _getGridParams.translation,\n            width = _getGridParams.width,\n            height = _getGridParams.height,\n            numCol = _getGridParams.numCol,\n            numRow = _getGridParams.numRow;\n\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          gridOffset: gridOffset,\n          translation: translation,\n          gridOrigin: [-1 * translation[0], -1 * translation[1]],\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n\n      var aggregationDataDirty = attributesChanged || this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n      if (aggregationDataDirty) {\n        this._updateAccessors(opts);\n      }\n\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty\n      });\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n          colorAggregation = _opts$props.colorAggregation,\n          elevationAggregation = _opts$props.elevationAggregation;\n      var _this$state$weights2 = this.state.weights,\n          color = _this$state$weights2.color,\n          elevation = _this$state$weights2.elevation;\n      color.operation = _aggregationOperationUtils.AGGREGATION_OPERATION[colorAggregation];\n      elevation.operation = _aggregationOperationUtils.AGGREGATION_OPERATION[elevationAggregation];\n    }\n  }]);\n  return GPUGridLayer;\n}(_gridAggregationLayer[\"default\"]);\n\nexports[\"default\"] = GPUGridLayer;\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n//# sourceMappingURL=gpu-grid-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","NewTarget","constructor","result","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Date","prototype","toString","call","e","_interopRequireDefault","Object","defineProperty","value","_defineProperty2","_classCallCheck2","_createClass2","_get2","_inherits2","_core","_core2","_gpuGridAggregator","_aggregationOperationUtils","_colorUtils","_gpuGridCellLayer","_gridAggregator","_gridAggregationLayer","_gridAggregationUtils","defaultProps","colorDomain","colorRange","defaultColorRange","getColorWeight","type","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","x","position","extruded","material","DIMENSIONS","data","props","GPUGridLayer","_GridAggregationLayer","_super","key","initializeState","_attributeManager$add","gl","context","isSupported","log","error","dimensions","setState","gpuAggregation","projectPoints","weights","color","needMin","needMax","combineMaxMin","maxMinBuffer","Buffer","byteLength","accessor","size","divisor","elevation","positionAttributeName","attributeManager","getAttributeManager","add","POSITION_ATTRIBUTE_NAME","fp64","use64bitPositions","updateState","opts","state","aggregationDirty","gridHash","getHashKeyForIndex","index","_this$state","boundingBox","gridOffset","gridSize","numCol","numRow","gridOrigin","xMin","yMin","xOffset","yOffset","yIndex","Math","floor","lonIdx","concat","latIdx","getPositionForIndex","_this$state2","getPickingInfo","_ref","info","mode","object","gpuGridAggregator","colorInfo","getAggregationData","assign","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","_this$state3","translation","viewport","attributes","getAttributes","cpuAggregation","pointToDensityGridDataCPU","cpuAggregationData","picked","renderLayers","_this$props","cellSizeMeters","_this$state4","colorRangeToFlatArray","SubLayerClass","getSubLayerClass","getSubLayerProps","id","colors","aggregationBuffer","elevations","colorMaxMinBuffer","elevationMaxMinBuffer","numInstances","finalizeState","_this$state$weights","forEach","weight","updateAggregationState","coordinateSystem","cellSizeChanged","oldProps","positionsChanged","isAttributeChanged","attributesChanged","getBoundingBox","getNumInstances","_getGridParams","getGridParams","width","height","allocateResources","aggregationDataDirty","isAggregationDirty","dimension","compareAll","_updateAccessors","_opts$props","_this$state$weights2","operation","AGGREGATION_OPERATION","layerName"]
}
