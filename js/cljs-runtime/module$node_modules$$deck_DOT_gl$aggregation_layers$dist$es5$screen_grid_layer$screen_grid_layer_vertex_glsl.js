shadow$provide.module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_layer_vertex_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;exports["default"]="#define SHADER_NAME screen-grid-layer-vertex-shader\n#define RANGE_COUNT 6\n\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec4 instanceCounts;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\nuniform sampler2D maxTexture;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor \x3d vec4(0., 0., 0., 0.);\n  if (value \x3e\x3d domain.x \x26\x26 value \x3c\x3d domain.y) {\n    float domainRange \x3d domain.y - domain.x;\n    if (domainRange \x3c\x3d 0.) {\n      outColor \x3d colorRange[0];\n    } else {\n      float rangeCount \x3d float(RANGE_COUNT);\n      float rangeStep \x3d domainRange / rangeCount;\n      float idx \x3d floor((value - domain.x) / rangeStep);\n      idx \x3d clamp(idx, 0., rangeCount - 1.);\n      int intIdx \x3d int(idx);\n      outColor \x3d colorRange[intIdx];\n    }\n  }\n  outColor \x3d outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount \x3d instanceCounts.a;\n\n  float weight \x3d instanceCounts.r;\n  float maxWeight \x3d texture2D(maxTexture, vec2(0.5)).r;\n\n  float step \x3d weight / maxWeight;\n  vec4 minMaxColor \x3d mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain \x3d colorDomain;\n  float domainMaxValid \x3d float(colorDomain.y !\x3d 0.);\n  domain.y \x3d mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor \x3d quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax \x3d float(shouldUseMinMax);\n  vec4 color \x3d mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor \x3d vec4(color.rgb, color.a * opacity);\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position \x3d vec4(instancePositions + positions * cellScale, 1.);\n}\n"}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_layer_vertex_glsl.js.map
