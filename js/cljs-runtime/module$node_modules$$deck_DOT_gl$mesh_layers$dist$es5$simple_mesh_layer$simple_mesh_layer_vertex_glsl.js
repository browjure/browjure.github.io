shadow$provide.module$node_modules$$deck_DOT_gl$mesh_layers$dist$es5$simple_mesh_layer$simple_mesh_layer_vertex_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;exports["default"]="#version 300 es\n#define SHADER_NAME simple-mesh-layer-vs\nuniform float sizeScale;\nuniform bool composeModelMatrix;\nin vec3 positions;\nin vec3 normals;\nin vec3 colors;\nin vec2 texCoords;\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin mat3 instanceModelMatrix;\nin vec3 instanceTranslation;\nout vec2 vTexCoord;\nout vec3 cameraPosition;\nout vec3 normals_commonspace;\nout vec4 position_commonspace;\nout vec4 vColor;\n\nvoid main(void) {\n  geometry.worldPosition \x3d instancePositions;\n  geometry.uv \x3d texCoords;\n  geometry.pickingColor \x3d instancePickingColors;\n\n  vTexCoord \x3d texCoords;\n  cameraPosition \x3d project_uCameraPosition;\n  normals_commonspace \x3d project_normal(instanceModelMatrix * normals);\n  vColor \x3d vec4(colors * instanceColors.rgb, instanceColors.a);\n  geometry.normal \x3d normals_commonspace;\n\n  vec3 pos \x3d (instanceModelMatrix * positions) * sizeScale + instanceTranslation;\n\n  if (composeModelMatrix) {\n    DECKGL_FILTER_SIZE(pos, geometry);\n    gl_Position \x3d project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), position_commonspace);\n  }\n  else {\n    pos \x3d project_size(pos);\n    DECKGL_FILTER_SIZE(pos, geometry);\n    gl_Position \x3d project_position_to_clipspace(instancePositions, instancePositions64Low, pos, position_commonspace);\n  }\n\n  geometry.position \x3d position_commonspace;\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n"}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$mesh_layers$dist$es5$simple_mesh_layer$simple_mesh_layer_vertex_glsl.js.map
