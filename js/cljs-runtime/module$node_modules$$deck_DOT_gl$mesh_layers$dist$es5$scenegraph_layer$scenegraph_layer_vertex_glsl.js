shadow$provide.module$node_modules$$deck_DOT_gl$mesh_layers$dist$es5$scenegraph_layer$scenegraph_layer_vertex_glsl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;exports["default"]="#version 300 es\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin mat3 instanceModelMatrix;\nin vec3 instanceTranslation;\nuniform float sizeScale;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform mat4 sceneModelMatrix;\nuniform bool composeModelMatrix;\nin vec4 POSITION;\n\n#ifdef HAS_UV\n  in vec2 TEXCOORD_0;\n#endif\n\n#ifdef MODULE_PBR\n  #ifdef HAS_NORMALS\n    in vec4 NORMAL;\n  #endif\n#endif\nout vec4 vColor;\n#ifndef MODULE_PBR\n  #ifdef HAS_UV\n    out vec2 vTEXCOORD_0;\n  #endif\n#endif\nvoid main(void) {\n  #if defined(HAS_UV) \x26\x26 !defined(MODULE_PBR)\n    vTEXCOORD_0 \x3d TEXCOORD_0;\n    geometry.uv \x3d vTEXCOORD_0;\n  #endif\n\n  geometry.worldPosition \x3d instancePositions;\n  geometry.pickingColor \x3d instancePickingColors;\n\n  #ifdef MODULE_PBR\n    #ifdef HAS_NORMALS\n      pbr_vNormal \x3d project_normal(instanceModelMatrix * (sceneModelMatrix * vec4(NORMAL.xyz, 0.0)).xyz);\n      geometry.normal \x3d pbr_vNormal;\n    #endif\n\n    #ifdef HAS_UV\n      pbr_vUV \x3d TEXCOORD_0;\n    #else\n      pbr_vUV \x3d vec2(0., 0.);\n    #endif\n    geometry.uv \x3d pbr_vUV;\n  #endif\n\n  float originalSize \x3d project_size_to_pixel(sizeScale);\n  float clampedSize \x3d clamp(originalSize, sizeMinPixels, sizeMaxPixels);\n\n  vec3 pos \x3d (instanceModelMatrix * (sceneModelMatrix * POSITION).xyz) * sizeScale * (clampedSize / originalSize) + instanceTranslation;\n  if(composeModelMatrix) {\n    DECKGL_FILTER_SIZE(pos, geometry);\n    gl_Position \x3d project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n  }\n  else {\n    pos \x3d project_size(pos);\n    DECKGL_FILTER_SIZE(pos, geometry);\n    gl_Position \x3d project_position_to_clipspace(instancePositions, instancePositions64Low, pos, geometry.position);\n  }\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  #ifdef MODULE_PBR\n    pbr_vPosition \x3d geometry.position.xyz;\n  #endif\n\n  vColor \x3d instanceColors;\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n"}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$mesh_layers$dist$es5$scenegraph_layer$scenegraph_layer_vertex_glsl.js.map
