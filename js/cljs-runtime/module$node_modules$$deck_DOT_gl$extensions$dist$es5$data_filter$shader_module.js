shadow$provide.module$node_modules$$deck_DOT_gl$extensions$dist$es5$data_filter$shader_module=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.shaderModule64=exports.shaderModule=void 0;var getUniforms=function(opts){if(!opts||!opts.extensions)return{};var _opts$filterRange=opts.filterRange;_opts$filterRange=void 0===_opts$filterRange?[-1,1]:_opts$filterRange;var _opts$filterEnabled=opts.filterEnabled;_opts$filterEnabled=void 0===_opts$filterEnabled?
!0:_opts$filterEnabled;var _opts$filterTransform=opts.filterTransformSize;_opts$filterTransform=void 0===_opts$filterTransform?!0:_opts$filterTransform;var _opts$filterTransform2=opts.filterTransformColor;_opts$filterTransform2=void 0===_opts$filterTransform2?!0:_opts$filterTransform2;var filterSoftRange=opts.filterSoftRange||_opts$filterRange;_opts$filterRange=Number.isFinite(_opts$filterRange[0])?{filter_min:_opts$filterRange[0],filter_softMin:filterSoftRange[0],filter_softMax:filterSoftRange[1],
filter_max:_opts$filterRange[1]}:{filter_min:_opts$filterRange.map(function(r){return r[0]}),filter_softMin:filterSoftRange.map(function(r){return r[0]}),filter_softMax:filterSoftRange.map(function(r){return r[1]}),filter_max:_opts$filterRange.map(function(r){return r[1]})};_opts$filterRange.filter_enabled=_opts$filterEnabled;_opts$filterRange.filter_useSoftMargin=!!opts.filterSoftRange;_opts$filterRange.filter_transformSize=_opts$filterEnabled&&_opts$filterTransform;_opts$filterRange.filter_transformColor=
_opts$filterEnabled&&_opts$filterTransform2;return _opts$filterRange};global={"vs:#main-start":"\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  ","vs:DECKGL_FILTER_SIZE":"\n    if (filter_transformSize) {\n      size \x3d size * dataFilter_value;\n    }\n  ",
"fs:DECKGL_FILTER_COLOR":"\n    if (dataFilter_value \x3d\x3d 0.0) discard;\n    if (filter_transformColor) {\n      color.a *\x3d dataFilter_value;\n    }\n  "};exports.shaderModule={name:"data-filter",vs:"\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value \x3d dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value \x3d dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value \x3d 1.0;\n  }\n}\n",
fs:"\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n",inject:global,getUniforms};exports.shaderModule64={name:"data-filter-fp64",vs:"\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value \x3d dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value \x3d dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value \x3d 1.0;\n  }\n}\n",
fs:"\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n",inject:global,getUniforms:function(opts){if(!opts||!opts.extensions)return{};opts=getUniforms(opts);if(Number.isFinite(opts.filter_min)){var min64High=Math.fround(opts.filter_min);opts.filter_min-=min64High;opts.filter_softMin-=min64High;opts.filter_min64High=min64High;min64High=Math.fround(opts.filter_max);opts.filter_max-=min64High;opts.filter_softMax-=min64High;opts.filter_max64High=min64High}else{var _min64High=opts.filter_min.map(Math.fround);
opts.filter_min=opts.filter_min.map(function(x,i){return x-_min64High[i]});opts.filter_softMin=opts.filter_softMin.map(function(x,i){return x-_min64High[i]});opts.filter_min64High=_min64High;var _max64High=opts.filter_max.map(Math.fround);opts.filter_max=opts.filter_max.map(function(x,i){return x-_max64High[i]});opts.filter_softMax=opts.filter_softMax.map(function(x,i){return x-_max64High[i]});opts.filter_max64High=_max64High}return opts}}}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$extensions$dist$es5$data_filter$shader_module.js.map
