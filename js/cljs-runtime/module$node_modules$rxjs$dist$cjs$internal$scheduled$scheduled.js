shadow$provide.module$node_modules$rxjs$dist$cjs$internal$scheduled$scheduled=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.scheduled=void 0;var scheduleObservable_1=require("module$node_modules$rxjs$dist$cjs$internal$scheduled$scheduleObservable"),schedulePromise_1=require("module$node_modules$rxjs$dist$cjs$internal$scheduled$schedulePromise"),scheduleArray_1=require("module$node_modules$rxjs$dist$cjs$internal$scheduled$scheduleArray"),scheduleIterable_1=
require("module$node_modules$rxjs$dist$cjs$internal$scheduled$scheduleIterable"),scheduleAsyncIterable_1=require("module$node_modules$rxjs$dist$cjs$internal$scheduled$scheduleAsyncIterable"),isInteropObservable_1=require("module$node_modules$rxjs$dist$cjs$internal$util$isInteropObservable"),isPromise_1=require("module$node_modules$rxjs$dist$cjs$internal$util$isPromise"),isArrayLike_1=require("module$node_modules$rxjs$dist$cjs$internal$util$isArrayLike"),isIterable_1=require("module$node_modules$rxjs$dist$cjs$internal$util$isIterable"),
isAsyncIterable_1=require("module$node_modules$rxjs$dist$cjs$internal$util$isAsyncIterable"),throwUnobservableError_1=require("module$node_modules$rxjs$dist$cjs$internal$util$throwUnobservableError"),isReadableStreamLike_1=require("module$node_modules$rxjs$dist$cjs$internal$util$isReadableStreamLike"),scheduleReadableStreamLike_1=require("module$node_modules$rxjs$dist$cjs$internal$scheduled$scheduleReadableStreamLike");exports.scheduled=function(input,scheduler){if(null!=input){if(isInteropObservable_1.isInteropObservable(input))return scheduleObservable_1.scheduleObservable(input,
scheduler);if(isArrayLike_1.isArrayLike(input))return scheduleArray_1.scheduleArray(input,scheduler);if(isPromise_1.isPromise(input))return schedulePromise_1.schedulePromise(input,scheduler);if(isAsyncIterable_1.isAsyncIterable(input))return scheduleAsyncIterable_1.scheduleAsyncIterable(input,scheduler);if(isIterable_1.isIterable(input))return scheduleIterable_1.scheduleIterable(input,scheduler);if(isReadableStreamLike_1.isReadableStreamLike(input))return scheduleReadableStreamLike_1.scheduleReadableStreamLike(input,
scheduler)}throw throwUnobservableError_1.createInvalidObservableTypeError(input);}}
//# sourceMappingURL=module$node_modules$rxjs$dist$cjs$internal$scheduled$scheduled.js.map
