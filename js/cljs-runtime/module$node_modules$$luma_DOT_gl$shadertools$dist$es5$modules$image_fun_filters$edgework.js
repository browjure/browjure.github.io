shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_fun_filters$edgework=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.edgeWork=void 0;global=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$utils$random");exports.edgeWork={name:"edgeWork",uniforms:{radius:{value:2,min:1,softMax:50},delta:{value:[1,0],"private":!0}},fs:"uniform float radius;\nuniform vec2 delta;\n\nvec4 edgeWork_sampleColor1(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 relativeDelta \x3d radius * delta / texSize;\n\n  vec2 color \x3d vec2(0.0);\n  vec2 total \x3d vec2(0.0);\n  float offset \x3d random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t \x3d -30.0; t \x3c\x3d 30.0; t++) {\n    float percent \x3d (t + offset - 0.5) / 30.0;\n    float weight \x3d 1.0 - abs(percent);\n    vec3 sampleColor \x3d texture2D(source, texCoord + relativeDelta * percent).rgb;\n    float average \x3d (sampleColor.r + sampleColor.g + sampleColor.b) / 3.0;\n    color.x +\x3d average * weight;\n    total.x +\x3d weight;\n    if (abs(t) \x3c 15.0) {\n      weight \x3d weight * 2.0 - 1.0;\n      color.y +\x3d average * weight;\n      total.y +\x3d weight;\n    }\n  }\n  return vec4(color / total, 0.0, 1.0);\n}\n\nvec4 edgeWork_sampleColor2(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 relativeDelta \x3d radius * delta / texSize;\n\n  vec2 color \x3d vec2(0.0);\n  vec2 total \x3d vec2(0.0);\n  float offset \x3d random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t \x3d -30.0; t \x3c\x3d 30.0; t++) {\n    float percent \x3d (t + offset - 0.5) / 30.0;\n    float weight \x3d 1.0 - abs(percent);\n    vec2 sampleColor \x3d texture2D(source, texCoord + relativeDelta * percent).xy;\n    color.x +\x3d sampleColor.x * weight;\n    total.x +\x3d weight;\n    if (abs(t) \x3c 15.0) {\n      weight \x3d weight * 2.0 - 1.0;\n      color.y +\x3d sampleColor.y * weight;\n      total.y +\x3d weight;\n    }\n  }\n  float c \x3d clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);\n  return vec4(c, c, c, 1.0);\n}\n",
dependencies:[global.random],passes:[{sampler:"edgeWork_sampleColor1",uniforms:{delta:[1,0]}},{sampler:"edgeWork_sampleColor2",uniforms:{delta:[0,1]}}]}}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_fun_filters$edgework.js.map
