shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_blur_filters$tiltshift=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.tiltShift=void 0;global=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$utils$random");exports.tiltShift={name:"tiltShift",uniforms:{blurRadius:{value:15,min:0,max:50},gradientRadius:{value:200,min:0,max:400},start:[0,0],end:[1,1],invert:{value:!1,"private":!0}},fs:"uniform float blurRadius;\nuniform float gradientRadius;\nuniform vec2 start;\nuniform vec2 end;\nuniform bool invert;\n\nvec2 tiltShift_getDelta(vec2 texSize) {\n  vec2 vector \x3d normalize((end - start) * texSize);\n  return invert ? vec2(-vector.y, vector.x) : vector;\n}\n\nvec4 tiltShift_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec4 color \x3d vec4(0.0);\n  float total \x3d 0.0;\n  float offset \x3d random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  vec2 normal \x3d normalize(vec2((start.y - end.y) * texSize.y, (end.x - start.x) * texSize.x));\n  float radius \x3d smoothstep(0.0, 1.0,\n    abs(dot(texCoord * texSize - start * texSize, normal)) / gradientRadius) * blurRadius;\n\n  for (float t \x3d -30.0; t \x3c\x3d 30.0; t++) {\n    float percent \x3d (t + offset - 0.5) / 30.0;\n    float weight \x3d 1.0 - abs(percent);\n    vec4 sample \x3d texture2D(texture, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);\n    sample.rgb *\x3d sample.a;\n\n    color +\x3d sample * weight;\n    total +\x3d weight;\n  }\n\n  color \x3d color / total;\n  color.rgb /\x3d color.a + 0.00001;\n\n  return color;\n}\n",
dependencies:[global.random],passes:[{sampler:!0,uniforms:{invert:!1}},{sampler:!0,uniforms:{invert:!0}}]}}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$modules$image_blur_filters$tiltshift.js.map
