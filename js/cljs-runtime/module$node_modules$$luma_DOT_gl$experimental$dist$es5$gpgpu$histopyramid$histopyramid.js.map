{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$experimental$dist$es5$gpgpu$histopyramid$histopyramid.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@luma_DOT_gl/experimental/dist/es5/gpgpu/histopyramid/histopyramid.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$experimental$dist$es5$gpgpu$histopyramid$histopyramid\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildHistopyramidBaseLevel = buildHistopyramidBaseLevel;\nexports.getHistoPyramid = getHistoPyramid;\nexports.histoPyramidGenerateIndices = histoPyramidGenerateIndices;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _webgl = require(\"@luma.gl/webgl\");\n\nvar _engine = require(\"@luma.gl/engine\");\n\nvar _histopyramidShaders = require(\"./histopyramid-shaders\");\n\nfunction nextPowerOfTwo(x) {\n  var p = Math.ceil(Math.log2(x));\n  return Math.pow(2, p);\n}\n\nvar channelToIndexMap = {\n  r: 0,\n  x: 0,\n  g: 1,\n  y: 1,\n  b: 2,\n  z: 2,\n  a: 3,\n  w: 3\n};\n\nfunction buildHistopyramidBaseLevel(gl, opts) {\n  var _parameters;\n\n  var texture = opts.texture,\n      _opts$channel = opts.channel,\n      channel = _opts$channel === void 0 ? 'r' : _opts$channel,\n      _opts$_readData = opts._readData,\n      _readData = _opts$_readData === void 0 ? false : _opts$_readData;\n\n  var width = texture.width,\n      height = texture.height;\n  width = nextPowerOfTwo(width);\n  height = nextPowerOfTwo(height);\n  var size = (width > height ? width : height) / 2;\n  var baseTexture = (0, _webgl.cloneTextureFrom)(texture, {\n    width: size,\n    height: size\n  });\n  var transform = new _engine.Transform(gl, {\n    _sourceTextures: {\n      inTexture: texture\n    },\n    _targetTexture: baseTexture,\n    _targetTextureVarying: 'outTexture',\n    vs: \"\".concat(_histopyramidShaders.HISTOPYRAMID_BUILD_VS_UTILS).concat(_histopyramidShaders.HISTOPYRAMID_BASE_BUILD_VS),\n    elementCount: baseTexture.width * baseTexture.height\n  });\n  transform.run({\n    uniforms: {\n      channel: channelToIndexMap[channel] || 0,\n      padingPixelValue: [0, 0, 0, 0]\n    }\n  });\n  var textureData;\n\n  if (_readData || size === 1) {\n    textureData = transform.getData({\n      packed: true\n    });\n  }\n\n  var flatPyramidSize = size * 2;\n  var flatPyramidTexture = (0, _webgl.cloneTextureFrom)(texture, {\n    width: flatPyramidSize,\n    height: flatPyramidSize,\n    parameters: (_parameters = {}, (0, _defineProperty2[\"default\"])(_parameters, 10240, 9728), (0, _defineProperty2[\"default\"])(_parameters, 10241, 9728), _parameters)\n  });\n  var framebuffer = transform.getFramebuffer();\n  (0, _webgl.copyToTexture)(framebuffer, flatPyramidTexture, {\n    targetX: 0,\n    width: size,\n    height: size\n  });\n  return {\n    textureData: textureData,\n    baseTexture: baseTexture,\n    flatPyramidTexture: flatPyramidTexture\n  };\n}\n\nfunction getHistoPyramid(gl, opts) {\n  var _buildHistopyramidBas = buildHistopyramidBaseLevel(gl, opts),\n      textureData = _buildHistopyramidBas.textureData,\n      baseTexture = _buildHistopyramidBas.baseTexture,\n      flatPyramidTexture = _buildHistopyramidBas.flatPyramidTexture;\n\n  var width = baseTexture.width;\n  var levelCount = Math.log2(width) + 1;\n  var pyramidTextures = [baseTexture];\n  var topLevelData = textureData;\n\n  if (levelCount > 1) {\n    for (var i = 1; i < levelCount; i++) {\n      var size = width / Math.pow(2, i);\n      pyramidTextures.push((0, _webgl.cloneTextureFrom)(baseTexture, {\n        width: size,\n        height: size\n      }));\n    }\n\n    var transform = new _engine.Transform(gl, {\n      _sourceTextures: {\n        inTexture: pyramidTextures[0]\n      },\n      _targetTexture: pyramidTextures[1],\n      _targetTextureVarying: 'outTexture',\n      vs: \"\".concat(_histopyramidShaders.HISTOPYRAMID_BUILD_VS_UTILS).concat(_histopyramidShaders.HISTOPYRAMID_BUILD_VS),\n      elementCount: pyramidTextures[1].width * pyramidTextures[1].height\n    });\n    var flatOffset = width;\n\n    for (var _i = 1; _i < levelCount; _i++) {\n      var outSize = [pyramidTextures[_i].width, pyramidTextures[_i].height];\n      transform.update({\n        _sourceTextures: {\n          inTexture: pyramidTextures[_i - 1]\n        },\n        _targetTexture: pyramidTextures[_i],\n        elementCount: pyramidTextures[_i].width * pyramidTextures[_i].height\n      });\n      transform.run();\n      var framebuffer = transform.getFramebuffer();\n      (0, _webgl.copyToTexture)(framebuffer, flatPyramidTexture, {\n        targetX: flatOffset,\n        width: outSize[0],\n        height: outSize[1]\n      });\n      flatOffset += outSize[0];\n    }\n\n    topLevelData = transform.getData();\n  }\n\n  return {\n    pyramidTextures: pyramidTextures,\n    flatPyramidTexture: flatPyramidTexture,\n    levelCount: levelCount,\n    topLevelData: topLevelData\n  };\n}\n\nfunction histoPyramidGenerateIndices(gl, opts) {\n  var _getHistoPyramid = getHistoPyramid(gl, opts),\n      flatPyramidTexture = _getHistoPyramid.flatPyramidTexture,\n      levelCount = _getHistoPyramid.levelCount,\n      topLevelData = _getHistoPyramid.topLevelData;\n\n  var keyIndexCount = topLevelData[0] + topLevelData[1] + topLevelData[2] + topLevelData[3];\n  var keyIndex = new _webgl.Buffer(gl, new Float32Array(keyIndexCount).map(function (_, index) {\n    return index;\n  }));\n  var locationAndIndex = new _webgl.Buffer(gl, keyIndexCount * 4 * 4);\n  var transform = new _engine.Transform(gl, {\n    sourceBuffers: {\n      keyIndex: keyIndex\n    },\n    _sourceTextures: {\n      flatPyramidTexture: flatPyramidTexture\n    },\n    feedbackBuffers: {\n      locationAndIndex: locationAndIndex\n    },\n    varyings: ['locationAndIndex'],\n    vs: \"\".concat(_histopyramidShaders.HISTOPYRAMID_TRAVERSAL_UTILS).concat(_histopyramidShaders.HISTOPYRAMID_TRAVERSAL_VS),\n    elementCount: keyIndexCount\n  });\n  transform.run({\n    uniforms: {\n      numLevels: levelCount\n    }\n  });\n  return {\n    locationAndIndexBuffer: locationAndIndex\n  };\n}\n//# sourceMappingURL=histopyramid.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","buildHistopyramidBaseLevel","gl","opts","_parameters","texture","_opts$channel","channel","_opts$_readData","_readData","width","height","Math","pow","p","ceil","log2","size","baseTexture","_webgl","cloneTextureFrom","transform","_engine","Transform","_sourceTextures","inTexture","_targetTexture","_targetTextureVarying","vs","concat","_histopyramidShaders","HISTOPYRAMID_BUILD_VS_UTILS","HISTOPYRAMID_BASE_BUILD_VS","elementCount","run","uniforms","channelToIndexMap","padingPixelValue","textureData","getData","packed","flatPyramidSize","flatPyramidTexture","parameters","_defineProperty2","framebuffer","getFramebuffer","copyToTexture","targetX","getHistoPyramid","_buildHistopyramidBas","levelCount","pyramidTextures","topLevelData","i","push","HISTOPYRAMID_BUILD_VS","_i","outSize","update","flatOffset","_interopRequireDefault","Object","defineProperty","value","histoPyramidGenerateIndices","_getHistoPyramid","keyIndexCount","keyIndex","Buffer","Float32Array","map","_","index","locationAndIndex","sourceBuffers","feedbackBuffers","varyings","HISTOPYRAMID_TRAVERSAL_UTILS","HISTOPYRAMID_TRAVERSAL_VS","numLevels","locationAndIndexBuffer","r","x","g","y","b","z","a","w"]
}
