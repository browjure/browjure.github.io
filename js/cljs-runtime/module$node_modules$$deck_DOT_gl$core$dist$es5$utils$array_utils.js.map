{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$core$dist$es5$utils$array_utils.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/core/dist/es5/utils/array-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$core$dist$es5$utils$array_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.padArray = padArray;\n\nfunction padArrayChunk(_ref) {\n  var source = _ref.source,\n      target = _ref.target,\n      _ref$start = _ref.start,\n      start = _ref$start === void 0 ? 0 : _ref$start,\n      end = _ref.end,\n      size = _ref.size,\n      getData = _ref.getData;\n  end = end || target.length;\n  var sourceLength = source.length;\n  var targetLength = end - start;\n\n  if (sourceLength > targetLength) {\n    target.set(source.subarray(0, targetLength), start);\n    return;\n  }\n\n  target.set(source, start);\n\n  if (!getData) {\n    return;\n  }\n\n  var i = sourceLength;\n\n  while (i < targetLength) {\n    var datum = getData(i, source);\n\n    for (var j = 0; j < size; j++) {\n      target[start + i] = datum[j] || 0;\n      i++;\n    }\n  }\n}\n\nfunction padArray(_ref2) {\n  var source = _ref2.source,\n      target = _ref2.target,\n      size = _ref2.size,\n      getData = _ref2.getData,\n      sourceStartIndices = _ref2.sourceStartIndices,\n      targetStartIndices = _ref2.targetStartIndices;\n\n  if (!Array.isArray(targetStartIndices)) {\n    padArrayChunk({\n      source: source,\n      target: target,\n      size: size,\n      getData: getData\n    });\n    return target;\n  }\n\n  var sourceIndex = 0;\n  var targetIndex = 0;\n\n  var getChunkData = getData && function (i, chunk) {\n    return getData(i + targetIndex, chunk);\n  };\n\n  var n = Math.min(sourceStartIndices.length, targetStartIndices.length);\n\n  for (var i = 1; i < n; i++) {\n    var nextSourceIndex = sourceStartIndices[i] * size;\n    var nextTargetIndex = targetStartIndices[i] * size;\n    padArrayChunk({\n      source: source.subarray(sourceIndex, nextSourceIndex),\n      target: target,\n      start: targetIndex,\n      end: nextTargetIndex,\n      size: size,\n      getData: getChunkData\n    });\n    sourceIndex = nextSourceIndex;\n    targetIndex = nextTargetIndex;\n  }\n\n  if (targetIndex < target.length) {\n    padArrayChunk({\n      source: [],\n      target: target,\n      start: targetIndex,\n      size: size,\n      getData: getChunkData\n    });\n  }\n\n  return target;\n}\n//# sourceMappingURL=array-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","padArrayChunk","_ref","source","target","_ref$start","start","end","size","getData","length","sourceLength","targetLength","set","subarray","i","datum","j","Object","defineProperty","value","padArray","_ref2","sourceStartIndices","targetStartIndices","Array","isArray","sourceIndex","targetIndex","getChunkData","chunk","n","Math","min","nextSourceIndex","nextTargetIndex"]
}
