shadow$provide.module$node_modules$$loaders_DOT_gl$gis$dist$es5$lib$binary_to_geojson=function(global,require,module,exports){function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e;
},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;}}}}function _unsupportedIterableToArray(o,
minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function parseFeature(data,startIndex,
endIndex){endIndex=parseGeometry(data,startIndex,endIndex);var properties=Object.assign(data.properties[data.featureIds.value[startIndex]]),key;for(key in data.numericProps)properties[key]=data.numericProps[key].value[startIndex];return{type:"Feature",geometry:endIndex,properties}}function parseGeometry(data,startIndex,endIndex){switch(data.type){case "Point":return data=ringToGeoJson(data.positions,startIndex,endIndex),data=1<data.length?{type:"MultiPoint",coordinates:data}:{type:"Point",coordinates:data[0]},
data;case "LineString":return lineStringToGeoJson(data,startIndex,endIndex);case "Polygon":return polygonToGeoJson(data,startIndex,endIndex);default:throw Error("Unsupported geometry type: ".concat(data.type));}}function polygonToGeoJson(data){var startIndex=1<arguments.length&&void 0!==arguments[1]?arguments[1]:-Infinity,endIndex=2<arguments.length&&void 0!==arguments[2]?arguments[2]:Infinity,positions=data.positions,polygonIndices=data.polygonIndices.value.filter(function(x){return x>=startIndex&&
x<=endIndex}),primitivePolygonIndices=data.primitivePolygonIndices.value.filter(function(x){return x>=startIndex&&x<=endIndex}),coordinates=[];if(!(2<polygonIndices.length)){for(polygonIndices=0;polygonIndices<primitivePolygonIndices.length-1;polygonIndices++){var ringCoordinates=ringToGeoJson(positions,primitivePolygonIndices[polygonIndices],primitivePolygonIndices[polygonIndices+1]);coordinates.push(ringCoordinates)}return{type:"Polygon",coordinates}}for(positions=0;positions<polygonIndices.length-
1;positions++)primitivePolygonIndices=polygonToGeoJson(data,polygonIndices[positions],polygonIndices[positions+1]).coordinates,coordinates.push(primitivePolygonIndices);return{type:"MultiPolygon",coordinates}}function lineStringToGeoJson(data){var startIndex=1<arguments.length&&void 0!==arguments[1]?arguments[1]:-Infinity,endIndex=2<arguments.length&&void 0!==arguments[2]?arguments[2]:Infinity,positions=data.positions,pathIndices=data.pathIndices.value.filter(function(x){return x>=startIndex&&x<=
endIndex});if(!(2<pathIndices.length))return{type:"LineString",coordinates:ringToGeoJson(positions,pathIndices[0],pathIndices[1])};for(var coordinates=[],i=0;i<pathIndices.length-1;i++){var ringCoordinates=ringToGeoJson(positions,pathIndices[i],pathIndices[i+1]);coordinates.push(ringCoordinates)}return{type:"MultiLineString",coordinates}}function ringToGeoJson(positions,startIndex,endIndex){endIndex=endIndex||positions.value.length/positions.size;var ringCoordinates=[];for(startIndex=startIndex||
0;startIndex<endIndex;startIndex++)ringCoordinates.push(Array.from(positions.value.subarray(startIndex*positions.size,(startIndex+1)*positions.size)));return ringCoordinates}Object.defineProperty(exports,"__esModule",{value:!0});exports.binaryToGeoJson=function(data$jscomp$0,type,format){if("geometry"===format)return parseGeometry(data$jscomp$0);data$jscomp$0.points||data$jscomp$0.lines||data$jscomp$0.polygons?(type=[],data$jscomp$0.points&&(data$jscomp$0.points.type="Point",type.push(data$jscomp$0.points)),
data$jscomp$0.lines&&(data$jscomp$0.lines.type="LineString",type.push(data$jscomp$0.lines)),data$jscomp$0.polygons&&(data$jscomp$0.polygons.type="Polygon",type.push(data$jscomp$0.polygons))):(data$jscomp$0.type=type||(data$jscomp$0.pathIndices?"LineString":data$jscomp$0.polygonIndices?"Polygon":"Point"),type=[data$jscomp$0]);1<type.length?data$jscomp$0="FeatureCollection":(data$jscomp$0=type[0],data$jscomp$0=data$jscomp$0.featureIds||data$jscomp$0.globalFeatureIds||data$jscomp$0.numericProps||data$jscomp$0.properties?
"FeatureCollection":"Geometry");switch(data$jscomp$0){case "Geometry":return parseGeometry(type[0]);case "FeatureCollection":data$jscomp$0=[];type=_createForOfIteratorHelper(type);var _step;try{for(type.s();!(_step=type.n()).done;){var data=_step.value;if(0!==data.featureIds.value.length){format=0;for(var lastValue=data.featureIds.value[0],i=0;i<data.featureIds.value.length;i++){var currValue=data.featureIds.value[i];currValue!==lastValue&&(data$jscomp$0.push(parseFeature(data,format,i)),format=i,
lastValue=currValue)}data$jscomp$0.push(parseFeature(data,format,data.featureIds.value.length))}}}catch(err){type.e(err)}finally{type.f()}return data$jscomp$0}return null}}
//# sourceMappingURL=module$node_modules$$loaders_DOT_gl$gis$dist$es5$lib$binary_to_geojson.js.map
