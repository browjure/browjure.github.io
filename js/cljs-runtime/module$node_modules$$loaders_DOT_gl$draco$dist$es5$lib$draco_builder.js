shadow$provide.module$node_modules$$loaders_DOT_gl$draco$dist$es5$lib$draco_builder=function(global,require,module,exports){function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"===typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"===typeof o.length){it&&(o=it);var i=0;allowArrayLike=function(){};return{s:allowArrayLike,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e;
},f:allowArrayLike}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=!0,didErr=!1,err;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();normalCompletion=step.done;return step},e:function(_e2){didErr=!0;err=_e2},f:function(){try{if(!normalCompletion&&null!=it["return"])it["return"]()}finally{if(didErr)throw err;}}}}function _unsupportedIterableToArray(o,
minLen){if(o){if("string"===typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}}function _arrayLikeToArray(arr,len){if(null==len||len>arr.length)len=arr.length;for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(object,enumerableOnly){var keys=
Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2["default"])(target,key,source[key])}):Object.getOwnPropertyDescriptors?
Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function noop(){}function dracoInt8ArrayToArrayBuffer(dracoData){for(var byteLength=dracoData.size(),outputBuffer=new ArrayBuffer(byteLength),outputData=new Int8Array(outputBuffer),i=0;i<byteLength;++i)outputData[i]=dracoData.GetValue(i);return outputBuffer}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _typeof2=global(require("module$node_modules$$babel$runtime$helpers$typeof")),_slicedToArray2=global(require("module$node_modules$$babel$runtime$helpers$slicedToArray")),_toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),_defineProperty2=global(require("module$node_modules$$babel$runtime$helpers$defineProperty")),_classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),
_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP={POSITION:"POSITION",NORMAL:"NORMAL",COLOR_0:"COLOR",TEXCOORD_0:"TEX_COORD"};require=function(){function DracoBuilder(draco){var options=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};(0,_classCallCheck2["default"])(this,DracoBuilder);this.draco=draco;this.dracoEncoder=new this.draco.Encoder;this.dracoMeshBuilder=new this.draco.MeshBuilder;this.dracoMetadataBuilder=new this.draco.MetadataBuilder;
this.log=options.log||noop}(0,_createClass2["default"])(DracoBuilder,[{key:"destroy",value:function(){this.destroyEncodedObject(this.dracoMeshBuilder);this.destroyEncodedObject(this.dracoEncoder);this.destroyEncodedObject(this.dracoMetadataBuilder);this.draco=this.dracoEncoder=this.dracoMeshBuilder=null}},{key:"destroyEncodedObject",value:function(object){object&&this.draco.destroy(object)}},{key:"encodeSync",value:function(mesh){var options=1<arguments.length&&void 0!==arguments[1]?arguments[1]:
{};this._setOptions(options);return options.pointcloud?this._encodePointCloud(mesh,options):this._encodeMesh(mesh,options)}},{key:"_getAttributesFromMesh",value:function(mesh){var attributes=_objectSpread(_objectSpread({},mesh),mesh.attributes);mesh.indices&&(attributes.indices=mesh.indices);return attributes}},{key:"_encodePointCloud",value:function(pointcloud,options){var dracoPointCloud=new this.draco.PointCloud;options.metadata&&this._addGeometryMetadata(dracoPointCloud,options.metadata);pointcloud=
this._getAttributesFromMesh(pointcloud);this._createDracoPointCloud(dracoPointCloud,pointcloud,options);options=new this.draco.DracoInt8Array;try{var encodedLen=this.dracoEncoder.EncodePointCloudToDracoBuffer(dracoPointCloud,!1,options);if(!(0<encodedLen))throw Error("Draco encoding failed.");this.log("DRACO encoded ".concat(dracoPointCloud.num_points()," points\n        with ").concat(dracoPointCloud.num_attributes()," attributes into ").concat(encodedLen," bytes"));return dracoInt8ArrayToArrayBuffer(options)}finally{this.destroyEncodedObject(options),
this.destroyEncodedObject(dracoPointCloud)}}},{key:"_encodeMesh",value:function(mesh,options){var dracoMesh=new this.draco.Mesh;options.metadata&&this._addGeometryMetadata(dracoMesh,options.metadata);mesh=this._getAttributesFromMesh(mesh);this._createDracoMesh(dracoMesh,mesh,options);options=new this.draco.DracoInt8Array;try{var encodedLen=this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh,options);if(0>=encodedLen)throw Error("Draco encoding failed.");this.log("DRACO encoded ".concat(dracoMesh.num_points(),
" points\n        with ").concat(dracoMesh.num_attributes()," attributes into ").concat(encodedLen," bytes"));return dracoInt8ArrayToArrayBuffer(options)}finally{this.destroyEncodedObject(options),this.destroyEncodedObject(dracoMesh)}}},{key:"_setOptions",value:function(options){if("speed"in options){var _this$dracoEncoder;(_this$dracoEncoder=this.dracoEncoder).SetSpeedOptions.apply(_this$dracoEncoder,(0,_toConsumableArray2["default"])(options.speed))}"method"in options&&this.dracoEncoder.SetEncodingMethod(this.draco[options.method]);
if("quantization"in options)for(var attribute in options.quantization)this.dracoEncoder.SetAttributeQuantization(this.draco[attribute],options.quantization[attribute])}},{key:"_createDracoMesh",value:function(dracoMesh,attributes,options){options=options.attributesMetadata||{};try{var positions=this._getPositionAttribute(attributes);if(!positions)throw Error("positions");var vertexCount=positions.length/3;for(attributeName in attributes){var attribute=attributes[attributeName];var attributeName=GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName]||
attributeName;var uniqueId=this._addAttributeToMesh(dracoMesh,attributeName,attribute,vertexCount);-1!==uniqueId&&this._addAttributeMetadata(dracoMesh,uniqueId,_objectSpread({name:attributeName},options[attributeName]||{}))}}catch(error){throw this.destroyEncodedObject(dracoMesh),error;}return dracoMesh}},{key:"_createDracoPointCloud",value:function(dracoPointCloud,attributes,options){options=options.attributesMetadata||{};try{var positions=this._getPositionAttribute(attributes);if(!positions)throw Error("positions");
var vertexCount=positions.length/3;for(attributeName in attributes){var attribute=attributes[attributeName];var attributeName=GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName]||attributeName;var uniqueId=this._addAttributeToMesh(dracoPointCloud,attributeName,attribute,vertexCount);-1!==uniqueId&&this._addAttributeMetadata(dracoPointCloud,uniqueId,_objectSpread({name:attributeName},options[attributeName]||{}))}}catch(error){throw this.destroyEncodedObject(dracoPointCloud),error;}return dracoPointCloud}},
{key:"_addAttributeToMesh",value:function(mesh,attributeName,attribute,vertexCount){if(!ArrayBuffer.isView(attribute))return-1;var type=this._getDracoAttributeType(attributeName),size=attribute.length/vertexCount;if("indices"===type)return vertexCount=attribute.length/3,this.log("Adding attribute ".concat(attributeName,", size ").concat(vertexCount)),this.dracoMeshBuilder.AddFacesToMesh(mesh,vertexCount,attribute),-1;this.log("Adding attribute ".concat(attributeName,", size ").concat(size));attributeName=
this.dracoMeshBuilder;var buffer=attribute.buffer;switch(attribute.constructor){case Int8Array:return attributeName.AddInt8Attribute(mesh,type,vertexCount,size,new Int8Array(buffer));case Int16Array:return attributeName.AddInt16Attribute(mesh,type,vertexCount,size,new Int16Array(buffer));case Int32Array:return attributeName.AddInt32Attribute(mesh,type,vertexCount,size,new Int32Array(buffer));case Uint8Array:case Uint8ClampedArray:return attributeName.AddUInt8Attribute(mesh,type,vertexCount,size,new Uint8Array(buffer));
case Uint16Array:return attributeName.AddUInt16Attribute(mesh,type,vertexCount,size,new Uint16Array(buffer));case Uint32Array:return attributeName.AddUInt32Attribute(mesh,type,vertexCount,size,new Uint32Array(buffer));default:return attributeName.AddFloatAttribute(mesh,type,vertexCount,size,new Float32Array(buffer))}}},{key:"_getDracoAttributeType",value:function(attributeName){switch(attributeName.toLowerCase()){case "indices":return"indices";case "position":case "positions":case "vertices":return this.draco.POSITION;
case "normal":case "normals":return this.draco.NORMAL;case "color":case "colors":return this.draco.COLOR;case "texCoord":case "texCoords":return this.draco.TEX_COORD;default:return this.draco.GENERIC}}},{key:"_getPositionAttribute",value:function(attributes){for(var attributeName in attributes){var attribute=attributes[attributeName];if(this._getDracoAttributeType(attributeName)===this.draco.POSITION)return attribute}return null}},{key:"_addGeometryMetadata",value:function(dracoGeometry,metadata){var dracoMetadata=
new this.draco.Metadata;this._populateDracoMetadata(dracoMetadata,metadata);this.dracoMeshBuilder.AddMetadata(dracoGeometry,dracoMetadata)}},{key:"_addAttributeMetadata",value:function(dracoGeometry,uniqueAttributeId,metadata){var dracoAttributeMetadata=new this.draco.Metadata;this._populateDracoMetadata(dracoAttributeMetadata,metadata);this.dracoMeshBuilder.SetMetadataForAttribute(dracoGeometry,uniqueAttributeId,dracoAttributeMetadata)}},{key:"_populateDracoMetadata",value:function(dracoMetadata,
metadata){metadata=metadata.entries&&!metadata.hasOwnProperty("entries")?metadata.entries():Object.entries(metadata);metadata=_createForOfIteratorHelper(metadata);var _step;try{for(metadata.s();!(_step=metadata.n()).done;){var _step$value=(0,_slicedToArray2["default"])(_step.value,2),key=_step$value[0],value=_step$value[1];switch((0,_typeof2["default"])(value)){case "number":Math.trunc(value)===value?this.dracoMetadataBuilder.AddIntEntry(dracoMetadata,key,value):this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata,
key,value);break;default:this.dracoMetadataBuilder.AddStringEntry(dracoMetadata,key,value)}}}catch(err){metadata.e(err)}finally{metadata.f()}}}]);return DracoBuilder}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$loaders_DOT_gl$draco$dist$es5$lib$draco_builder.js.map
