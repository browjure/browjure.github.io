shadow$provide.module$node_modules$$math_DOT_gl$polygon$dist$es5$polygon_utils=function(global,require,module,exports){function getPolygonWindingDirection(points){return Math.sign(getPolygonSignedArea(points,1<arguments.length&&void 0!==arguments[1]?arguments[1]:{}))}function getPolygonSignedArea(points){var area=0;forEachSegmentInPolygon(points,function(p1x,p1y,p2x,p2y){area+=(p1x+p2x)*(p1y-p2y)},1<arguments.length&&void 0!==arguments[1]?arguments[1]:{});return area/2}function forEachSegmentInPolygon(points,
visitor){var options=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},_options$start=options.start;_options$start=void 0===_options$start?0:_options$start;var _options$end=options.end,_options$size=options.size;_options$size=void 0===_options$size?2:_options$size;options=options.isClosed;_options$end=((void 0===_options$end?points.length:_options$end)-_options$start)/_options$size;for(var i=0;i<_options$end-1;++i)visitor(points[_options$start+i*_options$size],points[_options$start+i*_options$size+
1],points[_options$start+(i+1)*_options$size],points[_options$start+(i+1)*_options$size+1],i,i+1);_options$size=_options$start+(_options$end-1)*_options$size;options||(0,_core.equals)(points[_options$start],points[_options$size])&&(0,_core.equals)(points[_options$start+1],points[_options$size+1])||visitor(points[_options$size],points[_options$size+1],points[_options$start],points[_options$start+1],_options$end-1,0)}function getPolygonWindingDirectionPoints(points){return Math.sign(getPolygonSignedAreaPoints(points,
1<arguments.length&&void 0!==arguments[1]?arguments[1]:{}))}function getPolygonSignedAreaPoints(points){var area=0;forEachSegmentInPolygonPoints(points,function(p1,p2){area+=(p1[0]+p2[0])*(p1[1]-p2[1])},1<arguments.length&&void 0!==arguments[1]?arguments[1]:{});return area/2}function forEachSegmentInPolygonPoints(points,visitor){var params=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},_params$start=params.start,_params$end=params.end;_params$end=void 0===_params$end?points.length:_params$end;
params=params.isClosed;for(_params$start=void 0===_params$start?0:_params$start;_params$start<_params$end-1;++_params$start)visitor(points[_params$start],points[_params$start+1],_params$start,_params$start+1);params||(0,_core.equals)(points[_params$end-1],points[0])||visitor(points[_params$end-1],points[0],_params$end-1,0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.modifyPolygonWindingDirection=function(points,direction){var options=2<arguments.length&&void 0!==arguments[2]?arguments[2]:
{};if(getPolygonWindingDirection(points,options)!==direction){var _options$start2=options.start;_options$start2=void 0===_options$start2?0:_options$start2;var _options$end2=options.end;options=options.size;options=void 0===options?2:options;_options$end2=((void 0===_options$end2?points.length:_options$end2)-_options$start2)/options;for(var numSwaps=Math.floor(_options$end2/2),i=0;i<numSwaps;++i)for(var b1=_options$start2+i*options,b2=_options$start2+(_options$end2-1-i)*options,j=0;j<options;++j){var tmp=
points[b1+j];points[b1+j]=points[b2+j];points[b2+j]=tmp}return!0}return!1};exports.getPolygonWindingDirection=getPolygonWindingDirection;exports.getPolygonSignedArea=getPolygonSignedArea;exports.forEachSegmentInPolygon=forEachSegmentInPolygon;exports.modifyPolygonWindingDirectionPoints=function(points,direction){return getPolygonWindingDirectionPoints(points,2<arguments.length&&void 0!==arguments[2]?arguments[2]:{})!==direction?(points.reverse(),!0):!1};exports.getPolygonWindingDirectionPoints=getPolygonWindingDirectionPoints;
exports.getPolygonSignedAreaPoints=getPolygonSignedAreaPoints;exports.forEachSegmentInPolygonPoints=forEachSegmentInPolygonPoints;exports.WINDING=void 0;var _core=require("module$node_modules$$math_DOT_gl$core$dist$es5$index");exports.WINDING={CLOCKWISE:1,COUNTER_CLOCKWISE:-1}}
//# sourceMappingURL=module$node_modules$$math_DOT_gl$polygon$dist$es5$polygon_utils.js.map
