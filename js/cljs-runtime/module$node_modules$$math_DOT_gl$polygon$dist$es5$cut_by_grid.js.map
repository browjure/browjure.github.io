{
"version":3,
"file":"module$node_modules$$math_DOT_gl$polygon$dist$es5$cut_by_grid.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/@math_DOT_gl/polygon/dist/es5/cut-by-grid.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$math_DOT_gl$polygon$dist$es5$cut_by_grid\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cutPolylineByGrid = cutPolylineByGrid;\nexports.cutPolygonByGrid = cutPolygonByGrid;\n\nvar _lineclip = require(\"./lineclip\");\n\nvar _utils = require(\"./utils\");\n\nfunction cutPolylineByGrid(positions) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$size = options.size,\n      size = _options$size === void 0 ? 2 : _options$size,\n      _options$broken = options.broken,\n      broken = _options$broken === void 0 ? false : _options$broken,\n      _options$gridResoluti = options.gridResolution,\n      gridResolution = _options$gridResoluti === void 0 ? 10 : _options$gridResoluti,\n      _options$gridOffset = options.gridOffset,\n      gridOffset = _options$gridOffset === void 0 ? [0, 0] : _options$gridOffset,\n      _options$startIndex = options.startIndex,\n      startIndex = _options$startIndex === void 0 ? 0 : _options$startIndex,\n      _options$endIndex = options.endIndex,\n      endIndex = _options$endIndex === void 0 ? positions.length : _options$endIndex;\n  var numPoints = (endIndex - startIndex) / size;\n  var part = [];\n  var result = [part];\n  var a = (0, _utils.getPointAtIndex)(positions, 0, size, startIndex);\n  var b;\n  var codeB;\n  var cell = getGridCell(a, gridResolution, gridOffset, []);\n  var scratchPoint = [];\n  (0, _utils.push)(part, a);\n\n  for (var i = 1; i < numPoints; i++) {\n    b = (0, _utils.getPointAtIndex)(positions, i, size, startIndex, b);\n    codeB = (0, _lineclip.bitCode)(b, cell);\n\n    while (codeB) {\n      (0, _lineclip.intersect)(a, b, codeB, cell, scratchPoint);\n      var codeAlt = (0, _lineclip.bitCode)(scratchPoint, cell);\n\n      if (codeAlt) {\n        (0, _lineclip.intersect)(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n\n      (0, _utils.push)(part, scratchPoint);\n      (0, _utils.copy)(a, scratchPoint);\n      moveToNeighborCell(cell, gridResolution, codeB);\n\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        (0, _utils.push)(part, a);\n      }\n\n      codeB = (0, _lineclip.bitCode)(b, cell);\n    }\n\n    (0, _utils.push)(part, b);\n    (0, _utils.copy)(a, b);\n  }\n\n  return broken ? result : result[0];\n}\n\nvar TYPE_INSIDE = 0;\nvar TYPE_BORDER = 1;\n\nfunction concatInPlace(arr1, arr2) {\n  for (var i = 0; i < arr2.length; i++) {\n    arr1.push(arr2[i]);\n  }\n\n  return arr1;\n}\n\nfunction cutPolygonByGrid(positions, holeIndices) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!positions.length) {\n    return [];\n  }\n\n  var _options$size2 = options.size,\n      size = _options$size2 === void 0 ? 2 : _options$size2,\n      _options$gridResoluti2 = options.gridResolution,\n      gridResolution = _options$gridResoluti2 === void 0 ? 10 : _options$gridResoluti2,\n      _options$gridOffset2 = options.gridOffset,\n      gridOffset = _options$gridOffset2 === void 0 ? [0, 0] : _options$gridOffset2,\n      _options$edgeTypes = options.edgeTypes,\n      edgeTypes = _options$edgeTypes === void 0 ? false : _options$edgeTypes;\n  var result = [];\n  var queue = [{\n    pos: positions,\n    types: edgeTypes && new Array(positions.length / size).fill(TYPE_BORDER),\n    holes: holeIndices || []\n  }];\n  var bbox = [[], []];\n  var cell = [];\n\n  while (queue.length) {\n    var _queue$shift = queue.shift(),\n        pos = _queue$shift.pos,\n        types = _queue$shift.types,\n        holes = _queue$shift.holes;\n\n    getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    var code = (0, _lineclip.bitCode)(bbox[1], cell);\n\n    if (code) {\n      var parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      var polygonLow = {\n        pos: parts[0].pos,\n        types: parts[0].types,\n        holes: []\n      };\n      var polygonHigh = {\n        pos: parts[1].pos,\n        types: parts[1].types,\n        holes: []\n      };\n      queue.push(polygonLow, polygonHigh);\n\n      for (var i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n\n          if (edgeTypes) {\n            polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n          }\n        }\n\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n\n          if (edgeTypes) {\n            polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n          }\n        }\n      }\n    } else {\n      var polygon = {\n        positions: pos\n      };\n\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n\n  return result;\n}\n\nfunction bisectPolygon(positions, edgeTypes, size, startIndex, endIndex, bbox, edge) {\n  var numPoints = (endIndex - startIndex) / size;\n  var resultLow = [];\n  var resultHigh = [];\n  var typesLow = [];\n  var typesHigh = [];\n  var scratchPoint = [];\n  var p;\n  var side;\n  var type;\n  var prev = (0, _utils.getPointAtIndex)(positions, numPoints - 1, size, startIndex);\n  var prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  var prevType = edgeTypes && edgeTypes[numPoints - 1];\n  var lowPointCount = 0;\n  var highPointCount = 0;\n\n  for (var i = 0; i < numPoints; i++) {\n    p = (0, _utils.getPointAtIndex)(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    if (side && prevSide && prevSide !== side) {\n      (0, _lineclip.intersect)(prev, p, edge, bbox, scratchPoint);\n      (0, _utils.push)(resultLow, scratchPoint) && typesLow.push(prevType);\n      (0, _utils.push)(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      (0, _utils.push)(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n\n    if (side >= 0) {\n      (0, _utils.push)(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    (0, _utils.copy)(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [lowPointCount ? {\n    pos: resultLow,\n    types: edgeTypes && typesLow\n  } : null, highPointCount ? {\n    pos: resultHigh,\n    types: edgeTypes && typesHigh\n  } : null];\n}\n\nfunction getGridCell(p, gridResolution, gridOffset, out) {\n  var left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  var bottom = Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out;\n}\n\nfunction moveToNeighborCell(cell, gridResolution, edge) {\n  if (edge & 8) {\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(positions, size, endIndex, out) {\n  var minX = Infinity;\n  var maxX = -Infinity;\n  var minY = Infinity;\n  var maxY = -Infinity;\n\n  for (var i = 0; i < endIndex; i += size) {\n    var x = positions[i];\n    var y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}\n//# sourceMappingURL=cut-by-grid.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","concatInPlace","arr1","arr2","i","length","push","bisectPolygon","positions","edgeTypes","size","startIndex","endIndex","bbox","edge","numPoints","resultLow","resultHigh","typesLow","typesHigh","scratchPoint","p","side","type","prev","_utils","getPointAtIndex","prevSide","Math","sign","prevType","lowPointCount","highPointCount","_lineclip","intersect","TYPE_INSIDE","copy","pos","types","getGridCell","gridResolution","gridOffset","out","left","floor","bottom","Object","defineProperty","value","cutPolylineByGrid","options","arguments","undefined","_options$size","_options$broken","broken","_options$gridResoluti","_options$gridOffset","_options$startIndex","_options$endIndex","part","result","a","codeB","cell","b","bitCode","codeAlt","cutPolygonByGrid","holeIndices","_options$size2","_options$gridResoluti2","_options$gridOffset2","_options$edgeTypes","queue","Array","fill","TYPE_BORDER","holes","_queue$shift","shift","minX","Infinity","maxX","minY","maxY","x","y","code","parts","polygonLow","polygonHigh","polygon"]
}
