{"version":3,"sources":["org/browjure/vega/base.cljs"],"mappings":"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","names":["org.browjure.vega.base/window-resolve","symbol","p1__71897#","p2__71898#","cljs.core.reduce","js/window","cljs.core.conj","clojure.string.split","clojure.string/replace","cljs.core/namespace","cljs.core/name","p__71899","map__71900","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","org.browjure.vega.base/dataset-component","data->vega-spec","dependencies","style","org.browjure.state/compile","data","cljs.core.atom","c","cljs.core.doall","cljs.core.map","p__71902","vec__71903","cljs.core.nth","dep-name","dep-path","fexpr__71906","r","cljs.core.swap_BANG_","cljs.core/assoc","js/module$node_modules$vega_embed$build$vega_embed.default","cljs.core/clj->js","G__71907","cljs.core/deref","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","org.browjure.vega.base/embed-component","seq71909","self__4724__auto__","cljs.core/seq","specs","iter__4529__auto__","s__71911","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__71913","cljs.core/chunk-buffer","i__71912","cljs.core/-nth","cljs.core/chunk-append","p1__71908#","cljs.core/chunk-cons","cljs.core/chunk","iter__71910","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","spec","org.browjure.vega.base/create-viz-node","node","js/document.createElement","js/document.querySelector","org.browjure.vega.base/handler","p__71914","map__71915","id","type","payload","command","cljs.core._EQ_","js/console.log","js/document.getElementById","cljs.core/chunk-first"],"sourcesContent":["(ns org.browjure.vega.base\n  (:require\n   [vega-lite :as vega-lite]\n   [vega-embed :default vega-embed]\n   [org.browjure.state :refer [compile]]\n   ))\n\n(defn window-resolve [symbol]\n  (reduce #(aget %1 %2)\n          js/window\n          (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                      \".\")\n                (clojure.string/replace (name symbol) \"-\" \"_\"))))\n\n(defn dataset-component [{:vega/keys [data->vega-spec]\n                          :dataset/keys [dependencies]\n                          :keys [style]}]\n  (let [data->vega-spec (compile (aget data->vega-spec \"rep\"))\n        data (atom {})]\n    [:div\n     {:style style\n      :ref (fn [c]\n             (doall (map (fn [[dep-name dep-path]]\n                           (.subscribe ((window-resolve 'org.browjure.state/get-or-create-subject)\n                                        dep-path nil)\n                                       (fn [r]\n                                         (swap! data assoc dep-name r)\n                                         (vega-embed c (clj->js (data->vega-spec @data))))))\n                         dependencies)))}]))\n\n(defn embed-component [& specs]\n  [:div (for [spec specs]\n          [:div {:ref #(vega-embed % (clj->js spec))}])])\n\n(defn create-viz-node []\n  (let [node (js/document.createElement \"div\")]\n    (.setAttribute node  \"id\" \"vega-viz\")\n    (.appendChild (js/document.querySelector \"body\") node)))\n\n(def handler\n  (fn [{:keys [id type payload] :as command}]\n    (when (= type :visualize)\n      (js/console.log \"vega base handler\" command)\n      (if (js/document.getElementById \"#vega-viz\")\n        (vega-embed \"#vega-viz\" (clj->js payload))\n        (do (create-viz-node)\n            (vega-embed \"#vega-viz\" (clj->js payload)))))))\n\n(comment\n  (brow/register\n   {:id :vega\n    :namespace \"vega\"\n    :sablono {:hiccup-tag->factory-symbol\n              {:vega 'org.browjure.vega.base/embed-component}}})\n  (brow/echo-to-clients\n   {:type :view-sablono\n    :payload [:div\n              [:h1 \"Embed example\"]\n              [:vega (clojure.data.json/read-str\n                      \"{\n  \\\"data\\\": {\\\"url\\\": \\\"/seattle-weather.csv\\\"},\n  \\\"mark\\\": \\\"bar\\\",\n  \\\"encoding\\\": {\n               \\\"x\\\": {\n                     \\\"timeUnit\\\": \\\"month\\\",\n                     \\\"field\\\": \\\"date\\\",\n                     \\\"type\\\": \\\"ordinal\\\"\n                     },\n               \\\"y\\\": {\n                     \\\"aggregate\\\": \\\"mean\\\",\n                     \\\"field\\\": \\\"precipitation\\\",\n                     \\\"type\\\": \\\"quantitative\\\"\n                     }\n               }\n  }\")]\n              [:h3 \"more html\"]\n              [:vega (clojure.data.json/read-str\n                      \"{\n  \\\"data\\\": {\\\"url\\\": \\\"/seattle-weather.csv\\\"},\n  \\\"mark\\\": \\\"bar\\\",\n  \\\"encoding\\\": {\n               \\\"x\\\": {\n                     \\\"timeUnit\\\": \\\"month\\\",\n                     \\\"field\\\": \\\"date\\\",\n                     \\\"type\\\": \\\"ordinal\\\"\n                     },\n               \\\"y\\\": {\n                     \\\"aggregate\\\": \\\"mean\\\",\n                     \\\"field\\\": \\\"precipitation\\\",\n                     \\\"type\\\": \\\"quantitative\\\"\n                     }\n               }\n  }\")]\n\n\n              ]})\n  )\n"]}