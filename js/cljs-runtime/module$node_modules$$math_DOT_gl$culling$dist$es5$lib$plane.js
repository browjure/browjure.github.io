shadow$provide.module$node_modules$$math_DOT_gl$culling$dist$es5$lib$plane=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_core=require("module$node_modules$$math_DOT_gl$core$dist$es5$index"),
scratchPosition=new _core.Vector3,scratchNormal=new _core.Vector3;require=function(){function Plane(){var normal=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[0,0,1],distance=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;(0,_classCallCheck2["default"])(this,Plane);this.normal=new _core.Vector3;this.distance=-0;this.fromNormalDistance(normal,distance)}(0,_createClass2["default"])(Plane,[{key:"fromNormalDistance",value:function(normal,distance){(0,_core.assert)(Number.isFinite(distance));
this.normal.from(normal).normalize();this.distance=distance;return this}},{key:"fromPointNormal",value:function(point,normal){point=scratchPosition.from(point);this.normal.from(normal).normalize();this.distance=-this.normal.dot(point);return this}},{key:"fromCoefficients",value:function(a,b,c,d){this.normal.set(a,b,c);(0,_core.assert)((0,_core.equals)(this.normal.len(),1));this.distance=d;return this}},{key:"clone",value:function(plane){return new Plane(this.normal,this.distance)}},{key:"equals",
value:function(right){return(0,_core.equals)(this.distance,right.distance)&&(0,_core.equals)(this.normal,right.normal)}},{key:"getPointDistance",value:function(point){return this.normal.dot(point)+this.distance}},{key:"transform",value:function(matrix4){var normal=scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();matrix4=this.normal.scale(-this.distance).transform(matrix4);return this.fromPointNormal(matrix4,normal)}},{key:"projectPointOntoPlane",value:function(point){var result=
1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,0];point=scratchPosition.from(point);var pointDistance=this.getPointDistance(point);pointDistance=scratchNormal.copy(this.normal).scale(pointDistance);return point.subtract(pointDistance).to(result)}}]);return Plane}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$math_DOT_gl$culling$dist$es5$lib$plane.js.map
