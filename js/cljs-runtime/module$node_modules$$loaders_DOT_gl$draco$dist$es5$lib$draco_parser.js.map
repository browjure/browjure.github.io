{
"version":3,
"file":"module$node_modules$$loaders_DOT_gl$draco$dist$es5$lib$draco_parser.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/@loaders_DOT_gl/draco/dist/es5/lib/draco-parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$loaders_DOT_gl$draco$dist$es5$lib$draco_parser\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _loaderUtils = require(\"@loaders.gl/loader-utils\");\n\nvar GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\nvar DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\nvar DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nvar DracoParser = function () {\n  function DracoParser(draco) {\n    (0, _classCallCheck2[\"default\"])(this, DracoParser);\n    this.draco = draco;\n    this.drawMode = 'TRIANGLE';\n    this.metadataQuerier = {};\n  }\n\n  (0, _createClass2[\"default\"])(DracoParser, [{\n    key: \"destroy\",\n    value: function destroy() {}\n  }, {\n    key: \"destroyGeometry\",\n    value: function destroyGeometry(dracoGeometry) {\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry.dracoGeometry);\n      }\n    }\n  }, {\n    key: \"parseSync\",\n    value: function parseSync(arrayBuffer) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.metadataQuerier = new this.draco.MetadataQuerier();\n      var buffer = new this.draco.DecoderBuffer();\n      buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n      var decoder = new this.draco.Decoder();\n      var data = {};\n      var dracoStatus;\n      var dracoGeometry;\n      var header;\n\n      try {\n        var geometryType = decoder.GetEncodedGeometryType(buffer);\n\n        switch (geometryType) {\n          case this.draco.TRIANGULAR_MESH:\n            dracoGeometry = new this.draco.Mesh();\n            dracoStatus = decoder.DecodeBufferToMesh(buffer, dracoGeometry);\n            header = {\n              type: GEOMETRY_TYPE.TRIANGULAR_MESH,\n              faceCount: dracoGeometry.num_faces(),\n              attributeCount: dracoGeometry.num_attributes(),\n              vertexCount: dracoGeometry.num_points()\n            };\n            break;\n\n          case this.draco.POINT_CLOUD:\n            dracoGeometry = new this.draco.PointCloud();\n            dracoStatus = decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n            header = {\n              type: GEOMETRY_TYPE.POINT_CLOUD,\n              attributeCount: dracoGeometry.num_attributes(),\n              vertexCount: dracoGeometry.num_points()\n            };\n            break;\n\n          default:\n            throw new Error('Unknown DRACO geometry type.');\n        }\n\n        if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n          var message = \"DRACO decompression failed: \".concat(dracoStatus.error_msg());\n\n          if (dracoGeometry) {\n            this.draco.destroy(dracoGeometry);\n          }\n\n          throw new Error(message);\n        }\n\n        data.loaderData = {\n          header: header\n        };\n\n        this._extractDRACOGeometry(decoder, dracoGeometry, geometryType, data, options);\n\n        var metadata = this._getGeometryMetadata(decoder, dracoGeometry);\n\n        data.header = {\n          vertexCount: header.vertexCount,\n          boundingBox: (0, _loaderUtils.getMeshBoundingBox)(data.attributes),\n          metadata: metadata\n        };\n      } finally {\n        this.draco.destroy(decoder);\n        this.draco.destroy(buffer);\n        this.draco.destroy(dracoGeometry);\n        this.draco.destroy(this.metadataQuerier);\n      }\n\n      return data;\n    }\n  }, {\n    key: \"_extractDRACOGeometry\",\n    value: function _extractDRACOGeometry(decoder, dracoGeometry, geometryType, geometry, options) {\n      var attributes = this._getAttributes(decoder, dracoGeometry, options);\n\n      var positionAttribute = attributes.POSITION;\n\n      if (!positionAttribute) {\n        throw new Error('DRACO decompressor: No position attribute found.');\n      }\n\n      if (geometryType === this.draco.TRIANGULAR_MESH) {\n        attributes.indices = this.drawMode === 'TRIANGLE_STRIP' ? this._getMeshStripIndices(decoder, dracoGeometry) : this._getMeshFaceIndices(decoder, dracoGeometry);\n        geometry.mode = this.drawMode === 'TRIANGLE_STRIP' ? 5 : 4;\n      } else {\n        geometry.mode = 0;\n      }\n\n      if (attributes.indices) {\n        geometry.indices = {\n          value: attributes.indices,\n          size: 1\n        };\n        delete attributes.indices;\n      }\n\n      geometry.attributes = attributes;\n      return geometry;\n    }\n  }, {\n    key: \"getPositionAttributeMetadata\",\n    value: function getPositionAttributeMetadata(positionAttribute) {\n      this.metadata = this.metadata || {};\n      this.metadata.attributes = this.metadata.attributes || {};\n      var posTransform = new this.draco.AttributeQuantizationTransform();\n\n      if (posTransform.InitFromAttribute(positionAttribute)) {\n        this.metadata.attributes.position.isQuantized = true;\n        this.metadata.attributes.position.maxRange = posTransform.range();\n        this.metadata.attributes.position.numQuantizationBits = posTransform.quantization_bits();\n        this.metadata.attributes.position.minValues = new Float32Array(3);\n\n        for (var i = 0; i < 3; ++i) {\n          this.metadata.attributes.position.minValues[i] = posTransform.min_value(i);\n        }\n      }\n\n      this.draco.destroy(posTransform);\n    }\n  }, {\n    key: \"_getAttributes\",\n    value: function _getAttributes(decoder, dracoGeometry, options) {\n      var attributes = {};\n      var numPoints = dracoGeometry.num_points();\n\n      for (var attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n        var dracoAttribute = decoder.GetAttribute(dracoGeometry, attributeId);\n\n        var attributeMetadata = this._getAttributeMetadata(decoder, dracoGeometry, attributeId);\n\n        var attributeData = {\n          uniqueId: dracoAttribute.unique_id(),\n          attributeType: dracoAttribute.attribute_type(),\n          dataType: DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[dracoAttribute.data_type()],\n          size: dracoAttribute.size(),\n          numComponents: dracoAttribute.num_components(),\n          byteOffset: dracoAttribute.byte_offset(),\n          byteStride: dracoAttribute.byte_stride(),\n          normalized: dracoAttribute.normalized(),\n          metadata: attributeMetadata\n        };\n\n        var attributeName = this._deduceAttributeName(attributeData, options);\n\n        var _this$_getAttributeTy = this._getAttributeTypedArray(decoder, dracoGeometry, dracoAttribute, attributeName),\n            typedArray = _this$_getAttributeTy.typedArray;\n\n        attributes[attributeName] = {\n          value: typedArray,\n          size: typedArray.length / numPoints,\n          metadata: attributeMetadata\n        };\n      }\n\n      return attributes;\n    }\n  }, {\n    key: \"_getMeshFaceIndices\",\n    value: function _getMeshFaceIndices(decoder, dracoGeometry) {\n      var numFaces = dracoGeometry.num_faces();\n      var numIndices = numFaces * 3;\n      var indices = new Uint32Array(numIndices);\n      var dracoArray = new this.draco.DracoInt32Array();\n\n      for (var i = 0; i < numFaces; ++i) {\n        decoder.GetFaceFromMesh(dracoGeometry, i, dracoArray);\n        var index = i * 3;\n        indices[index] = dracoArray.GetValue(0);\n        indices[index + 1] = dracoArray.GetValue(1);\n        indices[index + 2] = dracoArray.GetValue(2);\n      }\n\n      this.draco.destroy(dracoArray);\n      return indices;\n    }\n  }, {\n    key: \"_getMeshStripIndices\",\n    value: function _getMeshStripIndices(decoder, dracoGeometry) {\n      var dracoArray = new this.draco.DracoInt32Array();\n      decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      var indices = new Uint32Array(dracoArray.size());\n\n      for (var i = 0; i < dracoArray.size(); ++i) {\n        indices[i] = dracoArray.GetValue(i);\n      }\n\n      this.draco.destroy(dracoArray);\n      return indices;\n    }\n  }, {\n    key: \"_getAttributeTypedArray\",\n    value: function _getAttributeTypedArray(decoder, dracoGeometry, dracoAttribute, attributeName) {\n      if (dracoAttribute.ptr === 0) {\n        var message = \"DRACO decode bad attribute \".concat(attributeName);\n        throw new Error(message);\n      }\n\n      var attributeType = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[dracoAttribute.data_type()];\n      var numComponents = dracoAttribute.num_components();\n      var numPoints = dracoGeometry.num_points();\n      var numValues = numPoints * numComponents;\n      var dracoArray;\n      var typedArray;\n\n      switch (attributeType) {\n        case Float32Array:\n          dracoArray = new this.draco.DracoFloat32Array();\n          decoder.GetAttributeFloatForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Float32Array(numValues);\n          break;\n\n        case Int8Array:\n          dracoArray = new this.draco.DracoInt8Array();\n          decoder.GetAttributeInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Int8Array(numValues);\n          break;\n\n        case Int16Array:\n          dracoArray = new this.draco.DracoInt16Array();\n          decoder.GetAttributeInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Int16Array(numValues);\n          break;\n\n        case Int32Array:\n          dracoArray = new this.draco.DracoInt32Array();\n          decoder.GetAttributeInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Int32Array(numValues);\n          break;\n\n        case Uint8Array:\n          dracoArray = new this.draco.DracoUInt8Array();\n          decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Uint8Array(numValues);\n          break;\n\n        case Uint16Array:\n          dracoArray = new this.draco.DracoUInt16Array();\n          decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Uint16Array(numValues);\n          break;\n\n        case Uint32Array:\n          dracoArray = new this.draco.DracoUInt32Array();\n          decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Uint32Array(numValues);\n          break;\n\n        default:\n          var errorMsg = 'DRACO decoder: unexpected attribute type.';\n          throw new Error(errorMsg);\n      }\n\n      for (var i = 0; i < numValues; i++) {\n        typedArray[i] = dracoArray.GetValue(i);\n      }\n\n      this.draco.destroy(dracoArray);\n      return {\n        typedArray: typedArray,\n        components: numComponents\n      };\n    }\n  }, {\n    key: \"_deduceAttributeName\",\n    value: function _deduceAttributeName(attributeData, options) {\n      var _options$extraAttribu = options.extraAttributes,\n          extraAttributes = _options$extraAttribu === void 0 ? {} : _options$extraAttribu;\n\n      if (extraAttributes && (0, _typeof2[\"default\"])(extraAttributes) === 'object') {\n        for (var _i = 0, _Object$entries = Object.entries(extraAttributes); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = (0, _slicedToArray2[\"default\"])(_Object$entries[_i], 2),\n              attributeName = _Object$entries$_i[0],\n              attributeUniqueId = _Object$entries$_i[1];\n\n          if (attributeUniqueId === attributeData.uniqueId) {\n            return attributeName;\n          }\n        }\n      }\n\n      for (var dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n        var attributeType = this.draco[dracoAttributeConstant];\n\n        if (attributeData.attributeType === attributeType) {\n          return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n        }\n      }\n\n      if (attributeData.metadata) {\n        var entryName = options.attributeNameEntry || 'name';\n\n        if (attributeData.metadata[entryName]) {\n          return attributeData.metadata[entryName].string;\n        }\n      }\n\n      return \"CUSTOM_ATTRIBUTE_\".concat(attributeData.uniqueId);\n    }\n  }, {\n    key: \"_getGeometryMetadata\",\n    value: function _getGeometryMetadata(decoder, dracoGeometry) {\n      var dracoMetadata = decoder.GetMetadata(dracoGeometry);\n      return this._queryDracoMetadata(dracoMetadata);\n    }\n  }, {\n    key: \"_getAttributeMetadata\",\n    value: function _getAttributeMetadata(decoder, dracoGeometry, attributeId) {\n      var dracoMetadata = decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n      return this._queryDracoMetadata(dracoMetadata);\n    }\n  }, {\n    key: \"_queryDracoMetadata\",\n    value: function _queryDracoMetadata(dracoMetadata) {\n      if (!dracoMetadata || !dracoMetadata.ptr) {\n        return {};\n      }\n\n      var result = {};\n      var numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n\n      for (var entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n        var entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n        result[entryName] = {\n          \"int\": this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n          string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n          \"double\": this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n          intArray: this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName)\n        };\n      }\n\n      return result;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(arrayBuffer, options) {\n      return this.parseSync(arrayBuffer, options);\n    }\n  }]);\n  return DracoParser;\n}();\n\nexports[\"default\"] = DracoParser;\n//# sourceMappingURL=draco-parser.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_slicedToArray2","_typeof2","_classCallCheck2","_createClass2","_loaderUtils","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","DracoParser","draco","drawMode","metadataQuerier","key","destroy","destroyGeometry","dracoGeometry","parseSync","arrayBuffer","options","arguments","length","undefined","MetadataQuerier","buffer","DecoderBuffer","Init","byteLength","decoder","Decoder","data","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","dracoStatus","DecodeBufferToMesh","header","type","faceCount","num_faces","attributeCount","num_attributes","vertexCount","num_points","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","Error","ok","ptr","message","concat","error_msg","loaderData","_extractDRACOGeometry","metadata","_getGeometryMetadata","boundingBox","getMeshBoundingBox","attributes","geometry","_getAttributes","indices","_getMeshStripIndices","_getMeshFaceIndices","mode","size","getPositionAttributeMetadata","positionAttribute","posTransform","AttributeQuantizationTransform","InitFromAttribute","i","position","isQuantized","maxRange","range","numQuantizationBits","quantization_bits","minValues","min_value","numPoints","attributeId","dracoAttribute","GetAttribute","attributeMetadata","_getAttributeMetadata","attributeData","uniqueId","unique_id","attributeType","attribute_type","dataType","data_type","numComponents","num_components","byteOffset","byte_offset","byteStride","byte_stride","normalized","attributeName","_deduceAttributeName","typedArray","_this$_getAttributeTy","_getAttributeTypedArray","numFaces","dracoArray","DracoInt32Array","GetFaceFromMesh","index","GetValue","GetTriangleStripsFromMesh","numValues","DracoFloat32Array","GetAttributeFloatForAllPoints","DracoInt8Array","GetAttributeInt8ForAllPoints","DracoInt16Array","GetAttributeInt16ForAllPoints","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","errorMsg","components","_options$extraAttribu","extraAttributes","_i","_Object$entries","entries","_Object$entries$_i","attributeUniqueId","dracoAttributeConstant","entryName","attributeNameEntry","string","dracoMetadata","GetMetadata","_queryDracoMetadata","GetAttributeMetadata","result","numEntries","NumEntries","entryIndex","GetEntryName","GetIntEntry","GetStringEntry","GetDoubleEntry","intArray","GetIntEntryArray","decode"]
}
