{"version":3,"sources":["sci/impl/protocols.cljc"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.protocols/defprotocol","seq68256","G__68257","cljs.core/first","cljs.core/next","G__68258","G__68259","G__68260","self__4723__auto__","_","_ctx","protocol-name","signatures","vec__68282","cljs.core.nth","vec__68285","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","cljs.core/hash-set","docstring","sig","cljs.core/rest","opts","opt","cljs.core/Keyword","cljs.core/second","cljs.core/nnext","current-ns","sci.impl.vars/current-ns-name","expansion","cljs.core/with-meta","cljs.core.map","p__68303","vec__68304","seq__68305","first__68306","method-name","cljs.core/vec","fq-name","cljs.core.symbol","impls","cljs.core.conj","cljs.core.keyword","sci.impl.protocols/extend-protocol","seq68401","G__68402","G__68403","G__68404","G__68405","ctx","p1__68396#","p1__68393#","sci.impl.utils/split-when","cljs.core/seq?","protocol-var","fexpr__68424","cljs.core/deref","sci.impl.utils/eval-resolve-state","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","p__68429","vec__68430","seq__68431","first__68432","type","meths","meth","cljs.core/name","sci.impl.protocols/extend","seq68449","G__68450","G__68451","atype","proto+mmaps","seq__68460","chunk__68462","count__68463","i__68464","vec__68598","temp__5753__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__68653","proto","mmap","cljs.core.partition","proto-ns","seq__68601","chunk__68602","count__68603","i__68604","vec__68632","vec__68642","seq__68660","chunk__68661","count__68662","i__68663","vec__68682","vec__68700","fn-name","f","fn-sym","env","multi-method-var","cljs.core.get_in","multi-method","sci.impl.multimethods/multi-fn-add-method-impl","sci.impl.protocols/extend-type","seq68721","G__68722","G__68723","G__68724","G__68725","proto+meths","p1__68719#","p__68727","vec__68728","seq__68729","first__68730","p1__68720#","fexpr__68731","sci.impl.protocols/find-matching-non-default-method","protocol","obj","cljs.core/boolean","p1__68737#","cljs.core/some","m","cljs.core/get-method","sci.impl.types/type-impl","ms","cljs.core/methods","default","cljs.core.get","sci.impl.protocols/satisfies?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","sci.impl.types/IReified","obj-type","sci.impl.types/getInterface","cljs.core._EQ_","p","or__4126__auto__","and__4115__auto__","pred__68748","expr__68749","js/Error","cljs.core/=","cljs.core/IDeref","cljs.core/ISwap","cljs.core/IReset","sci.impl.protocols/instance-impl","clazz","x","cljs.core/Symbol","G__68760","cljs.core/meta","sci.impl.protocols/extends?","p1__68761#"],"sourcesContent":["(ns sci.impl.protocols\n  {:no-doc true}\n  (:refer-clojure :exclude [defprotocol extend-protocol\n                            extend extend-type reify satisfies?\n                            extends? implements?])\n  (:require [sci.impl.core-protocols :as core]\n            [sci.impl.multimethods :as mms]\n            [sci.impl.types :as types]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defprotocol [_ _ _ctx protocol-name & signatures]\n  (let [[docstring signatures]\n        (let [sig (first signatures)]\n          (if (string? sig) [sig (rest signatures)]\n              [nil signatures]))\n        [opts signatures]\n        (let [opt (first signatures)]\n          (if (keyword? opt) [{opt (second signatures)} (nnext signatures)]\n              [nil signatures]))\n        current-ns (str (vars/current-ns-name))\n        expansion\n        `(do\n           (def  ~(with-meta protocol-name\n                    {:doc docstring}) {:methods #{}\n                                       :ns *ns*})\n           ~@(map (fn [[method-name & _]]\n                    (let [fq-name (symbol (str current-ns) (str method-name))\n                          impls [`(defmulti ~method-name clojure.core/protocol-type-impl)\n                                 `(defmethod ~method-name :sci.impl.protocols/reified [x# & args#]\n                                    (let [methods# (clojure.core/-reified-methods x#)]\n                                      (apply (get methods# '~method-name) x# args#)))]\n                          impls (if (:extend-via-metadata opts)\n                                  (conj impls\n                                        `(defmethod ~method-name :default [x# & args#]\n                                           (let [meta# (meta x#)\n                                                 method# (get meta# '~fq-name)]\n                                             (if method#\n                                               (apply method# x# args#)\n                                               (throw (new #?(:clj IllegalArgumentException\n                                                              :cljs js/Error)\n                                                           (str \"No implementation of method: \"\n                                                                ~(keyword method-name) \" of protocol: \"\n                                                                (var ~protocol-name) \" found for: \"\n                                                                (clojure.core/protocol-type-impl x#))))))))\n                                  impls)]\n                      `(do\n                         ~@impls\n                         #?(:clj (alter-var-root (var ~protocol-name)\n                                                 update :methods conj ~method-name)\n                            :cljs (def ~protocol-name\n                                    (update ~protocol-name :methods conj ~method-name))))))\n                  signatures))]\n    expansion))\n\n(defn extend-protocol [_ _ ctx protocol-name & impls]\n  (let [impls (utils/split-when #(not (seq? %)) impls)\n        protocol-var (@utils/eval-resolve-state ctx protocol-name)\n        protocol-ns (-> protocol-var deref :ns)\n        pns (str (vars/getName protocol-ns))\n        fq-meth-name #(symbol pns %)\n        expansion\n        `(do ~@(map (fn [[type & meths]]\n                      `(do\n                         ~@(map (fn [meth]\n                                  `(defmethod ~(fq-meth-name (name (first meth)))\n                                     ~type\n                                     ~(second meth) ~@(nnext meth)))\n                                meths)))\n                    impls))]\n    #_(prn expansion)\n    expansion))\n\n(defn extend [ctx atype & proto+mmaps]\n  (doseq [[proto mmap] (partition 2 proto+mmaps)\n          :let [proto-ns (:ns proto)\n                pns (vars/getName proto-ns)]]\n    #_(when-not (protocol? proto)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str proto \" is not a protocol\"))))\n    #_(when (implements? proto atype)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str atype \" already directly implements \" (:on-interface proto) \" for protocol:\"\n                         (:var proto)))))\n    (doseq [[fn-name f] mmap]\n      (let [fn-sym (symbol (name fn-name))\n            env @(:env ctx)\n            multi-method-var (get-in env [:namespaces pns fn-sym])\n            multi-method @multi-method-var]\n        (mms/multi-fn-add-method-impl multi-method atype f))\n      )\n    #_(-reset-methods (vars/alter-var-root (:var proto) assoc-in [:impls atype] mmap))))\n\n(defn extend-type [_ _ ctx atype & proto+meths]\n  (let [proto+meths (utils/split-when #(not (seq? %)) proto+meths)]\n    `(do ~@(map (fn [[proto & meths]]\n                  (let [protocol-var (@utils/eval-resolve-state ctx proto)\n                        protocol-ns (-> protocol-var deref :ns)\n                        pns (str (vars/getName protocol-ns))\n                        fq-meth-name #(symbol pns %)]\n                    `(do\n                       ~@(map (fn [meth]\n                                `(defmethod ~(fq-meth-name (name (first meth)))\n                                   ~atype ~(second meth) ~@(nnext meth)))\n                              meths)))) proto+meths))))\n\n;; IAtom can be implemented as a protocol on reify and defrecords in sci\n\n(defn find-matching-non-default-method [protocol obj]\n  (boolean (some #(when-let [m (get-method % (types/type-impl obj))]\n                    (let [ms (methods %)\n                          default (get ms :default)]\n                      (not (identical? m default))))\n                 (:methods protocol))))\n\n(defn satisfies? [protocol obj]\n  (if  #?(:clj (instance? sci.impl.types.IReified obj)\n          :cljs (clojure.core/satisfies? types/IReified obj))\n    (when-let [obj-type (types/getInterface obj)]\n      (= protocol obj-type))\n    ;; can be record that is implementing this protocol\n    ;; or a type like String, etc. that implements a protocol via extend-type, etc.\n    #?(:cljs (let [p (:protocol protocol)]\n               (or\n                (and p\n                     (condp = p\n                       IDeref (cljs.core/satisfies? IDeref obj)\n                       ISwap (cljs.core/satisfies? ISwap obj)\n                       IReset (cljs.core/satisfies? IReset obj)))\n                (find-matching-non-default-method protocol obj)))\n       :clj (find-matching-non-default-method protocol obj))))\n\n(defn instance-impl [clazz x]\n  (cond\n    ;; fast path for Clojure when using normal clazz\n    #?@(:clj [(class? clazz) (instance? clazz x)])\n    ;; records are currently represented as a symbol with metadata\n    (and (symbol? clazz) (some-> clazz meta :sci.impl/record))\n    (= clazz (-> x meta :type))\n    ;; only in Clojure, we could be referring to clojure.lang.IDeref as a sci protocol\n    #?@(:clj [(map? clazz)\n              (if-let [c (:class clazz)]\n                ;; this is a protocol which is an interface on the JVM\n                (or (satisfies? clazz x)\n                    ;; this is the fallback because we excluded defaults for the core protocols\n                    (instance? c x))\n                (satisfies? clazz x))])\n    ;; could we have a fast path for CLJS too? please let me know!\n    :else (instance? clazz x)))\n\n(defn extends?\n  \"Returns true if atype extends protocol\"\n  [protocol atype]\n  (boolean (some #(get-method % atype) (:methods protocol))))\n"]}