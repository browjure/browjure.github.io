["^ ","~:payload",["^ ","~:path",["~:sections"],"~:value",["^ ","~:browjure",["^ ","~:namespaces",["^ ","~$org.browjure.server",["~#list",[["~$org.browjure.server/set-path-value","Used to send edn to all connected browjure clients.","(defn set-path-value\n  \"Used to send edn to all connected browjure clients.\"\n  [context path value]\n  (let [command {:payload {:path path :value value}\n                 :type    :set-path-value}]\n    (echo-to-clients context command)))"],["~$org.browjure.server/launch!","Can be called to open browjure client in preferred browser","(defn launch!\n  \"Can be called to open browjure client in preferred browser\"\n  [ctx]\n  (open-app-in-browser ctx))"],["~$org.browjure.server/prepare-plugins",null,"(defn prepare-plugins [plugins] \"NPM installs the plugins and compiles the cljs using shadow-cljs\"\n  (when (seq plugins) (doall (map (fn [plugin]\n                                    (swap! org.browjure.state/registry\n                                           clojure.set/union\n                                           (:expandable-symbols plugin)))\n                                  (vals plugins))))\n  (when (seq plugins) (install-npm-deps (vals plugins)))\n  (when (seq plugins) (compile-plugins (vals plugins))))"],["~$org.browjure.server/ring-routes",null,"(defn ring-routes\n  [{:keys [ring-ajax-post ring-ajax-get-or-ws-handshake] :as context}]\n  (routes\n   (GET  \"/\"      req (index-page req))\n   (GET  \"/chsk\"  req (ring-ajax-get-or-ws-handshake req))\n   (POST \"/chsk\"  req (ring-ajax-post req))\n   (route/resources \"/\")\n   (route/not-found \"<h1>Page not found</h1>\")))"],["~$org.browjure.server/recording",null,"(def recording (atom false))"],["~$org.browjure.server/echo-to-clients","Command used by browjure to send command to all connected browjure clients","(defn echo-to-clients\n  \"Command used by browjure to send command to all connected browjure clients\"\n  [{:keys [connected-uids chsk-send!] :as context} command]\n  ;; {:pre [@( ensure-servers)]}\n  (when @recording (swap! recorded-commands conj command))\n  (doseq [uid (:any @connected-uids)]\n    (chsk-send! uid [:event/echo command])))"],["~$org.browjure.server/run","Higher level command used by browjure to send command to all connected browjure clients","(defn run\n  \"Higher level command used by browjure to send command to all connected browjure clients\"\n  [context command]\n  ;; {:pre [@(ensure-servers)]}\n  (when (:debug command) (println \"running command \" command))\n  ;;could use defmulti but don't like the redef behavior\n  (let [{:keys [id type payload]} command]\n    (case type\n      :echo-to-client\n      (echo-to-clients context payload)\n      (println \"todo impl run for \" command))))"],["~$org.browjure.server/init","Main entry point for browjure library use: call this function with\n  {:plugins {:my-plugin org.browjure.my-plugin.plugin/plugin ...}}\n  To start installing plugins, compiling clojurescript and start a webserver to\n  host browjure clients.","(defn init\n  \"Main entry point for browjure library use: call this function with\n  {:plugins {:my-plugin org.browjure.my-plugin.plugin/plugin ...}}\n  To start installing plugins, compiling clojurescript and start a webserver to\n  host browjure clients.\"\n  ([] (init {}))\n  ([{:keys [plugins] :as ctx}]\n   (let [packer (sente-transit/get-transit-packer :json)\n         {:keys [ch-recv\n                 send-fn\n                 connected-uids\n                 ajax-post-fn\n                 ajax-get-or-ws-handshake-fn]} (sente/make-channel-socket!\n                                                (get-sch-adapter)\n                                                {:packer packer\n                                                 :user-id-fn :client-id})\n         context1    {:ring-ajax-post                ajax-post-fn\n                      :ring-ajax-get-or-ws-handshake ajax-get-or-ws-handshake-fn\n                      :ch-chsk                       ch-recv\n                      :chsk-send!                    send-fn\n                      :connected-uids                connected-uids\n                      :plugins\n                      (atom\n                       (merge\n                        {:browjure-sablono\n                         {:id :browjure-sablono\n                          :module '{:browjure-sablono\n                                    {:entries [org.browjure.sablono.base]\n                                     :depends-on #{:browjure}}}\n                          :npm {:deps #{{:id \"react\" :version \"17.0.1\"}\n                                        {:id \"react-dom\" :version \"17.0.1\"}\n                                        }}\n                          :namespace \"browjure-sablono\"}\n                         :browjure\n                         {:id :browjure\n                          :module '{:browjure\n                                    {:entries    [org.browjure.base]\n                                     :depends-on #{:core}}}\n                          :npm {:deps #{{:id \"rxjs\" :version \"^7.0.0-beta.0\"}\n                                        {:id \"shadow-cljs\" :version \"2.11.20\"}}}\n                          :namespace \"browjure\"}}\n                        plugins))}\n         http-svr    (start-web-server context1)\n         context     (assoc context1 :http-svr http-svr)]\n     (go-loop [evt (<! ch-recv)]\n       (tap> (:event evt))\n       (recur (<! ch-recv)))\n     (prepare-plugins @(:plugins context1))\n     (add-watch connected-uids :new-conns (new-connection-fn context))\n     (-> context\n         (merge (dissoc ctx :plugins))))))"],["~$org.browjure.server/start-web-server","Called by browjure on org.browjure/init! calls to host the web assets for browjure clients.","(defn start-web-server \"Called by browjure on org.browjure/init! calls to host the web assets for browjure clients.\"\n  [context]\n  (let [handler (ring.middleware.defaults/wrap-defaults\n                 (ring-routes context)\n                 ring.middleware.defaults/site-defaults)]\n    (let [stop-fn (http-kit/run-server handler {:port 4004})]\n      (fn [] (stop-fn :timeout 100)))))"],["~$org.browjure.server/close-context!","Can be called to close context dependencies, for example\n  to start new context with (more/other) plugins.","(defn close-context!\n  \"Can be called to close context dependencies, for example\n  to start new context with (more/other) plugins.\"\n  [ctx]\n  (apply (:http-svr ctx) []))"],["~$org.browjure.server/finish-recording","After starting recording using org.browjure.server/record run finish-recording\n  to flush recorded client-commands to commands.json files in order to replay offline.","(defn finish-recording\n  \"After starting recording using org.browjure.server/record run finish-recording\n  to flush recorded client-commands to commands.json files in order to replay offline.\"\n  []\n  (reset! recording false)\n  (doall\n   (map-indexed\n    (fn [i command]\n      (with-open [out (io/output-stream\n                       (str \"resources/public/command-\" i \".json\"))]\n        (t/write (t/writer out :json) command)))\n    @recorded-commands))\n  (spit \"resources/public/commands.json\" (count @recorded-commands))\n  (reset! recorded-commands []))"],["~$org.browjure.server/clear-cache","Command used to debug issues with browjure client cache. For example use\n  when changes in browjure plugin base app don't work.","(defn clear-cache\n  \"Command used to debug issues with browjure client cache. For example use\n  when changes in browjure plugin base app don't work.\"\n  [context]\n  (echo-to-clients context {:type :clear-cache}))"],["~$org.browjure.server/index-page",null,"(defn index-page [req]\n  (hiccup/html\n   (let [csrf-token\n         ;; (:anti-forgery-token ring-req) ; Also an option\n         (force anti-forgery/*anti-forgery-token*)]\n     [:div\n      [:div#sente-csrf-token {:data-csrf-token csrf-token}]\n      [:div {:id \"app\"}\n       \"Browjure base app loaded. Start running your commands!\"]\n      [:script {:type \"text/javascript\" :src \"js/core.js\"}]\n      [:script {:type \"text/javascript\" :src \"js/browjure.js\"}]\n      [:script {:type \"text/javascript\" :src \"js/browjure-sablono.js\"}]])))"],["~$org.browjure.server/send-plugin","Called by browjure when a client connects for the registered\n  plugins to have client perform necessary actions to prepare plugin commands.","(defn send-plugin\n  \"Called by browjure when a client connects for the registered\n  plugins to have client perform necessary actions to prepare plugin commands.\"\n  [{:keys [chsk-send!] :as context} connected-id plugin]\n  (let [command {:type :register-plugin\n                 :id (:id plugin)\n                 :payload (merge (if (:namespace plugin) {:base-path (str \"js/\" (:namespace plugin) \".js\")} {})\n                                 plugin)}]\n    (when @recording\n      (swap! recorded-commands conj\n             command))\n    (when connected-id\n      (chsk-send! connected-id\n                  [:event/echo command]))))"],["~$org.browjure.server/new-connection-fn","Called by browjure on new client connections","(defn new-connection-fn\n  \"Called by browjure on new client connections\"\n  [{:keys [plugins] :as context}]\n  (fn [_ new old & args]\n    (let [connected-id (first (clojure.set/difference (:ws @new) (:ws old)))]\n      (doseq [plugin (-> @plugins\n                         (dissoc :browjure)\n                         (dissoc :browjure-sablono) vals)]\n        (send-plugin context connected-id plugin))\n      (send-plugin\n       context\n       connected-id {:id   \"browjure\"\n                     :sablono\n                     {:hiccup-tag->factory-symbol\n                      {:hiccup-fn 'org.browjure.base/make-component\n                       :hiccup-component\n                       'org.browjure.base/hiccup-component}}}))))"],["~$org.browjure.server/register","Command used to add plugins to context.","(defn register\n  \"Command used to add plugins to context.\"\n  [{:keys [plugins] :as context} {:keys [id namespace sablono] :as plugin}]\n  (swap! plugins assoc id plugin))"],["~$org.browjure.server/recorded-commands",null,"(def recorded-commands (atom []))"],["~$org.browjure.server/record","Starts recording commands sent to clients, used to replay\n  actions for example for static page hosted browjure pages/apps.","(defn record\n  \"Starts recording commands sent to clients, used to replay\n  actions for example for static page hosted browjure pages/apps.\"\n  []\n  (reset! recording true))"],["~$org.browjure.server/open-app-in-browser","Opens preferred browser to open browjure client on browjure web server.","(defn open-app-in-browser \"Opens preferred browser to open browjure client on browjure web server.\"\n  [{:keys [preferred-browser-sh-path] :as context}]\n  (let [uri \"http://localhost:4004\"]\n    (try\n      (cond\n        preferred-browser-sh-path\n        (apply sh (conj preferred-browser-sh-path uri))\n        (and (java.awt.Desktop/isDesktopSupported)\n             (.isSupported (java.awt.Desktop/getDesktop) java.awt.Desktop$Action/BROWSE))\n        (.browse (java.awt.Desktop/getDesktop) (java.net.URI. uri)))\n      (Thread/sleep 7500)\n      (catch java.awt.HeadlessException _))))"]]],"~$org.browjure.build",["^7",[["~$org.browjure.build/install-npm-deps","run yarn install on dependencies","(defn install-npm-deps\n  \"run yarn install on dependencies\"\n  [plugins]\n  (println \"install plugins\" plugins)\n  (install-deps {:npm-deps {:install-cmd [\"yarn\" \"add\" \"--exact\"]}}\n                (apply gather-deps plugins)))"],["~$org.browjure.build/compile-plugins","starts cljs compilation of modules/plugins.","(defn compile-plugins\n  \"starts cljs compilation of modules/plugins.\"\n  [plugins]\n  (println \"building \"\n           (pr-str {:build-id   :browjure\n                    :target     :browser\n                    :output-dir \"resources/public/js\"\n                    :asset-path \"/js/\"\n                    :modules (apply merge\n                                    (conj (map :module plugins)\n                                          '{:core {:entries [cljs.core cljs.spec.alpha]}\n                                            }))\n                    :compiler-options {:optimizations :simple\n                                       :output-feature-set :es6}}))\n  (dev-api/compile*\n   {:build-id   :browjure\n    :target     :browser\n    :output-dir \"resources/public/js\"\n    :asset-path \"/js/\"\n    :modules (apply merge\n                    (conj (map :module plugins)\n                          '{:core {:entries [cljs.core cljs.spec.alpha]}\n                            }))\n    :compiler-options {:optimizations :simple\n                       :output-feature-set :es6}}\n   {}))"],["~$org.browjure.build/gather-deps","Extract dependencies from plugin","(defn gather-deps\n  \"Extract dependencies from plugin\"\n  [& plugins]\n  (set (mapcat (fn [{:keys [npm]}]\n                 (:deps npm))\n               plugins)))"]]]],"~:examples",[["^ ","~:heading","Setting up a basic browjure context","~:text","To start using browjure set up a context with the plugins you want to use.","~:code","(ns\n my-namespace\n (:require\n  [org.browjure.server\n   :refer\n   [run echo-to-clients set-path-value init launch!]]\n  [org.browjure.material-ui.plugin :as mui.plugin]))\n \n(def\n browjure-context\n (init\n  {:plugins\n   {:material-ui mui.plugin/plugin,\n    :deck (assoc deck.plugin/plugin :mapbox-token \"my-token\"),\n    :codemirror cm.plugin/plugin},\n   :preferred-browser-sh-path [\"open\" \"-a\" \"Google Chrome\"]}))","~:code-height","260px"],["^ ","^Q","Launch a browser to open the app.","^S","20px","^R","(launch! browjure-context)"],["^ ","^Q","Start interacting from your repl.","^S","150px","^R","(defn\n show-string\n [some-string]\n (echo-to-clients\n  browjure-context\n  {:type :view-sablono, :payload [:div [:h1 some-string]]}))\n \n(show-string \"hello from clj\")"],["^ ","^P","What can Browjure do?","^Q","Make use of powerful JavaSript libraries from Clojure by composing more components of available plugins. Send back and forth data between the components and your Clojure REPL.","^R","(with-hooks\n [controlled-lon\n  {:type :path, :path [:my-app :lon], :init -122.51669}\n  controlled-lat\n  {:type :path, :path [:my-app :lat], :init 37.7853}\n  selected-view\n  {:type :path, :path [:menu :selected-view]}]\n (card\n  {:style\n   {:margin \"10px\", :padding \"10px\", :position \"absolute\", :zIndex 3}}\n  (slider\n   {:value controlled-lat,\n    :orientation \"vertical\",\n    :style {:height \"200px\"},\n    :step 1.0E-4,\n    :min 37,\n    :max 38,\n    :onChange (fn [e num] (set-path-value [:my-app :lat] num))})\n  (typography {:variant \"caption\"} \"long-lat dataflow\")\n  (slider\n   {:value controlled-lon,\n    :style {:width \"200px\"},\n    :step 1.0E-4,\n    :min -123,\n    :max -122,\n    :onChange (fn [e num] (set-path-value [:my-app :lon] num))})))\n \n(deck-component\n {:style {:position \"absolute\"},\n  :container-props\n  {:style {:height \"400px\", :width \"900px\", :position \"relative\"}},\n  :children\n  [(static-map\n    {:key \"map\",\n     :mapboxApiAccessToken\n     \"pk.eyJ1IjoiYmJzcyIsImEiOiI0VENjNkJjIn0.Qq5k4uQwjXuOnbxaQayvCw\",\n     :reuseMaps true,\n     :mapStyle \"mapbox://styles/mapbox/dark-v9\",\n     :preventStyleDiffing true})]}\n (line-layer\n  {:id \"controlled-line\",\n   :data\n   [{:sourcePosition [-122.41669 37.7853],\n     :targetPosition [controlled-lon controlled-lat]}],\n   :getWidth 20,\n   :getColor [150 150 250]}))","~:example-id","~:composed-example"],["^ ","^P","Explore","^Q","Explore the various plugins we've created for browjure so far through the navigation on the left!"]]],"~:browjure-deck",["^ ","~:header-img","https://deck.gl/images/visgl-logo.png","~:header-img-style",["^ ","~:background","rgb(120, 150, 120)","~:borderRadius","5px","~:marginRight","5px"],"^5",["^ ","~$org.browjure.deck.controlled-layers",["^7",[["~$org.browjure.deck.controlled-layers/effect","Returns form that creates effect where props will have functions serialized.","(defmacro effect \"Returns form that creates effect where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/effect ~@args))"],["~$org.browjure.deck.controlled-layers/aggregation-layer","Returns form that creates aggregation-layer where props will have functions serialized.","(defmacro aggregation-layer \"Returns form that creates aggregation-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/aggregation-layer ~@args))"],["~$org.browjure.deck.controlled-layers/grid-layer","Returns form that creates grid-layer where props will have functions serialized.","(defmacro grid-layer \"Returns form that creates grid-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/grid-layer ~@args))"],["~$org.browjure.deck.controlled-layers/arc-layer","Returns form that creates arc-layer where props will have functions serialized.","(defmacro arc-layer \"Returns form that creates arc-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/arc-layer ~@args))"],["~$org.browjure.deck.controlled-layers/viewport","Returns form that creates viewport where props will have functions serialized.","(defmacro viewport \"Returns form that creates viewport where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/viewport ~@args))"],["~$org.browjure.deck.controlled-layers/deck-renderer","Returns form that creates deck-renderer where props will have functions serialized.","(defmacro deck-renderer \"Returns form that creates deck-renderer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/deck-renderer ~@args))"],["~$org.browjure.deck.controlled-layers/cpu-aggregator","Returns form that creates cpu-aggregator where props will have functions serialized.","(defmacro cpu-aggregator \"Returns form that creates cpu-aggregator where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/cpu-aggregator ~@args))"],["~$org.browjure.deck.controlled-layers/globe-controller","Returns form that creates globe-controller where props will have functions serialized.","(defmacro globe-controller \"Returns form that creates globe-controller where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/globe-controller ~@args))"],["~$org.browjure.deck.controlled-layers/log","Returns form that creates log where props will have functions serialized.","(defmacro log \"Returns form that creates log where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/log ~@args))"],["~$org.browjure.deck.controlled-layers/orbit-view","Returns form that creates orbit-view where props will have functions serialized.","(defmacro orbit-view \"Returns form that creates orbit-view where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/orbit-view ~@args))"],["~$org.browjure.deck.controlled-layers/color-bins","Returns form that creates color-bins where props will have functions serialized.","(defmacro color-bins \"Returns form that creates color-bins where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/color-bins ~@args))"],["~$org.browjure.deck.controlled-layers/orbit-controller","Returns form that creates orbit-controller where props will have functions serialized.","(defmacro orbit-controller \"Returns form that creates orbit-controller where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/orbit-controller ~@args))"],["~$org.browjure.deck.controlled-layers/h3-cluster-layer","Returns form that creates h3-cluster-layer where props will have functions serialized.","(defmacro h3-cluster-layer \"Returns form that creates h3-cluster-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/h3-cluster-layer ~@args))"],["~$org.browjure.deck.controlled-layers/view","Returns form that creates view where props will have functions serialized.","(defmacro view \"Returns form that creates view where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/view ~@args))"],["~$org.browjure.deck.controlled-layers/column-layer","Returns form that creates column-layer where props will have functions serialized.","(defmacro column-layer \"Returns form that creates column-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/column-layer ~@args))"],["~$org.browjure.deck.controlled-layers/composite-layer","Returns form that creates composite-layer where props will have functions serialized.","(defmacro composite-layer \"Returns form that creates composite-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/composite-layer ~@args))"],["~$org.browjure.deck.controlled-layers/path-layer","Returns form that creates path-layer where props will have functions serialized.","(defmacro path-layer \"Returns form that creates path-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/path-layer ~@args))"],["~$org.browjure.deck.controlled-layers/cpu-grid-layer","Returns form that creates cpu-grid-layer where props will have functions serialized.","(defmacro cpu-grid-layer \"Returns form that creates cpu-grid-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/cpu-grid-layer ~@args))"],["~$org.browjure.deck.controlled-layers/screen-grid-layer","Returns form that creates screen-grid-layer where props will have functions serialized.","(defmacro screen-grid-layer \"Returns form that creates screen-grid-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/screen-grid-layer ~@args))"],["~$org.browjure.deck.controlled-layers/orthographic-controller","Returns form that creates orthographic-controller where props will have functions serialized.","(defmacro orthographic-controller \"Returns form that creates orthographic-controller where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/orthographic-controller ~@args))"],["~$org.browjure.deck.controlled-layers/carto-sql-layer","Returns form that creates carto-sql-layer where props will have functions serialized.","(defmacro carto-sql-layer \"Returns form that creates carto-sql-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/carto-sql-layer ~@args))"],["~$org.browjure.deck.controlled-layers/hexagon-layer","Returns form that creates hexagon-layer where props will have functions serialized.","(defmacro hexagon-layer \"Returns form that creates hexagon-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/hexagon-layer ~@args))"],["~$org.browjure.deck.controlled-layers/map-view","Returns form that creates map-view where props will have functions serialized.","(defmacro map-view \"Returns form that creates map-view where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/map-view ~@args))"],["~$org.browjure.deck.controlled-layers/scatterplot-layer","Returns form that creates scatterplot-layer where props will have functions serialized.","(defmacro scatterplot-layer \"Returns form that creates scatterplot-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/scatterplot-layer ~@args))"],["~$org.browjure.deck.controlled-layers/deck-component","Returns deck react form with first argument props and (rest arguments) assumed to be deck layers. Pass things like StaticMap to :children array on props.","(defmacro deck-component\n              \"Returns deck react form with first argument props and (rest arguments) assumed to be deck layers. Pass things like StaticMap to :children array on props.\"\n              [props & layers]\n              `(~'$ :div\n                (merge\n                 {:ref (fn [~'c]\n                         (when ~'c\n                           (~'render\n                            (~'org.browjure.deck.layers/deck\n                             (merge {:controller true\n                                     :pickingRadius 10\n                                     :container ~'c\n                                     :initialViewState (~'clj->js\n                                                        {:latitude 37.618889\n                                                         :longitude -122.375\n                                                         :zoom   10\n                                                         :bearing 0\n                                                         :pitch  0\n                                                         :width  ~'(gget js/window \"innerWidth\")\n                                                         :height ~'(gget js/window \"innerHeight\")})\n                                     :layers (to-array [~@(clojure.walk/postwalk\n                                                           #(cond (and (list? %)\n                                                                       (symbol? (first %))\n                                                                       (var? (resolve (first %)))\n                                                                       (= (namespace (symbol (resolve (first %))))\n                                                                          \"org.browjure.deck.controlled-layers\"))\n                                                                  (macroexpand-1 `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                                                                  (and (map? %)\n                                                                       (:style %))\n                                                                  (merge % {:style `(~'clj->js ~(:style %))})\n                                                                  :else %)\n                                                           layers)])\n                                     :children (to-array [~@(:children props)])}\n                                    ~(dissoc props :children)))\n                            ~'c)))}\n                 ~(:container-props props))))"],["~$org.browjure.deck.controlled-layers/bin-sorter","Returns form that creates bin-sorter where props will have functions serialized.","(defmacro bin-sorter \"Returns form that creates bin-sorter where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/bin-sorter ~@args))"],["~$org.browjure.deck.controlled-layers/heatmap-layer","Returns form that creates heatmap-layer where props will have functions serialized.","(defmacro heatmap-layer \"Returns form that creates heatmap-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/heatmap-layer ~@args))"],["~$org.browjure.deck.controlled-layers/solid-polygon-layer","Returns form that creates solid-polygon-layer where props will have functions serialized.","(defmacro solid-polygon-layer \"Returns form that creates solid-polygon-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/solid-polygon-layer ~@args))"],["~$org.browjure.deck.controlled-layers/controller","Returns form that creates controller where props will have functions serialized.","(defmacro controller \"Returns form that creates controller where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/controller ~@args))"],["~$org.browjure.deck.controlled-layers/simple-mesh-layer","Returns form that creates simple-mesh-layer where props will have functions serialized.","(defmacro simple-mesh-layer \"Returns form that creates simple-mesh-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/simple-mesh-layer ~@args))"],["~$org.browjure.deck.controlled-layers/tile-3d-layer","Returns form that creates tile-3d-layer where props will have functions serialized.","(defmacro tile-3d-layer \"Returns form that creates tile-3d-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/tile-3d-layer ~@args))"],["~$org.browjure.deck.controlled-layers/fly-to-interpolator","Returns form that creates fly-to-interpolator where props will have functions serialized.","(defmacro fly-to-interpolator \"Returns form that creates fly-to-interpolator where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/fly-to-interpolator ~@args))"],["~$org.browjure.deck.controlled-layers/geo-json-layer","Returns form that creates geo-json-layer where props will have functions serialized.","(defmacro geo-json-layer \"Returns form that creates geo-json-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/geo-json-layer ~@args))"],["~$org.browjure.deck.controlled-layers/tile-layer","Returns form that creates tile-layer where props will have functions serialized.","(defmacro tile-layer \"Returns form that creates tile-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/tile-layer ~@args))"],["~$org.browjure.deck.controlled-layers/terrain-layer","Returns form that creates terrain-layer where props will have functions serialized.","(defmacro terrain-layer \"Returns form that creates terrain-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/terrain-layer ~@args))"],["~$org.browjure.deck.controlled-layers/map-controller","Returns form that creates map-controller where props will have functions serialized.","(defmacro map-controller \"Returns form that creates map-controller where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/map-controller ~@args))"],["~$org.browjure.deck.controlled-layers/orthographic-view","Returns form that creates orthographic-view where props will have functions serialized.","(defmacro orthographic-view \"Returns form that creates orthographic-view where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/orthographic-view ~@args))"],["~$org.browjure.deck.controlled-layers/sun-light","Returns form that creates sun-light where props will have functions serialized.","(defmacro sun-light \"Returns form that creates sun-light where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/sun-light ~@args))"],["~$org.browjure.deck.controlled-layers/trips-layer","Returns form that creates trips-layer where props will have functions serialized.","(defmacro trips-layer \"Returns form that creates trips-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/trips-layer ~@args))"],["~$org.browjure.deck.controlled-layers/grid-cell-layer","Returns form that creates grid-cell-layer where props will have functions serialized.","(defmacro grid-cell-layer \"Returns form that creates grid-cell-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/grid-cell-layer ~@args))"],["~$org.browjure.deck.controlled-layers/carto-bq-tiler-layer","Returns form that creates carto-bq-tiler-layer where props will have functions serialized.","(defmacro carto-bq-tiler-layer \"Returns form that creates carto-bq-tiler-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/carto-bq-tiler-layer ~@args))"],["~$org.browjure.deck.controlled-layers/color-categories","Returns form that creates color-categories where props will have functions serialized.","(defmacro color-categories \"Returns form that creates color-categories where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/color-categories ~@args))"],["~$org.browjure.deck.controlled-layers/tesselator","Returns form that creates tesselator where props will have functions serialized.","(defmacro tesselator \"Returns form that creates tesselator where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/tesselator ~@args))"],["~$org.browjure.deck.controlled-layers/attribute-manager","Returns form that creates attribute-manager where props will have functions serialized.","(defmacro attribute-manager \"Returns form that creates attribute-manager where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/attribute-manager ~@args))"],["~$org.browjure.deck.controlled-layers/linear-interpolator","Returns form that creates linear-interpolator where props will have functions serialized.","(defmacro linear-interpolator \"Returns form that creates linear-interpolator where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/linear-interpolator ~@args))"],["~$org.browjure.deck.controlled-layers/mvt-layer","Returns form that creates mvt-layer where props will have functions serialized.","(defmacro mvt-layer \"Returns form that creates mvt-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/mvt-layer ~@args))"],["~$org.browjure.deck.controlled-layers/first-person-controller","Returns form that creates first-person-controller where props will have functions serialized.","(defmacro first-person-controller \"Returns form that creates first-person-controller where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/first-person-controller ~@args))"],["~$org.browjure.deck.controlled-layers/great-circle-layer","Returns form that creates great-circle-layer where props will have functions serialized.","(defmacro great-circle-layer \"Returns form that creates great-circle-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/great-circle-layer ~@args))"],["~$org.browjure.deck.controlled-layers/post-process-effect","Returns form that creates post-process-effect where props will have functions serialized.","(defmacro post-process-effect \"Returns form that creates post-process-effect where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/post-process-effect ~@args))"],["~$org.browjure.deck.controlled-layers/color-continuous","Returns form that creates color-continuous where props will have functions serialized.","(defmacro color-continuous \"Returns form that creates color-continuous where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/color-continuous ~@args))"],["~$org.browjure.deck.controlled-layers/static-map","Returns form that creates static-map where props will have functions serialized.\n   Use as item in :children array on deck props object.","(defmacro static-map\n              \"Returns form that creates static-map where props will have functions serialized.\n   Use as item in :children array on deck props object.\"\n              [& args]\n              `(~'org.browjure.deck.layers/static-map ~@args))"],["~$org.browjure.deck.controlled-layers/first-person-view","Returns form that creates first-person-view where props will have functions serialized.","(defmacro first-person-view \"Returns form that creates first-person-view where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/first-person-view ~@args))"],["~$org.browjure.deck.controlled-layers/gpu-grid-aggregator","Returns form that creates gpu-grid-aggregator where props will have functions serialized.","(defmacro gpu-grid-aggregator \"Returns form that creates gpu-grid-aggregator where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/gpu-grid-aggregator ~@args))"],["~$org.browjure.deck.controlled-layers/globe-view","Returns form that creates globe-view where props will have functions serialized.","(defmacro globe-view \"Returns form that creates globe-view where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/globe-view ~@args))"],["~$org.browjure.deck.controlled-layers/point-cloud-layer","Returns form that creates point-cloud-layer where props will have functions serialized.","(defmacro point-cloud-layer \"Returns form that creates point-cloud-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/point-cloud-layer ~@args))"],["~$org.browjure.deck.controlled-layers/contour-layer","Returns form that creates contour-layer where props will have functions serialized.","(defmacro contour-layer \"Returns form that creates contour-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/contour-layer ~@args))"],["~$org.browjure.deck.controlled-layers/icon-layer","Returns form that creates icon-layer where props will have functions serialized.","(defmacro icon-layer \"Returns form that creates icon-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/icon-layer ~@args))"],["~$org.browjure.deck.controlled-layers/multi-icon-layer","Returns form that creates multi-icon-layer where props will have functions serialized.","(defmacro multi-icon-layer \"Returns form that creates multi-icon-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/multi-icon-layer ~@args))"],["~$org.browjure.deck.controlled-layers/bitmap-layer","Returns form that creates bitmap-layer where props will have functions serialized.","(defmacro bitmap-layer \"Returns form that creates bitmap-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/bitmap-layer ~@args))"],["~$org.browjure.deck.controlled-layers/polygon-layer","Returns form that creates polygon-layer where props will have functions serialized.","(defmacro polygon-layer \"Returns form that creates polygon-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/polygon-layer ~@args))"],["~$org.browjure.deck.controlled-layers/s2-layer","Returns form that creates s2-layer where props will have functions serialized.","(defmacro s2-layer \"Returns form that creates s2-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/s2-layer ~@args))"],["~$org.browjure.deck.controlled-layers/transition-interpolator","Returns form that creates transition-interpolator where props will have functions serialized.","(defmacro transition-interpolator \"Returns form that creates transition-interpolator where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/transition-interpolator ~@args))"],["~$org.browjure.deck.controlled-layers/layers-pass","Returns form that creates layers-pass where props will have functions serialized.","(defmacro layers-pass \"Returns form that creates layers-pass where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/layers-pass ~@args))"],["~$org.browjure.deck.controlled-layers/layer-manager","Returns form that creates layer-manager where props will have functions serialized.","(defmacro layer-manager \"Returns form that creates layer-manager where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/layer-manager ~@args))"],["~$org.browjure.deck.controlled-layers/camera-light","Returns form that creates camera-light where props will have functions serialized.","(defmacro camera-light \"Returns form that creates camera-light where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/camera-light ~@args))"],["~$org.browjure.deck.controlled-layers/layer","Returns form that creates layer where props will have functions serialized.","(defmacro layer \"Returns form that creates layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/layer ~@args))"],["~$org.browjure.deck.controlled-layers/text-layer","Returns form that creates text-layer where props will have functions serialized.","(defmacro text-layer \"Returns form that creates text-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/text-layer ~@args))"],["~$org.browjure.deck.controlled-layers/h3-hexagon-layer","Returns form that creates h3-hexagon-layer where props will have functions serialized.","(defmacro h3-hexagon-layer \"Returns form that creates h3-hexagon-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/h3-hexagon-layer ~@args))"],["~$org.browjure.deck.controlled-layers/line-layer","Returns form that creates line-layer where props will have functions serialized.","(defmacro line-layer \"Returns form that creates line-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/line-layer ~@args))"],["~$org.browjure.deck.controlled-layers/gpu-grid-layer","Returns form that creates gpu-grid-layer where props will have functions serialized.","(defmacro gpu-grid-layer \"Returns form that creates gpu-grid-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/gpu-grid-layer ~@args))"],["~$org.browjure.deck.controlled-layers/web-mercator-viewport","Returns form that creates web-mercator-viewport where props will have functions serialized.","(defmacro web-mercator-viewport \"Returns form that creates web-mercator-viewport where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/web-mercator-viewport ~@args))"],["~$org.browjure.deck.controlled-layers/globe-viewport","Returns form that creates globe-viewport where props will have functions serialized.","(defmacro globe-viewport \"Returns form that creates globe-viewport where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/globe-viewport ~@args))"],["~$org.browjure.deck.controlled-layers/basemap","Returns form that creates basemap where props will have functions serialized.","(defmacro basemap \"Returns form that creates basemap where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/basemap ~@args))"],["~$org.browjure.deck.controlled-layers/layer-extension","Returns form that creates layer-extension where props will have functions serialized.","(defmacro layer-extension \"Returns form that creates layer-extension where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/layer-extension ~@args))"],["~$org.browjure.deck.controlled-layers/lighting-effect","Returns form that creates lighting-effect where props will have functions serialized.","(defmacro lighting-effect \"Returns form that creates lighting-effect where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/lighting-effect ~@args))"],["~$org.browjure.deck.controlled-layers/scenegraph-layer","Returns form that creates scenegraph-layer where props will have functions serialized.","(defmacro scenegraph-layer \"Returns form that creates scenegraph-layer where props will have functions serialized.\"\n   [& args]\n   `(~'org.browjure.deck.layers/scenegraph-layer ~@args))"]]]],"^O",[["^ ","^Q","deck.gl is a powerful webGL data visualization framework with many useful layers for geo visualization (and more)."],["^ ","^Q","Using browjure-deck will allow you to quickly get a basic app in your browser and start sending visualizations of data in your Clojure repl."],["^ ","^R","(ns\n my-namespace\n (:require\n  [org.browjure.server\n   :refer\n   [run echo-to-clients set-path-value init launch!]]\n  [org.browjure.material-ui.plugin :as mui.plugin]))\n \n(def\n ctx\n (brow/init\n  {:plugins\n   {:deck (assoc deck-plugin/plugin :mapbox-token \"pk.my-token\")}}))\n \n(brow/launch! ctx)\n \n(echo-to-clients\n browjure-context\n {:type :view-sablono,\n  :payload\n  (with-hooks\n   []\n   (deck-component\n    {:style {:position \"absolute\"},\n     :container-props\n     {:style {:height \"400px\", :width \"900px\", :position \"relative\"}},\n     :children\n     [(static-map\n       {:key \"map\",\n        :mapboxApiAccessToken \"pk.my-token\",\n        :reuseMaps true,\n        :mapStyle \"mapbox://styles/mapbox/dark-v9\",\n        :preventStyleDiffing true})]}\n    (scatterplot-layer\n     {:data\n      [{:name \"Colma\",\n        :passengers 4214,\n        :coordinates [-122.466233 37.684638]}\n       {:name \"Civic Center\",\n        :passengers 24798,\n        :coordinates [-122.413756 37.779528]}],\n      :stroked false,\n      :filled true,\n      :getPosition (fn [d & args] (aget d \"coordinates\")),\n      :getRadius 1000,\n      :getFillColor [255 200 0]})))})","^S","310px","^T","~:deck-scatterplot"]]],"~:browjure-material-ui",["^ ","^W","https://material-ui.com/static/logo_raw.svg","^O",[["^ ","^Q","This is a plugin for browjure that allows you to use material-ui from your clojure environment. "],["^ ","^Q","Material-ui is a mature react implementation of the visual design system by Google."],["^ ","^Q","Using browjure-material-ui will allow you to quickly get a basic material UI app in your browser. Combine the numerous control/form components from the repl or the UI with the simple interactivity system of browjure to control what data is shown in the UI/other browjure plugins."]],"^5",["^ ","~$org.browjure.material-ui.controlled-components",["^7",[["~$org.browjure.material-ui.controlled-components/stepper",null,"(defmacro stepper [& children]\n       `(~'$ ~'(get key->class :stepper)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/input",null,"(defmacro input [& children]\n       `(~'$ ~'(get key->class :input)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/use-media-query",null,"(defmacro use-media-query [& children]\n       `(~'$ ~'(get key->class :use-media-query)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/svg-icon",null,"(defmacro svg-icon [& children]\n       `(~'$ ~'(get key->class :svg-icon)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table-head",null,"(defmacro table-head [& children]\n       `(~'$ ~'(get key->class :table-head)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/class-symbols",null,"(def class-symbols (quote #{stepper input use-media-query svg-icon table-head list-item-secondary-action tab backdrop badge list-subheader input-adornment step textarea-autosize expansion-panel breadcrumbs snackbar card-media step-label switch card-content menu tooltip select grid-list slider form-group list-item-icon input-base input-label zoom with-mobile-dialog radio-group form-control menu-item grid-list-tile-bar table-row click-away-listener table-body table app-bar portal tabs radio button-base form-control-label css-baseline checkbox accordion-summary button grid-list-tile grid popover swipeable-drawer dialog-title circular-progress box expansion-panel-summary linear-progress mobile-stepper filled-input snackbar-content unstable-trap-focus step-button card-action-area native-select use-scroll-trigger paper tab-scroll-button colors step-connector fab bottom-navigation step-content icon expansion-panel-actions text-field no-ssr fade modal drawer bottom-navigation-action icon-button list-item expansion-panel-details list-item-avatar accordion form-label menu-list card form-helper-text step-icon outlined-input chip accordion-details grow with-width dialog-content-text divider dialog-actions table-container root-ref list table-pagination button-group slide hidden link avatar container dialog-content typography accordion-actions table-cell list-item-text dialog card-header toolbar popper table-sort-label card-actions collapse table-footer}))"],["~$org.browjure.material-ui.controlled-components/list-item-secondary-action",null,"(defmacro list-item-secondary-action [& children]\n       `(~'$ ~'(get key->class :list-item-secondary-action)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/tab",null,"(defmacro tab [& children]\n       `(~'$ ~'(get key->class :tab)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/backdrop",null,"(defmacro backdrop [& children]\n       `(~'$ ~'(get key->class :backdrop)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/badge",null,"(defmacro badge [& children]\n       `(~'$ ~'(get key->class :badge)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/list-subheader",null,"(defmacro list-subheader [& children]\n       `(~'$ ~'(get key->class :list-subheader)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/input-adornment",null,"(defmacro input-adornment [& children]\n       `(~'$ ~'(get key->class :input-adornment)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/step",null,"(defmacro step [& children]\n       `(~'$ ~'(get key->class :step)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/textarea-autosize",null,"(defmacro textarea-autosize [& children]\n       `(~'$ ~'(get key->class :textarea-autosize)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/expansion-panel",null,"(defmacro expansion-panel [& children]\n       `(~'$ ~'(get key->class :expansion-panel)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/breadcrumbs",null,"(defmacro breadcrumbs [& children]\n       `(~'$ ~'(get key->class :breadcrumbs)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/snackbar",null,"(defmacro snackbar [& children]\n       `(~'$ ~'(get key->class :snackbar)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/card-media",null,"(defmacro card-media [& children]\n       `(~'$ ~'(get key->class :card-media)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/step-label",null,"(defmacro step-label [& children]\n       `(~'$ ~'(get key->class :step-label)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/switch",null,"(defmacro switch [& children]\n       `(~'$ ~'(get key->class :switch)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/card-content",null,"(defmacro card-content [& children]\n       `(~'$ ~'(get key->class :card-content)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/menu",null,"(defmacro menu [& children]\n       `(~'$ ~'(get key->class :menu)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/tooltip",null,"(defmacro tooltip [& children]\n       `(~'$ ~'(get key->class :tooltip)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/select",null,"(defmacro select [& children]\n       `(~'$ ~'(get key->class :select)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/grid-list",null,"(defmacro grid-list [& children]\n       `(~'$ ~'(get key->class :grid-list)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/slider",null,"(defmacro slider [& children]\n       `(~'$ ~'(get key->class :slider)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/form-group",null,"(defmacro form-group [& children]\n       `(~'$ ~'(get key->class :form-group)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/list-item-icon",null,"(defmacro list-item-icon [& children]\n       `(~'$ ~'(get key->class :list-item-icon)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/input-base",null,"(defmacro input-base [& children]\n       `(~'$ ~'(get key->class :input-base)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/input-label",null,"(defmacro input-label [& children]\n       `(~'$ ~'(get key->class :input-label)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/zoom",null,"(defmacro zoom [& children]\n       `(~'$ ~'(get key->class :zoom)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/with-mobile-dialog",null,"(defmacro with-mobile-dialog [& children]\n       `(~'$ ~'(get key->class :with-mobile-dialog)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/radio-group",null,"(defmacro radio-group [& children]\n       `(~'$ ~'(get key->class :radio-group)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/form-control",null,"(defmacro form-control [& children]\n       `(~'$ ~'(get key->class :form-control)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/menu-item",null,"(defmacro menu-item [& children]\n       `(~'$ ~'(get key->class :menu-item)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/grid-list-tile-bar",null,"(defmacro grid-list-tile-bar [& children]\n       `(~'$ ~'(get key->class :grid-list-tile-bar)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table-row",null,"(defmacro table-row [& children]\n       `(~'$ ~'(get key->class :table-row)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/click-away-listener",null,"(defmacro click-away-listener [& children]\n       `(~'$ ~'(get key->class :click-away-listener)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table-body",null,"(defmacro table-body [& children]\n       `(~'$ ~'(get key->class :table-body)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table",null,"(defmacro table [& children]\n       `(~'$ ~'(get key->class :table)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/app-bar",null,"(defmacro app-bar [& children]\n       `(~'$ ~'(get key->class :app-bar)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/portal",null,"(defmacro portal [& children]\n       `(~'$ ~'(get key->class :portal)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/tabs",null,"(defmacro tabs [& children]\n       `(~'$ ~'(get key->class :tabs)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/radio",null,"(defmacro radio [& children]\n       `(~'$ ~'(get key->class :radio)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/button-base",null,"(defmacro button-base [& children]\n       `(~'$ ~'(get key->class :button-base)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/form-control-label",null,"(defmacro form-control-label [& children]\n       `(~'$ ~'(get key->class :form-control-label)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/css-baseline",null,"(defmacro css-baseline [& children]\n       `(~'$ ~'(get key->class :css-baseline)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/checkbox",null,"(defmacro checkbox [& children]\n       `(~'$ ~'(get key->class :checkbox)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/accordion-summary",null,"(defmacro accordion-summary [& children]\n       `(~'$ ~'(get key->class :accordion-summary)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/button",null,"(defmacro button [& children]\n       `(~'$ ~'(get key->class :button)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/grid-list-tile",null,"(defmacro grid-list-tile [& children]\n       `(~'$ ~'(get key->class :grid-list-tile)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/grid",null,"(defmacro grid [& children]\n       `(~'$ ~'(get key->class :grid)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/popover",null,"(defmacro popover [& children]\n       `(~'$ ~'(get key->class :popover)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/swipeable-drawer",null,"(defmacro swipeable-drawer [& children]\n       `(~'$ ~'(get key->class :swipeable-drawer)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/dialog-title",null,"(defmacro dialog-title [& children]\n       `(~'$ ~'(get key->class :dialog-title)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/circular-progress",null,"(defmacro circular-progress [& children]\n       `(~'$ ~'(get key->class :circular-progress)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/box",null,"(defmacro box [& children]\n       `(~'$ ~'(get key->class :box)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/expansion-panel-summary",null,"(defmacro expansion-panel-summary [& children]\n       `(~'$ ~'(get key->class :expansion-panel-summary)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/linear-progress",null,"(defmacro linear-progress [& children]\n       `(~'$ ~'(get key->class :linear-progress)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/mobile-stepper",null,"(defmacro mobile-stepper [& children]\n       `(~'$ ~'(get key->class :mobile-stepper)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/filled-input",null,"(defmacro filled-input [& children]\n       `(~'$ ~'(get key->class :filled-input)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/snackbar-content",null,"(defmacro snackbar-content [& children]\n       `(~'$ ~'(get key->class :snackbar-content)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/unstable-trap-focus",null,"(defmacro unstable-trap-focus [& children]\n       `(~'$ ~'(get key->class :unstable-trap-focus)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/step-button",null,"(defmacro step-button [& children]\n       `(~'$ ~'(get key->class :step-button)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/card-action-area",null,"(defmacro card-action-area [& children]\n       `(~'$ ~'(get key->class :card-action-area)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/native-select",null,"(defmacro native-select [& children]\n       `(~'$ ~'(get key->class :native-select)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/use-scroll-trigger",null,"(defmacro use-scroll-trigger [& children]\n       `(~'$ ~'(get key->class :use-scroll-trigger)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/paper",null,"(defmacro paper [& children]\n       `(~'$ ~'(get key->class :paper)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/tab-scroll-button",null,"(defmacro tab-scroll-button [& children]\n       `(~'$ ~'(get key->class :tab-scroll-button)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/colors",null,"(defmacro colors [& children]\n       `(~'$ ~'(get key->class :colors)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/step-connector",null,"(defmacro step-connector [& children]\n       `(~'$ ~'(get key->class :step-connector)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/fab",null,"(defmacro fab [& children]\n       `(~'$ ~'(get key->class :fab)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/bottom-navigation",null,"(defmacro bottom-navigation [& children]\n       `(~'$ ~'(get key->class :bottom-navigation)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/step-content",null,"(defmacro step-content [& children]\n       `(~'$ ~'(get key->class :step-content)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/icon",null,"(defmacro icon [& children]\n       `(~'$ ~'(get key->class :icon)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/expansion-panel-actions",null,"(defmacro expansion-panel-actions [& children]\n       `(~'$ ~'(get key->class :expansion-panel-actions)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/text-field",null,"(defmacro text-field [& children]\n       `(~'$ ~'(get key->class :text-field)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/no-ssr",null,"(defmacro no-ssr [& children]\n       `(~'$ ~'(get key->class :no-ssr)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/fade",null,"(defmacro fade [& children]\n       `(~'$ ~'(get key->class :fade)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/modal",null,"(defmacro modal [& children]\n       `(~'$ ~'(get key->class :modal)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/drawer",null,"(defmacro drawer [& children]\n       `(~'$ ~'(get key->class :drawer)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/bottom-navigation-action",null,"(defmacro bottom-navigation-action [& children]\n       `(~'$ ~'(get key->class :bottom-navigation-action)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/icon-button",null,"(defmacro icon-button [& children]\n       `(~'$ ~'(get key->class :icon-button)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/list-item",null,"(defmacro list-item [& children]\n       `(~'$ ~'(get key->class :list-item)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/expansion-panel-details",null,"(defmacro expansion-panel-details [& children]\n       `(~'$ ~'(get key->class :expansion-panel-details)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/list-item-avatar",null,"(defmacro list-item-avatar [& children]\n       `(~'$ ~'(get key->class :list-item-avatar)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/accordion",null,"(defmacro accordion [& children]\n       `(~'$ ~'(get key->class :accordion)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/form-label",null,"(defmacro form-label [& children]\n       `(~'$ ~'(get key->class :form-label)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/menu-list",null,"(defmacro menu-list [& children]\n       `(~'$ ~'(get key->class :menu-list)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/card",null,"(defmacro card [& children]\n       `(~'$ ~'(get key->class :card)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/form-helper-text",null,"(defmacro form-helper-text [& children]\n       `(~'$ ~'(get key->class :form-helper-text)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/step-icon",null,"(defmacro step-icon [& children]\n       `(~'$ ~'(get key->class :step-icon)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/outlined-input",null,"(defmacro outlined-input [& children]\n       `(~'$ ~'(get key->class :outlined-input)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/chip",null,"(defmacro chip [& children]\n       `(~'$ ~'(get key->class :chip)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/accordion-details",null,"(defmacro accordion-details [& children]\n       `(~'$ ~'(get key->class :accordion-details)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/grow",null,"(defmacro grow [& children]\n       `(~'$ ~'(get key->class :grow)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/with-width",null,"(defmacro with-width [& children]\n       `(~'$ ~'(get key->class :with-width)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/dialog-content-text",null,"(defmacro dialog-content-text [& children]\n       `(~'$ ~'(get key->class :dialog-content-text)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/divider",null,"(defmacro divider [& children]\n       `(~'$ ~'(get key->class :divider)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/dialog-actions",null,"(defmacro dialog-actions [& children]\n       `(~'$ ~'(get key->class :dialog-actions)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table-container",null,"(defmacro table-container [& children]\n       `(~'$ ~'(get key->class :table-container)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/root-ref",null,"(defmacro root-ref [& children]\n       `(~'$ ~'(get key->class :root-ref)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/list",null,"(defmacro list [& children]\n       `(~'$ ~'(get key->class :list)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table-pagination",null,"(defmacro table-pagination [& children]\n       `(~'$ ~'(get key->class :table-pagination)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/button-group",null,"(defmacro button-group [& children]\n       `(~'$ ~'(get key->class :button-group)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/slide",null,"(defmacro slide [& children]\n       `(~'$ ~'(get key->class :slide)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/hidden",null,"(defmacro hidden [& children]\n       `(~'$ ~'(get key->class :hidden)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/link",null,"(defmacro link [& children]\n       `(~'$ ~'(get key->class :link)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/avatar",null,"(defmacro avatar [& children]\n       `(~'$ ~'(get key->class :avatar)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/container",null,"(defmacro container [& children]\n       `(~'$ ~'(get key->class :container)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/dialog-content",null,"(defmacro dialog-content [& children]\n       `(~'$ ~'(get key->class :dialog-content)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/typography",null,"(defmacro typography [& children]\n       `(~'$ ~'(get key->class :typography)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/accordion-actions",null,"(defmacro accordion-actions [& children]\n       `(~'$ ~'(get key->class :accordion-actions)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table-cell",null,"(defmacro table-cell [& children]\n       `(~'$ ~'(get key->class :table-cell)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/list-item-text",null,"(defmacro list-item-text [& children]\n       `(~'$ ~'(get key->class :list-item-text)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/dialog",null,"(defmacro dialog [& children]\n       `(~'$ ~'(get key->class :dialog)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/card-header",null,"(defmacro card-header [& children]\n       `(~'$ ~'(get key->class :card-header)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/toolbar",null,"(defmacro toolbar [& children]\n       `(~'$ ~'(get key->class :toolbar)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/popper",null,"(defmacro popper [& children]\n       `(~'$ ~'(get key->class :popper)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table-sort-label",null,"(defmacro table-sort-label [& children]\n       `(~'$ ~'(get key->class :table-sort-label)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/card-actions",null,"(defmacro card-actions [& children]\n       `(~'$ ~'(get key->class :card-actions)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/collapse",null,"(defmacro collapse [& children]\n       `(~'$ ~'(get key->class :collapse)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"],["~$org.browjure.material-ui.controlled-components/table-footer",null,"(defmacro table-footer [& children]\n       `(~'$ ~'(get key->class :table-footer)\n                   ~@(clojure.walk/postwalk\n                       #(cond (and (list? %)\n                                   (symbol? (first %))\n                                   (var? (resolve (first %)))\n                                   (= (namespace (symbol (resolve (first %))))\n                                       \"org.browjure.material-ui.controlled-components\"))\n                               (macroexpand `(~(symbol (name (symbol (resolve (first %))))) ~@(rest %)))\n                               (and (map? %)\n                                    (:style %))\n                                (merge % {:style `(~'clj->js ~(:style %))})\n                               :else %)\n                         children)))"]]]]],"~:browjure-codemirror",["^ ","^W","https://codemirror.net/doc/logo.png","^5",["^ ","~$org.browjure.codemirror.plugin",["^7",[["~$org.browjure.codemirror.plugin/plugin","Plugin to include codemirror component, use with (codemirror-clojure {} \"(my-code)\")",null]]]],"^O",[["^ ","^P","Codemirror is a JavaScript plugin that adds code highlighting to textareas.","^Q","The browjure plugin only does basic clojure code displaying such as in this documentation.","^R","(ns\n my-ns\n (:require\n  [org.browjure.server :refer [init]]\n  [org.browjure.codemirror.core :refer [codemirror-clojure]]))\n \n(def browjure-context (init {:plugins {:codemirror cm.plugin/plugin}}))\n \n(codemirror-clojure\n {:container-style {:height \"300px\", :overflow \"hidden\"}}\n \"(my-clojure-code)\")","^S","200px"],["^ ","^Q","CodeMirror can do a lot more, but we haven't integrated any other use-cases yet. If you have any interesting use-cases let us know!"]]],"~:vega",["^ ","^W","https://upload.wikimedia.org/wikipedia/commons/thumb/5/58/Vega-Lite_Logo.svg/1280px-Vega-Lite_Logo.svg.png","^5",["^ ","~$org.browjure.vega.controlled-components",["^7",[["~$org.browjure.vega.controlled-components/vega-component","Returns vega react form with first argument props ","(defmacro vega-component\n  \"Returns vega react form with first argument props \"\n  [spec & props]\n  `(~'$ :div\n    (merge\n     {:ref (fn [~'c]\n             (when ~'c\n               (~'vega-embed ~'c (~'clj->js ~spec))))}\n     ~(first props))))"]]]],"^O",[["^ ","^P","Vega","^Q","Vega(-lite) specs can be embedded in browjure apps, pass a vega spec as edn to `vega-component`","^R","(ns\n my-namespace\n (:require\n  [[org.browjure.vega.plugin :as vega.plugin]\n   [org.browjure.vega.controlled-components :refer [vega-component]]]))\n \n(with-hooks\n []\n (vega-component\n  {\"$schema\" \"https://vega.github.io/schema/vega-lite/v5.json\",\n   \"description\" \"A simple bar chart with embedded data.\",\n   \"params\"\n   [{\"name\" \"cornerRadius\",\n     \"value\" 0,\n     \"bind\" {\"input\" \"range\", \"min\" 0, \"max\" 50, \"step\" 1}}],\n   \"data\"\n   {\"values\"\n    [{\"a\" \"A\", \"b\" 28}\n     {\"a\" \"B\", \"b\" 55}\n     {\"a\" \"C\", \"b\" 43}\n     {\"a\" \"D\", \"b\" 91}\n     {\"a\" \"E\", \"b\" 81}\n     {\"a\" \"F\", \"b\" 53}\n     {\"a\" \"G\", \"b\" 19}\n     {\"a\" \"H\", \"b\" 87}\n     {\"a\" \"I\", \"b\" 52}]},\n   \"mark\" {\"type\" \"bar\", \"cornerRadius\" {\"expr\" \"cornerRadius\"}},\n   \"encoding\"\n   {\"x\" {\"field\" \"a\", \"type\" \"nominal\", \"axis\" {\"labelAngle\" 0}},\n    \"y\" {\"field\" \"b\", \"type\" \"quantitative\"}}}))","^T","^5N"]]]]],"~:type","~:set-path-value"]